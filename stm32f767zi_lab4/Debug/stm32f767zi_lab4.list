
stm32f767zi_lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d00  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004f00  08004f00  00005f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f78  08004f78  00006074  2**0
                  CONTENTS
  4 .ARM          00000008  08004f78  08004f78  00005f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f80  08004f80  00006074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f80  08004f80  00005f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f84  08004f84  00005f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08004f88  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000078  08004ffc  00006078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08004ffc  00006260  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009461  00000000  00000000  000060a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b58  00000000  00000000  0000f503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  00011060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000668  00000000  00000000  000118d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e99  00000000  00000000  00011f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b90c  00000000  00000000  00013dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed2a4  00000000  00000000  0001f6dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c981  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026e8  00000000  00000000  0010c9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0010f0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08004ee8 	.word	0x08004ee8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08004ee8 	.word	0x08004ee8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <LCD_SendBytes>:
#define LCDS_ERR_ARG_POS_RANGE		9	// The argument is not within 0, 7 range for characters position in the memory

//other defines used for library functions
#define MAX						150

static void LCD_SendBytes(uint8_t* dataChars, uint8_t lenght){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_ADDRESS_LCD << 1), dataChars, lenght, I2C_TIMEOUT);
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	220a      	movs	r2, #10
 80005f2:	9200      	str	r2, [sp, #0]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	2190      	movs	r1, #144	@ 0x90
 80005f8:	4803      	ldr	r0, [pc, #12]	@ (8000608 <LCD_SendBytes+0x28>)
 80005fa:	f001 f993 	bl	8001924 <HAL_I2C_Master_Transmit>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000094 	.word	0x20000094

0800060c <LCD_DisplaySet>:
**
**	Description:
**		This function turns the display and the backlight on or off, according to the user's selection
**
-----------------------------------------------------------------------*/
static void LCD_DisplaySet(bool setDisplay, bool setBckl) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	460a      	mov	r2, r1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	4613      	mov	r3, r2
 800061a:	71bb      	strb	r3, [r7, #6]
    uint8_t dispBcklOff []  = {ESC, BRACKET, '0', DISP_EN_CMD};
 800061c:	4b22      	ldr	r3, [pc, #136]	@ (80006a8 <LCD_DisplaySet+0x9c>)
 800061e:	617b      	str	r3, [r7, #20]
	uint8_t dispOnBckl  []  = {ESC, BRACKET, '1', DISP_EN_CMD};
 8000620:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <LCD_DisplaySet+0xa0>)
 8000622:	613b      	str	r3, [r7, #16]
	uint8_t dispBcklOn  []  = {ESC, BRACKET, '2', DISP_EN_CMD};
 8000624:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <LCD_DisplaySet+0xa4>)
 8000626:	60fb      	str	r3, [r7, #12]
	uint8_t dispOnBcklOn[]  = {ESC, BRACKET, '3', DISP_EN_CMD};
 8000628:	4b22      	ldr	r3, [pc, #136]	@ (80006b4 <LCD_DisplaySet+0xa8>)
 800062a:	60bb      	str	r3, [r7, #8]

	if ((!setDisplay)&&(!setBckl))	{
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	f083 0301 	eor.w	r3, r3, #1
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d00c      	beq.n	8000652 <LCD_DisplaySet+0x46>
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	f083 0301 	eor.w	r3, r3, #1
 800063e:	b2db      	uxtb	r3, r3
 8000640:	2b00      	cmp	r3, #0
 8000642:	d006      	beq.n	8000652 <LCD_DisplaySet+0x46>
		//send the command for both display and backlight off
		LCD_SendBytes(dispBcklOff, 4);
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	2104      	movs	r1, #4
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ffc8 	bl	80005e0 <LCD_SendBytes>
 8000650:	e026      	b.n	80006a0 <LCD_DisplaySet+0x94>
	}
	else if ((setDisplay)&&(!setBckl))	{
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d00c      	beq.n	8000672 <LCD_DisplaySet+0x66>
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	f083 0301 	eor.w	r3, r3, #1
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d006      	beq.n	8000672 <LCD_DisplaySet+0x66>
		//send the command for display on and backlight off
		LCD_SendBytes(dispOnBckl, 4);
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	2104      	movs	r1, #4
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ffb8 	bl	80005e0 <LCD_SendBytes>
 8000670:	e016      	b.n	80006a0 <LCD_DisplaySet+0x94>
	}
	else if ((!setDisplay)&&(setBckl))	{
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f083 0301 	eor.w	r3, r3, #1
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b00      	cmp	r3, #0
 800067c:	d009      	beq.n	8000692 <LCD_DisplaySet+0x86>
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d006      	beq.n	8000692 <LCD_DisplaySet+0x86>
		//send the command for backlight on and display off
		LCD_SendBytes(dispBcklOn, 4);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2104      	movs	r1, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ffa8 	bl	80005e0 <LCD_SendBytes>
 8000690:	e006      	b.n	80006a0 <LCD_DisplaySet+0x94>
	}
	else {
		//send the command for both display and backlight on
		LCD_SendBytes(dispOnBcklOn, 4);
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	2104      	movs	r1, #4
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ffa1 	bl	80005e0 <LCD_SendBytes>
	}
}
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	65305b1b 	.word	0x65305b1b
 80006ac:	65315b1b 	.word	0x65315b1b
 80006b0:	65325b1b 	.word	0x65325b1b
 80006b4:	65335b1b 	.word	0x65335b1b

080006b8 <LCD_DisplayClear>:
**
**	Description:
**		This function clears the display and returns the cursor home
**
-----------------------------------------------------------------------*/
static void LCD_DisplayClear() {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
	uint8_t dispClr[] = {ESC, BRACKET, DISP_CLR_CMD};
 80006be:	4a08      	ldr	r2, [pc, #32]	@ (80006e0 <LCD_DisplayClear+0x28>)
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	6812      	ldr	r2, [r2, #0]
 80006c4:	4611      	mov	r1, r2
 80006c6:	8019      	strh	r1, [r3, #0]
 80006c8:	3302      	adds	r3, #2
 80006ca:	0c12      	lsrs	r2, r2, #16
 80006cc:	701a      	strb	r2, [r3, #0]
	//clear the display and returns the cursor home
	LCD_SendBytes(dispClr, 3);
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2103      	movs	r1, #3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ff84 	bl	80005e0 <LCD_SendBytes>
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	08004f00 	.word	0x08004f00

080006e4 <LCD_WriteStringAtPos>:
**		strLn   - the string to be written
**
**		This function writes a string at a specified position
**
-----------------------------------------------------------------------*/
static uint8_t LCD_WriteStringAtPos(uint8_t idxRow, uint8_t idxCol, char* strLn, uint8_t length) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	603a      	str	r2, [r7, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
 80006f2:	460b      	mov	r3, r1
 80006f4:	71bb      	strb	r3, [r7, #6]
 80006f6:	4613      	mov	r3, r2
 80006f8:	717b      	strb	r3, [r7, #5]
	int i;
	int j;
	uint8_t bResult = LCDS_ERR_SUCCESS;
 80006fa:	2300      	movs	r3, #0
 80006fc:	75fb      	strb	r3, [r7, #23]
	if (idxRow < 0 || idxRow > 2){
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b02      	cmp	r3, #2
 8000702:	d903      	bls.n	800070c <LCD_WriteStringAtPos+0x28>
		bResult |= LCDS_ERR_ARG_ROW_RANGE;
 8000704:	7dfb      	ldrb	r3, [r7, #23]
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	75fb      	strb	r3, [r7, #23]
	}
	if (idxCol < 0 || idxCol > 39){
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	2b27      	cmp	r3, #39	@ 0x27
 8000710:	d903      	bls.n	800071a <LCD_WriteStringAtPos+0x36>
		bResult |= LCDS_ERR_ARG_COL_RANGE;
 8000712:	7dfb      	ldrb	r3, [r7, #23]
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	75fb      	strb	r3, [r7, #23]
	}
	if (bResult == LCDS_ERR_SUCCESS){
 800071a:	7dfb      	ldrb	r3, [r7, #23]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d13a      	bne.n	8000796 <LCD_WriteStringAtPos+0xb2>
		//separate the position digits in order to send them, useful when the position is greater than 10
		uint8_t firstDigit 		= idxCol % 10;
 8000720:	79ba      	ldrb	r2, [r7, #6]
 8000722:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <LCD_WriteStringAtPos+0xbc>)
 8000724:	fba3 1302 	umull	r1, r3, r3, r2
 8000728:	08d9      	lsrs	r1, r3, #3
 800072a:	460b      	mov	r3, r1
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	440b      	add	r3, r1
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	75bb      	strb	r3, [r7, #22]
		uint8_t secondDigit 	= idxCol / 10;
 8000736:	79bb      	ldrb	r3, [r7, #6]
 8000738:	4a19      	ldr	r2, [pc, #100]	@ (80007a0 <LCD_WriteStringAtPos+0xbc>)
 800073a:	fba2 2303 	umull	r2, r3, r2, r3
 800073e:	08db      	lsrs	r3, r3, #3
 8000740:	757b      	strb	r3, [r7, #21]
		//uint8_t length 			= strlen(strLn);
		uint8_t lengthToPrint   = length + idxCol;
 8000742:	797a      	ldrb	r2, [r7, #5]
 8000744:	79bb      	ldrb	r3, [r7, #6]
 8000746:	4413      	add	r3, r2
 8000748:	753b      	strb	r3, [r7, #20]
		uint8_t stringToSend[]  = {ESC, BRACKET, idxRow + '0', ';', secondDigit + '0', firstDigit + '0', CURSOR_POS_CMD};
 800074a:	231b      	movs	r3, #27
 800074c:	733b      	strb	r3, [r7, #12]
 800074e:	235b      	movs	r3, #91	@ 0x5b
 8000750:	737b      	strb	r3, [r7, #13]
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	3330      	adds	r3, #48	@ 0x30
 8000756:	b2db      	uxtb	r3, r3
 8000758:	73bb      	strb	r3, [r7, #14]
 800075a:	233b      	movs	r3, #59	@ 0x3b
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	7d7b      	ldrb	r3, [r7, #21]
 8000760:	3330      	adds	r3, #48	@ 0x30
 8000762:	b2db      	uxtb	r3, r3
 8000764:	743b      	strb	r3, [r7, #16]
 8000766:	7dbb      	ldrb	r3, [r7, #22]
 8000768:	3330      	adds	r3, #48	@ 0x30
 800076a:	b2db      	uxtb	r3, r3
 800076c:	747b      	strb	r3, [r7, #17]
 800076e:	2348      	movs	r3, #72	@ 0x48
 8000770:	74bb      	strb	r3, [r7, #18]
		if (lengthToPrint > 40) {
 8000772:	7d3b      	ldrb	r3, [r7, #20]
 8000774:	2b28      	cmp	r3, #40	@ 0x28
 8000776:	d903      	bls.n	8000780 <LCD_WriteStringAtPos+0x9c>
			//truncate the lenght of the string
			//if it's greater than the positions number of a line
			length = 40 - idxCol;
 8000778:	79bb      	ldrb	r3, [r7, #6]
 800077a:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 800077e:	717b      	strb	r3, [r7, #5]
		}
		LCD_SendBytes(stringToSend, 7);
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2107      	movs	r1, #7
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff2a 	bl	80005e0 <LCD_SendBytes>
		LCD_SendBytes((uint8_t *)strLn, length);
 800078c:	797b      	ldrb	r3, [r7, #5]
 800078e:	4619      	mov	r1, r3
 8000790:	6838      	ldr	r0, [r7, #0]
 8000792:	f7ff ff25 	bl	80005e0 <LCD_SendBytes>
	}
	return bResult;
 8000796:	7dfb      	ldrb	r3, [r7, #23]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	cccccccd 	.word	0xcccccccd

080007a4 <LCD_SetPos>:

/* ------------------------------------------------------------------- */
/** unint8_t  LCDS::SetPos(uint8_t idxRow, uint8_t idxCol)
**		This function sets the cursor position
-----------------------------------------------------------------------*/
static uint8_t LCD_SetPos(uint8_t idxRow, uint8_t idxCol) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	460a      	mov	r2, r1
 80007ae:	71fb      	strb	r3, [r7, #7]
 80007b0:	4613      	mov	r3, r2
 80007b2:	71bb      	strb	r3, [r7, #6]
	uint8_t bResult = LCDS_ERR_SUCCESS;
 80007b4:	2300      	movs	r3, #0
 80007b6:	75fb      	strb	r3, [r7, #23]
	if (idxRow < 0 || idxRow > 2){
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d903      	bls.n	80007c6 <LCD_SetPos+0x22>
		bResult |= LCDS_ERR_ARG_ROW_RANGE;
 80007be:	7dfb      	ldrb	r3, [r7, #23]
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	75fb      	strb	r3, [r7, #23]
	}
	if (idxCol < 0 || idxCol > 39){
 80007c6:	79bb      	ldrb	r3, [r7, #6]
 80007c8:	2b27      	cmp	r3, #39	@ 0x27
 80007ca:	d903      	bls.n	80007d4 <LCD_SetPos+0x30>
		bResult |= LCDS_ERR_ARG_COL_RANGE;
 80007cc:	7dfb      	ldrb	r3, [r7, #23]
 80007ce:	f043 0302 	orr.w	r3, r3, #2
 80007d2:	75fb      	strb	r3, [r7, #23]
	}
	if (bResult == LCDS_ERR_SUCCESS){
 80007d4:	7dfb      	ldrb	r3, [r7, #23]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d12a      	bne.n	8000830 <LCD_SetPos+0x8c>
		//separate the position digits in order to send them, useful when the position is greater than 10
		uint8_t firstDigit 	= idxCol % 10;
 80007da:	79ba      	ldrb	r2, [r7, #6]
 80007dc:	4b17      	ldr	r3, [pc, #92]	@ (800083c <LCD_SetPos+0x98>)
 80007de:	fba3 1302 	umull	r1, r3, r3, r2
 80007e2:	08d9      	lsrs	r1, r3, #3
 80007e4:	460b      	mov	r3, r1
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	440b      	add	r3, r1
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	75bb      	strb	r3, [r7, #22]
		uint8_t secondDigit 	= idxCol / 10;
 80007f0:	79bb      	ldrb	r3, [r7, #6]
 80007f2:	4a12      	ldr	r2, [pc, #72]	@ (800083c <LCD_SetPos+0x98>)
 80007f4:	fba2 2303 	umull	r2, r3, r2, r3
 80007f8:	08db      	lsrs	r3, r3, #3
 80007fa:	757b      	strb	r3, [r7, #21]
		uint8_t stringToSend[] = {ESC, BRACKET, idxRow + '0', ';', secondDigit + '0', firstDigit + '0', CURSOR_POS_CMD};
 80007fc:	231b      	movs	r3, #27
 80007fe:	733b      	strb	r3, [r7, #12]
 8000800:	235b      	movs	r3, #91	@ 0x5b
 8000802:	737b      	strb	r3, [r7, #13]
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	3330      	adds	r3, #48	@ 0x30
 8000808:	b2db      	uxtb	r3, r3
 800080a:	73bb      	strb	r3, [r7, #14]
 800080c:	233b      	movs	r3, #59	@ 0x3b
 800080e:	73fb      	strb	r3, [r7, #15]
 8000810:	7d7b      	ldrb	r3, [r7, #21]
 8000812:	3330      	adds	r3, #48	@ 0x30
 8000814:	b2db      	uxtb	r3, r3
 8000816:	743b      	strb	r3, [r7, #16]
 8000818:	7dbb      	ldrb	r3, [r7, #22]
 800081a:	3330      	adds	r3, #48	@ 0x30
 800081c:	b2db      	uxtb	r3, r3
 800081e:	747b      	strb	r3, [r7, #17]
 8000820:	2348      	movs	r3, #72	@ 0x48
 8000822:	74bb      	strb	r3, [r7, #18]
		LCD_SendBytes(stringToSend, 7);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	2107      	movs	r1, #7
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fed8 	bl	80005e0 <LCD_SendBytes>
	}
	return	bResult;
 8000830:	7dfb      	ldrb	r3, [r7, #23]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	cccccccd 	.word	0xcccccccd

08000840 <LCD_BuildUserDefChar>:
**		cmdStr	   - characters array containing the values converted
**	Description:
**		This function builds the string to be converted in an interpretable array of chars for the LCD
**
-----------------------------------------------------------------------*/
static void LCD_BuildUserDefChar(uint8_t* strUserDef, char* cmdStr) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
	uint8_t len = 8;
 800084a:	2308      	movs	r3, #8
 800084c:	74fb      	strb	r3, [r7, #19]
	char elStr[4];
	//print the bytes from the input array as hex values
	for(int i = 0; i < len; i++){
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	e03d      	b.n	80008d0 <LCD_BuildUserDefChar+0x90>
		sprintf(elStr, "%2.2X", strUserDef[i]);
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	4413      	add	r3, r2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	4920      	ldr	r1, [pc, #128]	@ (80008e4 <LCD_BuildUserDefChar+0xa4>)
 8000864:	4618      	mov	r0, r3
 8000866:	f003 fe8f 	bl	8004588 <siprintf>
		//concatenate the result with the 0x chars to be able to send it to the LCD
		strcat(cmdStr, "0x");
 800086a:	6838      	ldr	r0, [r7, #0]
 800086c:	f7ff fce8 	bl	8000240 <strlen>
 8000870:	4603      	mov	r3, r0
 8000872:	461a      	mov	r2, r3
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	4413      	add	r3, r2
 8000878:	4a1b      	ldr	r2, [pc, #108]	@ (80008e8 <LCD_BuildUserDefChar+0xa8>)
 800087a:	8811      	ldrh	r1, [r2, #0]
 800087c:	7892      	ldrb	r2, [r2, #2]
 800087e:	8019      	strh	r1, [r3, #0]
 8000880:	709a      	strb	r2, [r3, #2]
		//since the Arduino compiler has a bug in the sprintf function, so it doesn't interpret the
		//precision and width specifiers as it should, by adding a 0 in front of a number greater than 16,
		//we need to eliminate that 0 from the string
		if (strUserDef[i] > 15) {
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	4413      	add	r3, r2
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b0f      	cmp	r3, #15
 800088c:	d909      	bls.n	80008a2 <LCD_BuildUserDefChar+0x62>
			elStr[3] = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	73fb      	strb	r3, [r7, #15]
			strcat(cmdStr, elStr + 1);
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	3301      	adds	r3, #1
 8000898:	4619      	mov	r1, r3
 800089a:	6838      	ldr	r0, [r7, #0]
 800089c:	f003 fe9c 	bl	80045d8 <strcat>
 80008a0:	e007      	b.n	80008b2 <LCD_BuildUserDefChar+0x72>
		}
		else {
			elStr[2] = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	73bb      	strb	r3, [r7, #14]
			strcat(cmdStr, elStr);
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	4619      	mov	r1, r3
 80008ac:	6838      	ldr	r0, [r7, #0]
 80008ae:	f003 fe93 	bl	80045d8 <strcat>
		}
		strcat(cmdStr, ";");
 80008b2:	6838      	ldr	r0, [r7, #0]
 80008b4:	f7ff fcc4 	bl	8000240 <strlen>
 80008b8:	4603      	mov	r3, r0
 80008ba:	461a      	mov	r2, r3
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	4413      	add	r3, r2
 80008c0:	490a      	ldr	r1, [pc, #40]	@ (80008ec <LCD_BuildUserDefChar+0xac>)
 80008c2:	461a      	mov	r2, r3
 80008c4:	460b      	mov	r3, r1
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	8013      	strh	r3, [r2, #0]
	for(int i = 0; i < len; i++){
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	3301      	adds	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	7cfb      	ldrb	r3, [r7, #19]
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	dbbd      	blt.n	8000854 <LCD_BuildUserDefChar+0x14>
	}
}
 80008d8:	bf00      	nop
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	08004f04 	.word	0x08004f04
 80008e8:	08004f0c 	.word	0x08004f0c
 80008ec:	08004f10 	.word	0x08004f10

080008f0 <LCD_DefineUserChar>:
**					- LCDS_ERR_ARG_POS_RANGE - The argument is not within 0, 7 range
**	Description:
**		This function saves a user defined char in the RAM memory
**
-----------------------------------------------------------------------*/
static uint8_t LCD_DefineUserChar(uint8_t* strUserDef, uint8_t charPos) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b0a8      	sub	sp, #160	@ 0xa0
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	70fb      	strb	r3, [r7, #3]
	char rgcCmd[MAX];
	uint8_t bResult;
	if (charPos >= 0 && charPos <= 7){
 80008fc:	78fb      	ldrb	r3, [r7, #3]
 80008fe:	2b07      	cmp	r3, #7
 8000900:	d860      	bhi.n	80009c4 <LCD_DefineUserChar+0xd4>
		rgcCmd[0] = ESC;
 8000902:	231b      	movs	r3, #27
 8000904:	723b      	strb	r3, [r7, #8]
		rgcCmd[1] = BRACKET;
 8000906:	235b      	movs	r3, #91	@ 0x5b
 8000908:	727b      	strb	r3, [r7, #9]
		rgcCmd[2] = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	72bb      	strb	r3, [r7, #10]
		//build the values to be sent for defining the custom character
		LCD_BuildUserDefChar(strUserDef, rgcCmd + 2);
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	3302      	adds	r3, #2
 8000914:	4619      	mov	r1, r3
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff ff92 	bl	8000840 <LCD_BuildUserDefChar>
		uint8_t bLength = strlen(rgcCmd);
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fc8d 	bl	8000240 <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
		rgcCmd[bLength++] = (char)charPos + '0';
 800092c:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000930:	1c5a      	adds	r2, r3, #1
 8000932:	f887 209e 	strb.w	r2, [r7, #158]	@ 0x9e
 8000936:	4619      	mov	r1, r3
 8000938:	78fb      	ldrb	r3, [r7, #3]
 800093a:	3330      	adds	r3, #48	@ 0x30
 800093c:	b2da      	uxtb	r2, r3
 800093e:	f101 03a0 	add.w	r3, r1, #160	@ 0xa0
 8000942:	443b      	add	r3, r7
 8000944:	f803 2c98 	strb.w	r2, [r3, #-152]
		rgcCmd[bLength++] = DEF_CHAR_CMD;
 8000948:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 800094c:	1c5a      	adds	r2, r3, #1
 800094e:	f887 209e 	strb.w	r2, [r7, #158]	@ 0x9e
 8000952:	33a0      	adds	r3, #160	@ 0xa0
 8000954:	443b      	add	r3, r7
 8000956:	2264      	movs	r2, #100	@ 0x64
 8000958:	f803 2c98 	strb.w	r2, [r3, #-152]
		//save the defined character in the RAM
		rgcCmd[bLength++] = ESC;
 800095c:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000960:	1c5a      	adds	r2, r3, #1
 8000962:	f887 209e 	strb.w	r2, [r7, #158]	@ 0x9e
 8000966:	33a0      	adds	r3, #160	@ 0xa0
 8000968:	443b      	add	r3, r7
 800096a:	221b      	movs	r2, #27
 800096c:	f803 2c98 	strb.w	r2, [r3, #-152]
		rgcCmd[bLength++] = BRACKET;
 8000970:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	f887 209e 	strb.w	r2, [r7, #158]	@ 0x9e
 800097a:	33a0      	adds	r3, #160	@ 0xa0
 800097c:	443b      	add	r3, r7
 800097e:	225b      	movs	r2, #91	@ 0x5b
 8000980:	f803 2c98 	strb.w	r2, [r3, #-152]
		rgcCmd[bLength++] = '3';
 8000984:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000988:	1c5a      	adds	r2, r3, #1
 800098a:	f887 209e 	strb.w	r2, [r7, #158]	@ 0x9e
 800098e:	33a0      	adds	r3, #160	@ 0xa0
 8000990:	443b      	add	r3, r7
 8000992:	2233      	movs	r2, #51	@ 0x33
 8000994:	f803 2c98 	strb.w	r2, [r3, #-152]
		rgcCmd[bLength++] = PRG_CHAR_CMD;
 8000998:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	f887 209e 	strb.w	r2, [r7, #158]	@ 0x9e
 80009a2:	33a0      	adds	r3, #160	@ 0xa0
 80009a4:	443b      	add	r3, r7
 80009a6:	2270      	movs	r2, #112	@ 0x70
 80009a8:	f803 2c98 	strb.w	r2, [r3, #-152]
		LCD_SendBytes((unsigned char*)(rgcCmd), bLength);
 80009ac:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	4611      	mov	r1, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fe12 	bl	80005e0 <LCD_SendBytes>
		bResult = LCDS_ERR_SUCCESS;
 80009bc:	2300      	movs	r3, #0
 80009be:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 80009c2:	e002      	b.n	80009ca <LCD_DefineUserChar+0xda>
	}
	else {
		bResult = LCDS_ERR_ARG_POS_RANGE;
 80009c4:	2309      	movs	r3, #9
 80009c6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	}
	return bResult;
 80009ca:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	37a0      	adds	r7, #160	@ 0xa0
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <LCD_DispUserChar>:
**						- LCDS_ERR_ARG_ROW_RANGE - The argument is not within 0, 2 range
**	Description:
**		This function displays a user defined char at the specified position on the LCD
**
-----------------------------------------------------------------------*/
static uint8_t LCD_DispUserChar(uint8_t* charPos, uint8_t charNumber, uint8_t idxRow, uint8_t idxCol) {
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b084      	sub	sp, #16
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	4608      	mov	r0, r1
 80009e0:	4611      	mov	r1, r2
 80009e2:	461a      	mov	r2, r3
 80009e4:	4603      	mov	r3, r0
 80009e6:	70fb      	strb	r3, [r7, #3]
 80009e8:	460b      	mov	r3, r1
 80009ea:	70bb      	strb	r3, [r7, #2]
 80009ec:	4613      	mov	r3, r2
 80009ee:	707b      	strb	r3, [r7, #1]
	uint8_t bResult = LCDS_ERR_SUCCESS;
 80009f0:	2300      	movs	r3, #0
 80009f2:	73fb      	strb	r3, [r7, #15]
	if (idxRow < 0 || idxRow > 2){
 80009f4:	78bb      	ldrb	r3, [r7, #2]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d903      	bls.n	8000a02 <LCD_DispUserChar+0x2c>
		bResult |= LCDS_ERR_ARG_ROW_RANGE;
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	73fb      	strb	r3, [r7, #15]
	}
	if (idxCol < 0 || idxCol > 39){
 8000a02:	787b      	ldrb	r3, [r7, #1]
 8000a04:	2b27      	cmp	r3, #39	@ 0x27
 8000a06:	d903      	bls.n	8000a10 <LCD_DispUserChar+0x3a>
		bResult |= LCDS_ERR_ARG_COL_RANGE;
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	f043 0302 	orr.w	r3, r3, #2
 8000a0e:	73fb      	strb	r3, [r7, #15]
	}
	if (bResult == LCDS_ERR_SUCCESS){
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d10a      	bne.n	8000a2c <LCD_DispUserChar+0x56>
		//set the position of the cursor to the wanted line/column for displaying custom chars
		LCD_SetPos(idxRow, idxCol);
 8000a16:	787a      	ldrb	r2, [r7, #1]
 8000a18:	78bb      	ldrb	r3, [r7, #2]
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fec1 	bl	80007a4 <LCD_SetPos>
		//send the position of the character or characters that have to be displayed, and their number
		LCD_SendBytes(charPos, charNumber);
 8000a22:	78fb      	ldrb	r3, [r7, #3]
 8000a24:	4619      	mov	r1, r3
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff fdda 	bl	80005e0 <LCD_SendBytes>
	}
	return bResult;
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <LCD_disp_double>:

	LCD_WriteStringAtPos(idxRow, idxCol, temp_char, digits+1);
}

/* Вывод дробного числа, начиная с заданной позиции */
static void LCD_disp_double(uint8_t idxRow, uint8_t idxCol, double num){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	460a      	mov	r2, r1
 8000a42:	ed87 0b00 	vstr	d0, [r7]
 8000a46:	73fb      	strb	r3, [r7, #15]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	73bb      	strb	r3, [r7, #14]
	char temp_char[8] = {"   .    "};
 8000a4c:	4a3a      	ldr	r2, [pc, #232]	@ (8000b38 <LCD_disp_double+0x100>)
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a56:	e883 0003 	stmia.w	r3, {r0, r1}

	if(num < 0){
 8000a5a:	ed97 7b00 	vldr	d7, [r7]
 8000a5e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a66:	d507      	bpl.n	8000a78 <LCD_disp_double+0x40>
		temp_char[0] = '-';
 8000a68:	232d      	movs	r3, #45	@ 0x2d
 8000a6a:	753b      	strb	r3, [r7, #20]
		num = -num;
 8000a6c:	ed97 7b00 	vldr	d7, [r7]
 8000a70:	eeb1 7b47 	vneg.f64	d7, d7
 8000a74:	ed87 7b00 	vstr	d7, [r7]
	}
	temp_char[1] = '0'+num/10;
 8000a78:	ed97 6b00 	vldr	d6, [r7]
 8000a7c:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8000a80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a84:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8000b30 <LCD_disp_double+0xf8>
 8000a88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a90:	edc7 7a02 	vstr	s15, [r7, #8]
 8000a94:	7a3b      	ldrb	r3, [r7, #8]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	757b      	strb	r3, [r7, #21]
	temp_char[2] = '0'+(int)num%10;
 8000a9a:	ed97 7b00 	vldr	d7, [r7]
 8000a9e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000aa2:	ee17 1a90 	vmov	r1, s15
 8000aa6:	4b25      	ldr	r3, [pc, #148]	@ (8000b3c <LCD_disp_double+0x104>)
 8000aa8:	fb83 2301 	smull	r2, r3, r3, r1
 8000aac:	109a      	asrs	r2, r3, #2
 8000aae:	17cb      	asrs	r3, r1, #31
 8000ab0:	1ad2      	subs	r2, r2, r3
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4413      	add	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	1aca      	subs	r2, r1, r3
 8000abc:	b2d3      	uxtb	r3, r2
 8000abe:	3330      	adds	r3, #48	@ 0x30
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	75bb      	strb	r3, [r7, #22]

	for(int i=4; i<=7; i++){
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	61fb      	str	r3, [r7, #28]
 8000ac8:	e024      	b.n	8000b14 <LCD_disp_double+0xdc>
		num = num*10;
 8000aca:	ed97 7b00 	vldr	d7, [r7]
 8000ace:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000ad2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ad6:	ed87 7b00 	vstr	d7, [r7]
		temp_char[i] = '0'+(int)num%10;
 8000ada:	ed97 7b00 	vldr	d7, [r7]
 8000ade:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ae2:	ee17 1a90 	vmov	r1, s15
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <LCD_disp_double+0x104>)
 8000ae8:	fb83 2301 	smull	r2, r3, r3, r1
 8000aec:	109a      	asrs	r2, r3, #2
 8000aee:	17cb      	asrs	r3, r1, #31
 8000af0:	1ad2      	subs	r2, r2, r3
 8000af2:	4613      	mov	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	1aca      	subs	r2, r1, r3
 8000afc:	b2d3      	uxtb	r3, r2
 8000afe:	3330      	adds	r3, #48	@ 0x30
 8000b00:	b2d9      	uxtb	r1, r3
 8000b02:	f107 0214 	add.w	r2, r7, #20
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	4413      	add	r3, r2
 8000b0a:	460a      	mov	r2, r1
 8000b0c:	701a      	strb	r2, [r3, #0]
	for(int i=4; i<=7; i++){
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3301      	adds	r3, #1
 8000b12:	61fb      	str	r3, [r7, #28]
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	2b07      	cmp	r3, #7
 8000b18:	ddd7      	ble.n	8000aca <LCD_disp_double+0x92>
	}

	LCD_WriteStringAtPos(idxRow, idxCol, temp_char, 7);
 8000b1a:	f107 0214 	add.w	r2, r7, #20
 8000b1e:	7bb9      	ldrb	r1, [r7, #14]
 8000b20:	7bf8      	ldrb	r0, [r7, #15]
 8000b22:	2307      	movs	r3, #7
 8000b24:	f7ff fdde 	bl	80006e4 <LCD_WriteStringAtPos>
}
 8000b28:	bf00      	nop
 8000b2a:	3720      	adds	r7, #32
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	00000000 	.word	0x00000000
 8000b34:	40480000 	.word	0x40480000
 8000b38:	08004f14 	.word	0x08004f14
 8000b3c:	66666667 	.word	0x66666667

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	@ 0x28
 8000b44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b46:	f000 faee 	bl	8001126 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4a:	f000 f873 	bl	8000c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4e:	f000 f90d 	bl	8000d6c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000b52:	f000 f8cb 	bl	8000cec <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  transmitData[0] = tempConfAddress;
 8000b56:	4b2e      	ldr	r3, [pc, #184]	@ (8000c10 <main+0xd0>)
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c14 <main+0xd4>)
 8000b5c:	701a      	strb	r2, [r3, #0]
  transmitData[1] = 0x60;
 8000b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c14 <main+0xd4>)
 8000b60:	2260      	movs	r2, #96	@ 0x60
 8000b62:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c2, (I2C_ADDRESS_TEMP << 1), transmitData, 2,  I2C_TIMEOUT);
 8000b64:	230a      	movs	r3, #10
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	2302      	movs	r3, #2
 8000b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8000c14 <main+0xd4>)
 8000b6c:	2192      	movs	r1, #146	@ 0x92
 8000b6e:	482a      	ldr	r0, [pc, #168]	@ (8000c18 <main+0xd8>)
 8000b70:	f000 fed8 	bl	8001924 <HAL_I2C_Master_Transmit>

  LCD_DisplaySet(true, true);
 8000b74:	2101      	movs	r1, #1
 8000b76:	2001      	movs	r0, #1
 8000b78:	f7ff fd48 	bl	800060c <LCD_DisplaySet>
  LCD_DisplayClear(); // clear display, return cursor home
 8000b7c:	f7ff fd9c 	bl	80006b8 <LCD_DisplayClear>
  //LCD_WriteStringAtPos(0, 0, Text_int, 16);
  LCD_WriteStringAtPos(0, 0, Text_double, 16);
 8000b80:	2310      	movs	r3, #16
 8000b82:	4a26      	ldr	r2, [pc, #152]	@ (8000c1c <main+0xdc>)
 8000b84:	2100      	movs	r1, #0
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff fdac 	bl	80006e4 <LCD_WriteStringAtPos>
  // Вывод пользовательского символа
  uint8_t degree[8] = {2,5,2,0,0,0,0,0};
 8000b8c:	4a24      	ldr	r2, [pc, #144]	@ (8000c20 <main+0xe0>)
 8000b8e:	f107 0318 	add.w	r3, r7, #24
 8000b92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b96:	e883 0003 	stmia.w	r3, {r0, r1}
  LCD_DefineUserChar(degree,0);
 8000b9a:	f107 0318 	add.w	r3, r7, #24
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fea5 	bl	80008f0 <LCD_DefineUserChar>
  uint8_t strelka_vverh[8] = {
 8000ba6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c24 <main+0xe4>)
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bb0:	e883 0003 	stmia.w	r3, {r0, r1}
		  0b00100,
		  0b00100,
		  0b00100,
		  0b00100,
		  0b00100};
  uint8_t strelka_vniz[8] = {
 8000bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c28 <main+0xe8>)
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bbe:	e883 0003 	stmia.w	r3, {r0, r1}
		  0b00100,
		  0b00100,
		  0b10101,
		  0b01110,
		  0b00100};
  uint8_t degree_pos = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	71fb      	strb	r3, [r7, #7]
//  uint8_t strelkavverh_pos = 1;
//  uint8_t strelkavniz_pos = 2;
  LCD_DefineUserChar(strelka_vverh,1);
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	2101      	movs	r1, #1
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fe8f 	bl	80008f0 <LCD_DefineUserChar>
  LCD_DefineUserChar(strelka_vniz,2);
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	2102      	movs	r1, #2
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fe89 	bl	80008f0 <LCD_DefineUserChar>
  LCD_DispUserChar(&degree_pos, 1, 0, 11);
 8000bde:	1df8      	adds	r0, r7, #7
 8000be0:	230b      	movs	r3, #11
 8000be2:	2200      	movs	r2, #0
 8000be4:	2101      	movs	r1, #1
 8000be6:	f7ff fef6 	bl	80009d6 <LCD_DispUserChar>
  //LCD_DispUserChar(&strelkavverh_pos, 1, 1, 5);
  HAL_I2C_Master_Transmit(&hi2c2, (I2C_ADDRESS_TEMP << 1), &tempDataAddress, 1,  I2C_TIMEOUT);
 8000bea:	230a      	movs	r3, #10
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2301      	movs	r3, #1
 8000bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8000c2c <main+0xec>)
 8000bf2:	2192      	movs	r1, #146	@ 0x92
 8000bf4:	4808      	ldr	r0, [pc, #32]	@ (8000c18 <main+0xd8>)
 8000bf6:	f000 fe95 	bl	8001924 <HAL_I2C_Master_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Через прерывание
	  HAL_I2C_Master_Receive_IT(&hi2c2, (I2C_ADDRESS_TEMP << 1), regData, 2);
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8000c30 <main+0xf0>)
 8000bfe:	2192      	movs	r1, #146	@ 0x92
 8000c00:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <main+0xd8>)
 8000c02:	f000 ff83 	bl	8001b0c <HAL_I2C_Master_Receive_IT>
	  HAL_Delay(100);
 8000c06:	2064      	movs	r0, #100	@ 0x64
 8000c08:	f000 faea 	bl	80011e0 <HAL_Delay>
	  HAL_I2C_Master_Receive_IT(&hi2c2, (I2C_ADDRESS_TEMP << 1), regData, 2);
 8000c0c:	bf00      	nop
 8000c0e:	e7f4      	b.n	8000bfa <main+0xba>
 8000c10:	20000000 	.word	0x20000000
 8000c14:	200000e8 	.word	0x200000e8
 8000c18:	20000094 	.word	0x20000094
 8000c1c:	20000004 	.word	0x20000004
 8000c20:	08004f1c 	.word	0x08004f1c
 8000c24:	08004f24 	.word	0x08004f24
 8000c28:	08004f2c 	.word	0x08004f2c
 8000c2c:	200000fe 	.word	0x200000fe
 8000c30:	200000f4 	.word	0x200000f4

08000c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b094      	sub	sp, #80	@ 0x50
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	2234      	movs	r2, #52	@ 0x34
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f003 fcc0 	bl	80045c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c58:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <SystemClock_Config+0xb0>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5c:	4a21      	ldr	r2, [pc, #132]	@ (8000ce4 <SystemClock_Config+0xb0>)
 8000c5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <SystemClock_Config+0xb0>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce8 <SystemClock_Config+0xb4>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce8 <SystemClock_Config+0xb4>)
 8000c7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <SystemClock_Config+0xb4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c90:	2301      	movs	r3, #1
 8000c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c94:	2310      	movs	r3, #16
 8000c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f002 fbe9 	bl	8003478 <HAL_RCC_OscConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000cac:	f000 f8ee 	bl	8000e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cc4:	f107 0308 	add.w	r3, r7, #8
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 fe82 	bl	80039d4 <HAL_RCC_ClockConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cd6:	f000 f8d9 	bl	8000e8c <Error_Handler>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3750      	adds	r7, #80	@ 0x50
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40007000 	.word	0x40007000

08000cec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d64 <MX_I2C2_Init+0x78>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d68 <MX_I2C2_Init+0x7c>)
 8000cfa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d02:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d08:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d26:	480e      	ldr	r0, [pc, #56]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d28:	f000 fd6c 	bl	8001804 <HAL_I2C_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d32:	f000 f8ab 	bl	8000e8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d36:	2100      	movs	r1, #0
 8000d38:	4809      	ldr	r0, [pc, #36]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d3a:	f002 fb05 	bl	8003348 <HAL_I2CEx_ConfigAnalogFilter>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d44:	f000 f8a2 	bl	8000e8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d4c:	f002 fb47 	bl	80033de <HAL_I2CEx_ConfigDigitalFilter>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d56:	f000 f899 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000094 	.word	0x20000094
 8000d64:	40005800 	.word	0x40005800
 8000d68:	00303d5b 	.word	0x00303d5b

08000d6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d72:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <MX_GPIO_Init+0x2c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <MX_GPIO_Init+0x2c>)
 8000d78:	f043 0320 	orr.w	r3, r3, #32
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <MX_GPIO_Init+0x2c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0320 	and.w	r3, r3, #32
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800

08000d9c <HAL_I2C_MasterTxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  // Вызывается по окончанию отправки данных
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	// Вызывается по окончанию чтения данных
	static uint8_t strelkavverh_pos = 1;
	static uint8_t strelkavniz_pos = 2;
	if (temperature_old != temperature)
 8000db8:	4b2f      	ldr	r3, [pc, #188]	@ (8000e78 <HAL_I2C_MasterRxCpltCallback+0xc8>)
 8000dba:	ed93 6b00 	vldr	d6, [r3]
 8000dbe:	4b2f      	ldr	r3, [pc, #188]	@ (8000e7c <HAL_I2C_MasterRxCpltCallback+0xcc>)
 8000dc0:	ed93 7b00 	vldr	d7, [r3]
 8000dc4:	eeb4 6b47 	vcmp.f64	d6, d7
 8000dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dcc:	d005      	beq.n	8000dda <HAL_I2C_MasterRxCpltCallback+0x2a>
	{
		temperature_old = temperature;
 8000dce:	4b2b      	ldr	r3, [pc, #172]	@ (8000e7c <HAL_I2C_MasterRxCpltCallback+0xcc>)
 8000dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd4:	4928      	ldr	r1, [pc, #160]	@ (8000e78 <HAL_I2C_MasterRxCpltCallback+0xc8>)
 8000dd6:	e9c1 2300 	strd	r2, r3, [r1]

	}
	temperature = (int8_t)(regData[0]) + (regData[1]>>3)*0.0625;
 8000dda:	4b29      	ldr	r3, [pc, #164]	@ (8000e80 <HAL_I2C_MasterRxCpltCallback+0xd0>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000de8:	4b25      	ldr	r3, [pc, #148]	@ (8000e80 <HAL_I2C_MasterRxCpltCallback+0xd0>)
 8000dea:	785b      	ldrb	r3, [r3, #1]
 8000dec:	08db      	lsrs	r3, r3, #3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	ee07 3a90 	vmov	s15, r3
 8000df4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000df8:	ed9f 5b1d 	vldr	d5, [pc, #116]	@ 8000e70 <HAL_I2C_MasterRxCpltCallback+0xc0>
 8000dfc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e00:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e04:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <HAL_I2C_MasterRxCpltCallback+0xcc>)
 8000e06:	ed83 7b00 	vstr	d7, [r3]
	//LCD_disp_int(0,13,(int)temperature,2);
	//LCD_WriteStringAtPos(idxRow, idxCol, temp_char, 8);
	LCD_disp_double(0,4,temperature);
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <HAL_I2C_MasterRxCpltCallback+0xcc>)
 8000e0c:	ed93 7b00 	vldr	d7, [r3]
 8000e10:	eeb0 0b47 	vmov.f64	d0, d7
 8000e14:	2104      	movs	r1, #4
 8000e16:	2000      	movs	r0, #0
 8000e18:	f7ff fe0e 	bl	8000a38 <LCD_disp_double>
	if (temperature_old > temperature)
 8000e1c:	4b16      	ldr	r3, [pc, #88]	@ (8000e78 <HAL_I2C_MasterRxCpltCallback+0xc8>)
 8000e1e:	ed93 6b00 	vldr	d6, [r3]
 8000e22:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <HAL_I2C_MasterRxCpltCallback+0xcc>)
 8000e24:	ed93 7b00 	vldr	d7, [r3]
 8000e28:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e30:	dd06      	ble.n	8000e40 <HAL_I2C_MasterRxCpltCallback+0x90>
	{
		LCD_DispUserChar(&strelkavniz_pos, 1, 0, 13);
 8000e32:	230d      	movs	r3, #13
 8000e34:	2200      	movs	r2, #0
 8000e36:	2101      	movs	r1, #1
 8000e38:	4812      	ldr	r0, [pc, #72]	@ (8000e84 <HAL_I2C_MasterRxCpltCallback+0xd4>)
 8000e3a:	f7ff fdcc 	bl	80009d6 <LCD_DispUserChar>
	else if (temperature_old < temperature)
	{
		LCD_DispUserChar(&strelkavverh_pos, 1, 0, 13);

	}
}
 8000e3e:	e011      	b.n	8000e64 <HAL_I2C_MasterRxCpltCallback+0xb4>
	else if (temperature_old < temperature)
 8000e40:	4b0d      	ldr	r3, [pc, #52]	@ (8000e78 <HAL_I2C_MasterRxCpltCallback+0xc8>)
 8000e42:	ed93 6b00 	vldr	d6, [r3]
 8000e46:	4b0d      	ldr	r3, [pc, #52]	@ (8000e7c <HAL_I2C_MasterRxCpltCallback+0xcc>)
 8000e48:	ed93 7b00 	vldr	d7, [r3]
 8000e4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e54:	d400      	bmi.n	8000e58 <HAL_I2C_MasterRxCpltCallback+0xa8>
}
 8000e56:	e005      	b.n	8000e64 <HAL_I2C_MasterRxCpltCallback+0xb4>
		LCD_DispUserChar(&strelkavverh_pos, 1, 0, 13);
 8000e58:	230d      	movs	r3, #13
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	480a      	ldr	r0, [pc, #40]	@ (8000e88 <HAL_I2C_MasterRxCpltCallback+0xd8>)
 8000e60:	f7ff fdb9 	bl	80009d6 <LCD_DispUserChar>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	f3af 8000 	nop.w
 8000e70:	00000000 	.word	0x00000000
 8000e74:	3fb00000 	.word	0x3fb00000
 8000e78:	20000108 	.word	0x20000108
 8000e7c:	20000100 	.word	0x20000100
 8000e80:	200000f4 	.word	0x200000f4
 8000e84:	20000014 	.word	0x20000014
 8000e88:	20000015 	.word	0x20000015

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i
}
 8000e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <Error_Handler+0x8>

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <HAL_MspInit+0x44>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	4a0e      	ldr	r2, [pc, #56]	@ (8000edc <HAL_MspInit+0x44>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <HAL_MspInit+0x44>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <HAL_MspInit+0x44>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	4a08      	ldr	r2, [pc, #32]	@ (8000edc <HAL_MspInit+0x44>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_MspInit+0x44>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b0ae      	sub	sp, #184	@ 0xb8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2290      	movs	r2, #144	@ 0x90
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 fb61 	bl	80045c8 <memset>
  if(hi2c->Instance==I2C2)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a29      	ldr	r2, [pc, #164]	@ (8000fb0 <HAL_I2C_MspInit+0xd0>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d14b      	bne.n	8000fa8 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f14:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f002 ff0a 	bl	8003d38 <HAL_RCCEx_PeriphCLKConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f2a:	f7ff ffaf 	bl	8000e8c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f2e:	4b21      	ldr	r3, [pc, #132]	@ (8000fb4 <HAL_I2C_MspInit+0xd4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a20      	ldr	r2, [pc, #128]	@ (8000fb4 <HAL_I2C_MspInit+0xd4>)
 8000f34:	f043 0320 	orr.w	r3, r3, #32
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <HAL_I2C_MspInit+0xd4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0320 	and.w	r3, r3, #32
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f46:	2303      	movs	r3, #3
 8000f48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f4c:	2312      	movs	r3, #18
 8000f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f64:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4813      	ldr	r0, [pc, #76]	@ (8000fb8 <HAL_I2C_MspInit+0xd8>)
 8000f6c:	f000 fa9e 	bl	80014ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f70:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <HAL_I2C_MspInit+0xd4>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb4 <HAL_I2C_MspInit+0xd4>)
 8000f76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb4 <HAL_I2C_MspInit+0xd4>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2021      	movs	r0, #33	@ 0x21
 8000f8e:	f000 fa26 	bl	80013de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000f92:	2021      	movs	r0, #33	@ 0x21
 8000f94:	f000 fa3f 	bl	8001416 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2022      	movs	r0, #34	@ 0x22
 8000f9e:	f000 fa1e 	bl	80013de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000fa2:	2022      	movs	r0, #34	@ 0x22
 8000fa4:	f000 fa37 	bl	8001416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000fa8:	bf00      	nop
 8000faa:	37b8      	adds	r7, #184	@ 0xb8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40005800 	.word	0x40005800
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40021400 	.word	0x40021400

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <NMI_Handler+0x4>

08000fc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001012:	f000 f8c5 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <I2C2_EV_IRQHandler+0x10>)
 8001022:	f000 fde3 	bl	8001bec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000094 	.word	0x20000094

08001030 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001034:	4802      	ldr	r0, [pc, #8]	@ (8001040 <I2C2_ER_IRQHandler+0x10>)
 8001036:	f000 fdf3 	bl	8001c20 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000094 	.word	0x20000094

08001044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800104c:	4a14      	ldr	r2, [pc, #80]	@ (80010a0 <_sbrk+0x5c>)
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <_sbrk+0x60>)
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001058:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <_sbrk+0x64>)
 8001062:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <_sbrk+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d207      	bcs.n	8001084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001074:	f003 fac0 	bl	80045f8 <__errno>
 8001078:	4603      	mov	r3, r0
 800107a:	220c      	movs	r2, #12
 800107c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	e009      	b.n	8001098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108a:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <_sbrk+0x64>)
 8001094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20080000 	.word	0x20080000
 80010a4:	00000400 	.word	0x00000400
 80010a8:	20000110 	.word	0x20000110
 80010ac:	20000260 	.word	0x20000260

080010b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <SystemInit+0x20>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ba:	4a05      	ldr	r2, [pc, #20]	@ (80010d0 <SystemInit+0x20>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800110c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d8:	480d      	ldr	r0, [pc, #52]	@ (8001110 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010da:	490e      	ldr	r1, [pc, #56]	@ (8001114 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001118 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0b      	ldr	r2, [pc, #44]	@ (800111c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010f0:	4c0b      	ldr	r4, [pc, #44]	@ (8001120 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010fe:	f7ff ffd7 	bl	80010b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001102:	f003 fa7f 	bl	8004604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001106:	f7ff fd1b 	bl	8000b40 <main>
  bx  lr    
 800110a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800110c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001118:	08004f88 	.word	0x08004f88
  ldr r2, =_sbss
 800111c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001120:	20000260 	.word	0x20000260

08001124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC_IRQHandler>

08001126 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112a:	2003      	movs	r0, #3
 800112c:	f000 f94c 	bl	80013c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001130:	200f      	movs	r0, #15
 8001132:	f000 f805 	bl	8001140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001136:	f7ff feaf 	bl	8000e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <HAL_InitTick+0x54>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <HAL_InitTick+0x58>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f967 	bl	8001432 <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e00e      	b.n	800118c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d80a      	bhi.n	800118a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f000 f92f 	bl	80013de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001180:	4a06      	ldr	r2, [pc, #24]	@ (800119c <HAL_InitTick+0x5c>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000018 	.word	0x20000018
 8001198:	20000020 	.word	0x20000020
 800119c:	2000001c 	.word	0x2000001c

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	@ (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000020 	.word	0x20000020
 80011c4:	20000114 	.word	0x20000114

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000114 	.word	0x20000114

080011e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f7ff ffee 	bl	80011c8 <HAL_GetTick>
 80011ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f8:	d005      	beq.n	8001206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <HAL_Delay+0x44>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001206:	bf00      	nop
 8001208:	f7ff ffde 	bl	80011c8 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d8f7      	bhi.n	8001208 <HAL_Delay+0x28>
  {
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000020 	.word	0x20000020

08001228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <__NVIC_SetPriorityGrouping+0x40>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001244:	4013      	ands	r3, r2
 8001246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <__NVIC_SetPriorityGrouping+0x44>)
 8001252:	4313      	orrs	r3, r2
 8001254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001256:	4a04      	ldr	r2, [pc, #16]	@ (8001268 <__NVIC_SetPriorityGrouping+0x40>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	60d3      	str	r3, [r2, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00
 800126c:	05fa0000 	.word	0x05fa0000

08001270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001274:	4b04      	ldr	r3, [pc, #16]	@ (8001288 <__NVIC_GetPriorityGrouping+0x18>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	f003 0307 	and.w	r3, r3, #7
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0b      	blt.n	80012b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f003 021f 	and.w	r2, r3, #31
 80012a4:	4907      	ldr	r1, [pc, #28]	@ (80012c4 <__NVIC_EnableIRQ+0x38>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	2001      	movs	r0, #1
 80012ae:	fa00 f202 	lsl.w	r2, r0, r2
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000e100 	.word	0xe000e100

080012c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	db0a      	blt.n	80012f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	490c      	ldr	r1, [pc, #48]	@ (8001314 <__NVIC_SetPriority+0x4c>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	0112      	lsls	r2, r2, #4
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	440b      	add	r3, r1
 80012ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f0:	e00a      	b.n	8001308 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4908      	ldr	r1, [pc, #32]	@ (8001318 <__NVIC_SetPriority+0x50>)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	3b04      	subs	r3, #4
 8001300:	0112      	lsls	r2, r2, #4
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	440b      	add	r3, r1
 8001306:	761a      	strb	r2, [r3, #24]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000e100 	.word	0xe000e100
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	@ 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f1c3 0307 	rsb	r3, r3, #7
 8001336:	2b04      	cmp	r3, #4
 8001338:	bf28      	it	cs
 800133a:	2304      	movcs	r3, #4
 800133c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3304      	adds	r3, #4
 8001342:	2b06      	cmp	r3, #6
 8001344:	d902      	bls.n	800134c <NVIC_EncodePriority+0x30>
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3b03      	subs	r3, #3
 800134a:	e000      	b.n	800134e <NVIC_EncodePriority+0x32>
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	f04f 32ff 	mov.w	r2, #4294967295
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43da      	mvns	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	401a      	ands	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001364:	f04f 31ff 	mov.w	r1, #4294967295
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	43d9      	mvns	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	4313      	orrs	r3, r2
         );
}
 8001376:	4618      	mov	r0, r3
 8001378:	3724      	adds	r7, #36	@ 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001394:	d301      	bcc.n	800139a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001396:	2301      	movs	r3, #1
 8001398:	e00f      	b.n	80013ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139a:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <SysTick_Config+0x40>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a2:	210f      	movs	r1, #15
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	f7ff ff8e 	bl	80012c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ac:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <SysTick_Config+0x40>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b2:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <SysTick_Config+0x40>)
 80013b4:	2207      	movs	r2, #7
 80013b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	e000e010 	.word	0xe000e010

080013c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ff29 	bl	8001228 <__NVIC_SetPriorityGrouping>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f0:	f7ff ff3e 	bl	8001270 <__NVIC_GetPriorityGrouping>
 80013f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	6978      	ldr	r0, [r7, #20]
 80013fc:	f7ff ff8e 	bl	800131c <NVIC_EncodePriority>
 8001400:	4602      	mov	r2, r0
 8001402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff5d 	bl	80012c8 <__NVIC_SetPriority>
}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff31 	bl	800128c <__NVIC_EnableIRQ>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ffa2 	bl	8001384 <SysTick_Config>
 8001440:	4603      	mov	r3, r0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d004      	beq.n	8001468 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2280      	movs	r2, #128	@ 0x80
 8001462:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e00c      	b.n	8001482 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2205      	movs	r2, #5
 800146c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0201 	bic.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800149c:	b2db      	uxtb	r3, r3
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	@ 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	e175      	b.n	80017b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014cc:	2201      	movs	r2, #1
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f040 8164 	bne.w	80017b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d005      	beq.n	8001502 <HAL_GPIO_Init+0x56>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d130      	bne.n	8001564 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001538:	2201      	movs	r2, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f003 0201 	and.w	r2, r3, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b03      	cmp	r3, #3
 800156e:	d017      	beq.n	80015a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d123      	bne.n	80015f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	08da      	lsrs	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3208      	adds	r2, #8
 80015b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	220f      	movs	r2, #15
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	08da      	lsrs	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3208      	adds	r2, #8
 80015ee:	69b9      	ldr	r1, [r7, #24]
 80015f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0203 	and.w	r2, r3, #3
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 80be 	beq.w	80017b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	4b66      	ldr	r3, [pc, #408]	@ (80017d0 <HAL_GPIO_Init+0x324>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163a:	4a65      	ldr	r2, [pc, #404]	@ (80017d0 <HAL_GPIO_Init+0x324>)
 800163c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001640:	6453      	str	r3, [r2, #68]	@ 0x44
 8001642:	4b63      	ldr	r3, [pc, #396]	@ (80017d0 <HAL_GPIO_Init+0x324>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001646:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800164e:	4a61      	ldr	r2, [pc, #388]	@ (80017d4 <HAL_GPIO_Init+0x328>)
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	3302      	adds	r3, #2
 8001656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	220f      	movs	r2, #15
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a58      	ldr	r2, [pc, #352]	@ (80017d8 <HAL_GPIO_Init+0x32c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d037      	beq.n	80016ea <HAL_GPIO_Init+0x23e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a57      	ldr	r2, [pc, #348]	@ (80017dc <HAL_GPIO_Init+0x330>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d031      	beq.n	80016e6 <HAL_GPIO_Init+0x23a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a56      	ldr	r2, [pc, #344]	@ (80017e0 <HAL_GPIO_Init+0x334>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d02b      	beq.n	80016e2 <HAL_GPIO_Init+0x236>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a55      	ldr	r2, [pc, #340]	@ (80017e4 <HAL_GPIO_Init+0x338>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d025      	beq.n	80016de <HAL_GPIO_Init+0x232>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a54      	ldr	r2, [pc, #336]	@ (80017e8 <HAL_GPIO_Init+0x33c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d01f      	beq.n	80016da <HAL_GPIO_Init+0x22e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a53      	ldr	r2, [pc, #332]	@ (80017ec <HAL_GPIO_Init+0x340>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d019      	beq.n	80016d6 <HAL_GPIO_Init+0x22a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a52      	ldr	r2, [pc, #328]	@ (80017f0 <HAL_GPIO_Init+0x344>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d013      	beq.n	80016d2 <HAL_GPIO_Init+0x226>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a51      	ldr	r2, [pc, #324]	@ (80017f4 <HAL_GPIO_Init+0x348>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d00d      	beq.n	80016ce <HAL_GPIO_Init+0x222>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a50      	ldr	r2, [pc, #320]	@ (80017f8 <HAL_GPIO_Init+0x34c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d007      	beq.n	80016ca <HAL_GPIO_Init+0x21e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4f      	ldr	r2, [pc, #316]	@ (80017fc <HAL_GPIO_Init+0x350>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d101      	bne.n	80016c6 <HAL_GPIO_Init+0x21a>
 80016c2:	2309      	movs	r3, #9
 80016c4:	e012      	b.n	80016ec <HAL_GPIO_Init+0x240>
 80016c6:	230a      	movs	r3, #10
 80016c8:	e010      	b.n	80016ec <HAL_GPIO_Init+0x240>
 80016ca:	2308      	movs	r3, #8
 80016cc:	e00e      	b.n	80016ec <HAL_GPIO_Init+0x240>
 80016ce:	2307      	movs	r3, #7
 80016d0:	e00c      	b.n	80016ec <HAL_GPIO_Init+0x240>
 80016d2:	2306      	movs	r3, #6
 80016d4:	e00a      	b.n	80016ec <HAL_GPIO_Init+0x240>
 80016d6:	2305      	movs	r3, #5
 80016d8:	e008      	b.n	80016ec <HAL_GPIO_Init+0x240>
 80016da:	2304      	movs	r3, #4
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x240>
 80016de:	2303      	movs	r3, #3
 80016e0:	e004      	b.n	80016ec <HAL_GPIO_Init+0x240>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_Init+0x240>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_GPIO_Init+0x240>
 80016ea:	2300      	movs	r3, #0
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	f002 0203 	and.w	r2, r2, #3
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	4093      	lsls	r3, r2
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016fc:	4935      	ldr	r1, [pc, #212]	@ (80017d4 <HAL_GPIO_Init+0x328>)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800170a:	4b3d      	ldr	r3, [pc, #244]	@ (8001800 <HAL_GPIO_Init+0x354>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800172e:	4a34      	ldr	r2, [pc, #208]	@ (8001800 <HAL_GPIO_Init+0x354>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001734:	4b32      	ldr	r3, [pc, #200]	@ (8001800 <HAL_GPIO_Init+0x354>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001758:	4a29      	ldr	r2, [pc, #164]	@ (8001800 <HAL_GPIO_Init+0x354>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800175e:	4b28      	ldr	r3, [pc, #160]	@ (8001800 <HAL_GPIO_Init+0x354>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001782:	4a1f      	ldr	r2, [pc, #124]	@ (8001800 <HAL_GPIO_Init+0x354>)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001788:	4b1d      	ldr	r3, [pc, #116]	@ (8001800 <HAL_GPIO_Init+0x354>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017ac:	4a14      	ldr	r2, [pc, #80]	@ (8001800 <HAL_GPIO_Init+0x354>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3301      	adds	r3, #1
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	2b0f      	cmp	r3, #15
 80017bc:	f67f ae86 	bls.w	80014cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	3724      	adds	r7, #36	@ 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40013800 	.word	0x40013800
 80017d8:	40020000 	.word	0x40020000
 80017dc:	40020400 	.word	0x40020400
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020c00 	.word	0x40020c00
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40021400 	.word	0x40021400
 80017f0:	40021800 	.word	0x40021800
 80017f4:	40021c00 	.word	0x40021c00
 80017f8:	40022000 	.word	0x40022000
 80017fc:	40022400 	.word	0x40022400
 8001800:	40013c00 	.word	0x40013c00

08001804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e07f      	b.n	8001916 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d106      	bne.n	8001830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fb58 	bl	8000ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2224      	movs	r2, #36	@ 0x24
 8001834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0201 	bic.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001854:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001864:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d107      	bne.n	800187e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	e006      	b.n	800188c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800188a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d104      	bne.n	800189e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800189c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001920 <HAL_I2C_Init+0x11c>)
 80018aa:	430b      	orrs	r3, r1
 80018ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69d9      	ldr	r1, [r3, #28]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1a      	ldr	r2, [r3, #32]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2220      	movs	r2, #32
 8001902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	02008000 	.word	0x02008000

08001924 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af02      	add	r7, sp, #8
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	461a      	mov	r2, r3
 8001930:	460b      	mov	r3, r1
 8001932:	817b      	strh	r3, [r7, #10]
 8001934:	4613      	mov	r3, r2
 8001936:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b20      	cmp	r3, #32
 8001942:	f040 80da 	bne.w	8001afa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_I2C_Master_Transmit+0x30>
 8001950:	2302      	movs	r3, #2
 8001952:	e0d3      	b.n	8001afc <HAL_I2C_Master_Transmit+0x1d8>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800195c:	f7ff fc34 	bl	80011c8 <HAL_GetTick>
 8001960:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2319      	movs	r3, #25
 8001968:	2201      	movs	r2, #1
 800196a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f001 fa53 	bl	8002e1a <I2C_WaitOnFlagUntilTimeout>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e0be      	b.n	8001afc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2221      	movs	r2, #33	@ 0x21
 8001982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2210      	movs	r2, #16
 800198a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	893a      	ldrh	r2, [r7, #8]
 800199e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	2bff      	cmp	r3, #255	@ 0xff
 80019ae:	d90e      	bls.n	80019ce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	22ff      	movs	r2, #255	@ 0xff
 80019b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	8979      	ldrh	r1, [r7, #10]
 80019be:	4b51      	ldr	r3, [pc, #324]	@ (8001b04 <HAL_I2C_Master_Transmit+0x1e0>)
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f001 fbc4 	bl	8003154 <I2C_TransferConfig>
 80019cc:	e06c      	b.n	8001aa8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	8979      	ldrh	r1, [r7, #10]
 80019e0:	4b48      	ldr	r3, [pc, #288]	@ (8001b04 <HAL_I2C_Master_Transmit+0x1e0>)
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f001 fbb3 	bl	8003154 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80019ee:	e05b      	b.n	8001aa8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	6a39      	ldr	r1, [r7, #32]
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f001 fa50 	bl	8002e9a <I2C_WaitOnTXISFlagUntilTimeout>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e07b      	b.n	8001afc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a08:	781a      	ldrb	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	3b01      	subs	r3, #1
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d034      	beq.n	8001aa8 <HAL_I2C_Master_Transmit+0x184>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d130      	bne.n	8001aa8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2180      	movs	r1, #128	@ 0x80
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f001 f9e2 	bl	8002e1a <I2C_WaitOnFlagUntilTimeout>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e04d      	b.n	8001afc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	2bff      	cmp	r3, #255	@ 0xff
 8001a68:	d90e      	bls.n	8001a88 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	22ff      	movs	r2, #255	@ 0xff
 8001a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	8979      	ldrh	r1, [r7, #10]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f001 fb67 	bl	8003154 <I2C_TransferConfig>
 8001a86:	e00f      	b.n	8001aa8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	8979      	ldrh	r1, [r7, #10]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f001 fb56 	bl	8003154 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d19e      	bne.n	80019f0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	6a39      	ldr	r1, [r7, #32]
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f001 fa2f 	bl	8002f1a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e01a      	b.n	8001afc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2220      	movs	r2, #32
 8001acc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6859      	ldr	r1, [r3, #4]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <HAL_I2C_Master_Transmit+0x1e4>)
 8001ada:	400b      	ands	r3, r1
 8001adc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001afa:	2302      	movs	r3, #2
  }
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	80002000 	.word	0x80002000
 8001b08:	fe00e800 	.word	0xfe00e800

08001b0c <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	461a      	mov	r2, r3
 8001b18:	460b      	mov	r3, r1
 8001b1a:	817b      	strh	r3, [r7, #10]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b20      	cmp	r3, #32
 8001b2a:	d153      	bne.n	8001bd4 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b3a:	d101      	bne.n	8001b40 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e04a      	b.n	8001bd6 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_I2C_Master_Receive_IT+0x42>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e043      	b.n	8001bd6 <HAL_I2C_Master_Receive_IT+0xca>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2222      	movs	r2, #34	@ 0x22
 8001b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2210      	movs	r2, #16
 8001b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	893a      	ldrh	r2, [r7, #8]
 8001b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4a19      	ldr	r2, [pc, #100]	@ (8001be0 <HAL_I2C_Master_Receive_IT+0xd4>)
 8001b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4a18      	ldr	r2, [pc, #96]	@ (8001be4 <HAL_I2C_Master_Receive_IT+0xd8>)
 8001b82:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2bff      	cmp	r3, #255	@ 0xff
 8001b8c:	d906      	bls.n	8001b9c <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	22ff      	movs	r2, #255	@ 0xff
 8001b92:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001b94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e007      	b.n	8001bac <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001ba6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001baa:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	8979      	ldrh	r1, [r7, #10]
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <HAL_I2C_Master_Receive_IT+0xdc>)
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f001 faca 	bl	8003154 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001bc8:	2102      	movs	r1, #2
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f001 faf4 	bl	80031b8 <I2C_Enable_IRQ>

    return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e000      	b.n	8001bd6 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001bd4:	2302      	movs	r3, #2
  }
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	ffff0000 	.word	0xffff0000
 8001be4:	08001d7f 	.word	0x08001d7f
 8001be8:	80002400 	.word	0x80002400

08001bec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	68f9      	ldr	r1, [r7, #12]
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	4798      	blx	r3
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00f      	beq.n	8001c62 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00a      	beq.n	8001c62 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c50:	f043 0201 	orr.w	r2, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c60:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00f      	beq.n	8001c8c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00a      	beq.n	8001c8c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7a:	f043 0208 	orr.w	r2, r3, #8
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c8a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00f      	beq.n	8001cb6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00a      	beq.n	8001cb6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca4:	f043 0202 	orr.w	r2, r3, #2
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cb4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 030b 	and.w	r3, r3, #11
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001cc6:	68f9      	ldr	r1, [r7, #12]
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 ff6d 	bl	8002ba8 <I2C_ITError>
  }
}
 8001cce:	bf00      	nop
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	460b      	mov	r3, r1
 8001d08:	70fb      	strb	r3, [r7, #3]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b088      	sub	sp, #32
 8001d82:	af02      	add	r7, sp, #8
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <I2C_Master_ISR_IT+0x1e>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e108      	b.n	8001fae <I2C_Master_ISR_IT+0x230>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d012      	beq.n	8001dd4 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00d      	beq.n	8001dd4 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2210      	movs	r2, #16
 8001dbe:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc4:	f043 0204 	orr.w	r2, r3, #4
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 ffe2 	bl	8002d96 <I2C_Flush_TXDR>
 8001dd2:	e0d9      	b.n	8001f88 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d022      	beq.n	8001e24 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01d      	beq.n	8001e24 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f023 0304 	bic.w	r3, r3, #4
 8001dee:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e22:	e0b1      	b.n	8001f88 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d01d      	beq.n	8001e6a <I2C_Master_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d018      	beq.n	8001e6a <I2C_Master_ISR_IT+0xec>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e68:	e08e      	b.n	8001f88 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d05c      	beq.n	8001f2e <I2C_Master_ISR_IT+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d057      	beq.n	8001f2e <I2C_Master_ISR_IT+0x1b0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d040      	beq.n	8001f0a <I2C_Master_ISR_IT+0x18c>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d13c      	bne.n	8001f0a <I2C_Master_ISR_IT+0x18c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e9c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2bff      	cmp	r3, #255	@ 0xff
 8001ea6:	d90e      	bls.n	8001ec6 <I2C_Master_ISR_IT+0x148>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	22ff      	movs	r2, #255	@ 0xff
 8001eac:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	8a79      	ldrh	r1, [r7, #18]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f001 f948 	bl	8003154 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ec4:	e032      	b.n	8001f2c <I2C_Master_ISR_IT+0x1ae>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ed8:	d00b      	beq.n	8001ef2 <I2C_Master_ISR_IT+0x174>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ede:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001ee4:	8a79      	ldrh	r1, [r7, #18]
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	9000      	str	r0, [sp, #0]
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f001 f932 	bl	8003154 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ef0:	e01c      	b.n	8001f2c <I2C_Master_ISR_IT+0x1ae>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	8a79      	ldrh	r1, [r7, #18]
 8001efa:	2300      	movs	r3, #0
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f001 f926 	bl	8003154 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f08:	e010      	b.n	8001f2c <I2C_Master_ISR_IT+0x1ae>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f18:	d003      	beq.n	8001f22 <I2C_Master_ISR_IT+0x1a4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 fb88 	bl	8002630 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f20:	e032      	b.n	8001f88 <I2C_Master_ISR_IT+0x20a>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001f22:	2140      	movs	r1, #64	@ 0x40
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 fe3f 	bl	8002ba8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f2a:	e02d      	b.n	8001f88 <I2C_Master_ISR_IT+0x20a>
 8001f2c:	e02c      	b.n	8001f88 <I2C_Master_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d027      	beq.n	8001f88 <I2C_Master_ISR_IT+0x20a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d022      	beq.n	8001f88 <I2C_Master_ISR_IT+0x20a>
  {
    if (hi2c->XferCount == 0U)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d119      	bne.n	8001f80 <I2C_Master_ISR_IT+0x202>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f5a:	d015      	beq.n	8001f88 <I2C_Master_ISR_IT+0x20a>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f64:	d108      	bne.n	8001f78 <I2C_Master_ISR_IT+0x1fa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	e007      	b.n	8001f88 <I2C_Master_ISR_IT+0x20a>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 fb59 	bl	8002630 <I2C_ITMasterSeqCplt>
 8001f7e:	e003      	b.n	8001f88 <I2C_Master_ISR_IT+0x20a>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001f80:	2140      	movs	r1, #64	@ 0x40
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 fe10 	bl	8002ba8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f003 0320 	and.w	r3, r3, #32
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d008      	beq.n	8001fa4 <I2C_Master_ISR_IT+0x226>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <I2C_Master_ISR_IT+0x226>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001f9c:	6979      	ldr	r1, [r7, #20]
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 fbe0 	bl	8002764 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <I2C_Slave_ISR_IT+0x24>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e0e1      	b.n	800219e <I2C_Slave_ISR_IT+0x1e8>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001ff6:	6939      	ldr	r1, [r7, #16]
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f000 fc7b 	bl	80028f4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	d04b      	beq.n	80020a0 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800200e:	2b00      	cmp	r3, #0
 8002010:	d046      	beq.n	80020a0 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002016:	b29b      	uxth	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d128      	bne.n	800206e <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b28      	cmp	r3, #40	@ 0x28
 8002026:	d108      	bne.n	800203a <I2C_Slave_ISR_IT+0x84>
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800202e:	d104      	bne.n	800203a <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002030:	6939      	ldr	r1, [r7, #16]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 fd64 	bl	8002b00 <I2C_ITListenCplt>
 8002038:	e031      	b.n	800209e <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b29      	cmp	r3, #41	@ 0x29
 8002044:	d10e      	bne.n	8002064 <I2C_Slave_ISR_IT+0xae>
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800204c:	d00a      	beq.n	8002064 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2210      	movs	r2, #16
 8002054:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 fe9d 	bl	8002d96 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 fb24 	bl	80026aa <I2C_ITSlaveSeqCplt>
 8002062:	e01c      	b.n	800209e <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2210      	movs	r2, #16
 800206a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800206c:	e08f      	b.n	800218e <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2210      	movs	r2, #16
 8002074:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207a:	f043 0204 	orr.w	r2, r3, #4
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <I2C_Slave_ISR_IT+0xda>
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800208e:	d17e      	bne.n	800218e <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002094:	4619      	mov	r1, r3
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 fd86 	bl	8002ba8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800209c:	e077      	b.n	800218e <I2C_Slave_ISR_IT+0x1d8>
 800209e:	e076      	b.n	800218e <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d02f      	beq.n	800210a <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d02a      	beq.n	800210a <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d018      	beq.n	80020f0 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d14b      	bne.n	8002192 <I2C_Slave_ISR_IT+0x1dc>
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002100:	d047      	beq.n	8002192 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 fad1 	bl	80026aa <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002108:	e043      	b.n	8002192 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d009      	beq.n	8002128 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800211a:	2b00      	cmp	r3, #0
 800211c:	d004      	beq.n	8002128 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800211e:	6939      	ldr	r1, [r7, #16]
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 fa01 	bl	8002528 <I2C_ITAddrCplt>
 8002126:	e035      	b.n	8002194 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d030      	beq.n	8002194 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002138:	2b00      	cmp	r3, #0
 800213a:	d02b      	beq.n	8002194 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d018      	beq.n	8002178 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214a:	781a      	ldrb	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002160:	b29b      	uxth	r3, r3
 8002162:	3b01      	subs	r3, #1
 8002164:	b29a      	uxth	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002176:	e00d      	b.n	8002194 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800217e:	d002      	beq.n	8002186 <I2C_Slave_ISR_IT+0x1d0>
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 fa8f 	bl	80026aa <I2C_ITSlaveSeqCplt>
 800218c:	e002      	b.n	8002194 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800218e:	bf00      	nop
 8002190:	e000      	b.n	8002194 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8002192:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b088      	sub	sp, #32
 80021aa:	af02      	add	r7, sp, #8
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <I2C_Master_ISR_DMA+0x1a>
 80021bc:	2302      	movs	r3, #2
 80021be:	e0d9      	b.n	8002374 <I2C_Master_ISR_DMA+0x1ce>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d016      	beq.n	8002200 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d011      	beq.n	8002200 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2210      	movs	r2, #16
 80021e2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e8:	f043 0204 	orr.w	r2, r3, #4
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80021f0:	2120      	movs	r1, #32
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 ffe0 	bl	80031b8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 fdcc 	bl	8002d96 <I2C_Flush_TXDR>
 80021fe:	e0b4      	b.n	800236a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002206:	2b00      	cmp	r3, #0
 8002208:	d071      	beq.n	80022ee <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002210:	2b00      	cmp	r3, #0
 8002212:	d06c      	beq.n	80022ee <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002222:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002228:	b29b      	uxth	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d04e      	beq.n	80022cc <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	b29b      	uxth	r3, r3
 8002236:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800223a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002240:	b29b      	uxth	r3, r3
 8002242:	2bff      	cmp	r3, #255	@ 0xff
 8002244:	d906      	bls.n	8002254 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	22ff      	movs	r2, #255	@ 0xff
 800224a:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800224c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	e010      	b.n	8002276 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002262:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002266:	d003      	beq.n	8002270 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	e002      	b.n	8002276 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002270:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002274:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800227a:	b2da      	uxtb	r2, r3
 800227c:	8a79      	ldrh	r1, [r7, #18]
 800227e:	2300      	movs	r3, #0
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 ff65 	bl	8003154 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b22      	cmp	r3, #34	@ 0x22
 80022a6:	d108      	bne.n	80022ba <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022b6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80022b8:	e057      	b.n	800236a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022c8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80022ca:	e04e      	b.n	800236a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022da:	d003      	beq.n	80022e4 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 f9a7 	bl	8002630 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80022e2:	e042      	b.n	800236a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80022e4:	2140      	movs	r1, #64	@ 0x40
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 fc5e 	bl	8002ba8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80022ec:	e03d      	b.n	800236a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d028      	beq.n	800234a <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d023      	beq.n	800234a <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d119      	bne.n	8002340 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002316:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800231a:	d025      	beq.n	8002368 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002320:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002324:	d108      	bne.n	8002338 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002334:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002336:	e017      	b.n	8002368 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 f979 	bl	8002630 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800233e:	e013      	b.n	8002368 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002340:	2140      	movs	r1, #64	@ 0x40
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 fc30 	bl	8002ba8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002348:	e00e      	b.n	8002368 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f9ff 	bl	8002764 <I2C_ITMasterCplt>
 8002366:	e000      	b.n	800236a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002368:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <I2C_Slave_ISR_DMA+0x24>
 800239c:	2302      	movs	r3, #2
 800239e:	e0bf      	b.n	8002520 <I2C_Slave_ISR_DMA+0x1a4>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f003 0320 	and.w	r3, r3, #32
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d008      	beq.n	80023c4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 fa98 	bl	80028f4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 8095 	beq.w	80024fa <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 808f 	beq.w	80024fa <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d104      	bne.n	80023f0 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d07d      	beq.n	80024ec <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00c      	beq.n	8002412 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 800240e:	2301      	movs	r3, #1
 8002410:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00c      	beq.n	8002434 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8002430:	2301      	movs	r3, #1
 8002432:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d128      	bne.n	800248c <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b28      	cmp	r3, #40	@ 0x28
 8002444:	d108      	bne.n	8002458 <I2C_Slave_ISR_DMA+0xdc>
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800244c:	d104      	bne.n	8002458 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 fb55 	bl	8002b00 <I2C_ITListenCplt>
 8002456:	e048      	b.n	80024ea <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b29      	cmp	r3, #41	@ 0x29
 8002462:	d10e      	bne.n	8002482 <I2C_Slave_ISR_DMA+0x106>
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800246a:	d00a      	beq.n	8002482 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2210      	movs	r2, #16
 8002472:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fc8e 	bl	8002d96 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f915 	bl	80026aa <I2C_ITSlaveSeqCplt>
 8002480:	e033      	b.n	80024ea <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2210      	movs	r2, #16
 8002488:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800248a:	e034      	b.n	80024f6 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2210      	movs	r2, #16
 8002492:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002498:	f043 0204 	orr.w	r2, r3, #4
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a6:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <I2C_Slave_ISR_DMA+0x13a>
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024b4:	d11f      	bne.n	80024f6 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
 80024b8:	2b21      	cmp	r3, #33	@ 0x21
 80024ba:	d002      	beq.n	80024c2 <I2C_Slave_ISR_DMA+0x146>
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
 80024be:	2b29      	cmp	r3, #41	@ 0x29
 80024c0:	d103      	bne.n	80024ca <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2221      	movs	r2, #33	@ 0x21
 80024c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80024c8:	e008      	b.n	80024dc <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
 80024cc:	2b22      	cmp	r3, #34	@ 0x22
 80024ce:	d002      	beq.n	80024d6 <I2C_Slave_ISR_DMA+0x15a>
 80024d0:	7dfb      	ldrb	r3, [r7, #23]
 80024d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80024d4:	d102      	bne.n	80024dc <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2222      	movs	r2, #34	@ 0x22
 80024da:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e0:	4619      	mov	r1, r3
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 fb60 	bl	8002ba8 <I2C_ITError>
      if (treatdmanack == 1U)
 80024e8:	e005      	b.n	80024f6 <I2C_Slave_ISR_DMA+0x17a>
 80024ea:	e004      	b.n	80024f6 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2210      	movs	r2, #16
 80024f2:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80024f4:	e00f      	b.n	8002516 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 80024f6:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80024f8:	e00d      	b.n	8002516 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 f809 	bl	8002528 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3720      	adds	r7, #32
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002538:	b2db      	uxtb	r3, r3
 800253a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800253e:	2b28      	cmp	r3, #40	@ 0x28
 8002540:	d16a      	bne.n	8002618 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	b2db      	uxtb	r3, r3
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	0c1b      	lsrs	r3, r3, #16
 800255a:	b29b      	uxth	r3, r3
 800255c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002560:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	b29b      	uxth	r3, r3
 800256a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800256e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	b29b      	uxth	r3, r3
 8002578:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800257c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d138      	bne.n	80025f8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002586:	897b      	ldrh	r3, [r7, #10]
 8002588:	09db      	lsrs	r3, r3, #7
 800258a:	b29a      	uxth	r2, r3
 800258c:	89bb      	ldrh	r3, [r7, #12]
 800258e:	4053      	eors	r3, r2
 8002590:	b29b      	uxth	r3, r3
 8002592:	f003 0306 	and.w	r3, r3, #6
 8002596:	2b00      	cmp	r3, #0
 8002598:	d11c      	bne.n	80025d4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800259a:	897b      	ldrh	r3, [r7, #10]
 800259c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d13b      	bne.n	8002628 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2208      	movs	r2, #8
 80025bc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80025c6:	89ba      	ldrh	r2, [r7, #12]
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	4619      	mov	r1, r3
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff fb96 	bl	8001cfe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80025d2:	e029      	b.n	8002628 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80025d4:	893b      	ldrh	r3, [r7, #8]
 80025d6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80025d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 fe55 	bl	800328c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80025ea:	89ba      	ldrh	r2, [r7, #12]
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	4619      	mov	r1, r3
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff fb84 	bl	8001cfe <HAL_I2C_AddrCallback>
}
 80025f6:	e017      	b.n	8002628 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80025f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 fe45 	bl	800328c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800260a:	89ba      	ldrh	r2, [r7, #12]
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	4619      	mov	r1, r3
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff fb74 	bl	8001cfe <HAL_I2C_AddrCallback>
}
 8002616:	e007      	b.n	8002628 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2208      	movs	r2, #8
 800261e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002628:	bf00      	nop
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b21      	cmp	r3, #33	@ 0x21
 800264a:	d115      	bne.n	8002678 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2211      	movs	r2, #17
 8002658:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002660:	2101      	movs	r1, #1
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fe12 	bl	800328c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7fe fb93 	bl	8000d9c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002676:	e014      	b.n	80026a2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2212      	movs	r2, #18
 8002684:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800268c:	2102      	movs	r1, #2
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fdfc 	bl	800328c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7fe fb87 	bl	8000db0 <HAL_I2C_MasterRxCpltCallback>
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e00c      	b.n	80026f8 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d007      	beq.n	80026f8 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026f6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b29      	cmp	r3, #41	@ 0x29
 8002702:	d112      	bne.n	800272a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2228      	movs	r2, #40	@ 0x28
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2221      	movs	r2, #33	@ 0x21
 8002710:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002712:	2101      	movs	r1, #1
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 fdb9 	bl	800328c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff fad7 	bl	8001cd6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002728:	e017      	b.n	800275a <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b2a      	cmp	r3, #42	@ 0x2a
 8002734:	d111      	bne.n	800275a <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2228      	movs	r2, #40	@ 0x28
 800273a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2222      	movs	r2, #34	@ 0x22
 8002742:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002744:	2102      	movs	r1, #2
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fda0 	bl	800328c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff fac8 	bl	8001cea <HAL_I2C_SlaveRxCpltCallback>
}
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2220      	movs	r2, #32
 8002778:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b21      	cmp	r3, #33	@ 0x21
 8002784:	d107      	bne.n	8002796 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002786:	2101      	movs	r1, #1
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 fd7f 	bl	800328c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2211      	movs	r2, #17
 8002792:	631a      	str	r2, [r3, #48]	@ 0x30
 8002794:	e00c      	b.n	80027b0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b22      	cmp	r3, #34	@ 0x22
 80027a0:	d106      	bne.n	80027b0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80027a2:	2102      	movs	r1, #2
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fd71 	bl	800328c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2212      	movs	r2, #18
 80027ae:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6859      	ldr	r1, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4b4c      	ldr	r3, [pc, #304]	@ (80028ec <I2C_ITMasterCplt+0x188>)
 80027bc:	400b      	ands	r3, r1
 80027be:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a49      	ldr	r2, [pc, #292]	@ (80028f0 <I2C_ITMasterCplt+0x18c>)
 80027ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2210      	movs	r2, #16
 80027dc:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	f043 0204 	orr.w	r2, r3, #4
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b60      	cmp	r3, #96	@ 0x60
 80027f4:	d10a      	bne.n	800280c <I2C_ITMasterCplt+0xa8>
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	b2db      	uxtb	r3, r3
 8002808:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800280a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fac2 	bl	8002d96 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002816:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b60      	cmp	r3, #96	@ 0x60
 8002822:	d002      	beq.n	800282a <I2C_ITMasterCplt+0xc6>
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d006      	beq.n	8002838 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282e:	4619      	mov	r1, r3
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f9b9 	bl	8002ba8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002836:	e054      	b.n	80028e2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b21      	cmp	r3, #33	@ 0x21
 8002842:	d124      	bne.n	800288e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b40      	cmp	r3, #64	@ 0x40
 800285c:	d10b      	bne.n	8002876 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff fa5d 	bl	8001d2e <HAL_I2C_MemTxCpltCallback>
}
 8002874:	e035      	b.n	80028e2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe fa88 	bl	8000d9c <HAL_I2C_MasterTxCpltCallback>
}
 800288c:	e029      	b.n	80028e2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b22      	cmp	r3, #34	@ 0x22
 8002898:	d123      	bne.n	80028e2 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2220      	movs	r2, #32
 800289e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b40      	cmp	r3, #64	@ 0x40
 80028b2:	d10b      	bne.n	80028cc <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff fa3c 	bl	8001d42 <HAL_I2C_MemRxCpltCallback>
}
 80028ca:	e00a      	b.n	80028e2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7fe fa67 	bl	8000db0 <HAL_I2C_MasterRxCpltCallback>
}
 80028e2:	bf00      	nop
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	fe00e800 	.word	0xfe00e800
 80028f0:	ffff0000 	.word	0xffff0000

080028f4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002910:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2220      	movs	r2, #32
 8002918:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	2b21      	cmp	r3, #33	@ 0x21
 800291e:	d002      	beq.n	8002926 <I2C_ITSlaveCplt+0x32>
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2b29      	cmp	r3, #41	@ 0x29
 8002924:	d108      	bne.n	8002938 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002926:	f248 0101 	movw	r1, #32769	@ 0x8001
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fcae 	bl	800328c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2221      	movs	r2, #33	@ 0x21
 8002934:	631a      	str	r2, [r3, #48]	@ 0x30
 8002936:	e00d      	b.n	8002954 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	2b22      	cmp	r3, #34	@ 0x22
 800293c:	d002      	beq.n	8002944 <I2C_ITSlaveCplt+0x50>
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	2b2a      	cmp	r3, #42	@ 0x2a
 8002942:	d107      	bne.n	8002954 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002944:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 fc9f 	bl	800328c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2222      	movs	r2, #34	@ 0x22
 8002952:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002962:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6859      	ldr	r1, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4b62      	ldr	r3, [pc, #392]	@ (8002af8 <I2C_ITSlaveCplt+0x204>)
 8002970:	400b      	ands	r3, r1
 8002972:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fa0e 	bl	8002d96 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d013      	beq.n	80029ac <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002992:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01f      	beq.n	80029dc <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029aa:	e017      	b.n	80029dc <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d012      	beq.n	80029dc <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029c4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d006      	beq.n	80029dc <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d020      	beq.n	8002a28 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f023 0304 	bic.w	r3, r3, #4
 80029ec:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00c      	beq.n	8002a28 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a36:	f043 0204 	orr.w	r2, r3, #4
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d010      	beq.n	8002a76 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a58:	4619      	mov	r1, r3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f8a4 	bl	8002ba8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b28      	cmp	r3, #40	@ 0x28
 8002a6a:	d141      	bne.n	8002af0 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002a6c:	6979      	ldr	r1, [r7, #20]
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f846 	bl	8002b00 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a74:	e03c      	b.n	8002af0 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a7e:	d014      	beq.n	8002aaa <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff fe12 	bl	80026aa <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a1c      	ldr	r2, [pc, #112]	@ (8002afc <I2C_ITSlaveCplt+0x208>)
 8002a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff f939 	bl	8001d1a <HAL_I2C_ListenCpltCallback>
}
 8002aa8:	e022      	b.n	8002af0 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b22      	cmp	r3, #34	@ 0x22
 8002ab4:	d10e      	bne.n	8002ad4 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff f90c 	bl	8001cea <HAL_I2C_SlaveRxCpltCallback>
}
 8002ad2:	e00d      	b.n	8002af0 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff f8f3 	bl	8001cd6 <HAL_I2C_SlaveTxCpltCallback>
}
 8002af0:	bf00      	nop
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	fe00e800 	.word	0xfe00e800
 8002afc:	ffff0000 	.word	0xffff0000

08002b00 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a25      	ldr	r2, [pc, #148]	@ (8002ba4 <I2C_ITListenCplt+0xa4>)
 8002b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d022      	beq.n	8002b7c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d012      	beq.n	8002b7c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b74:	f043 0204 	orr.w	r2, r3, #4
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b7c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fb83 	bl	800328c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2210      	movs	r2, #16
 8002b8c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff f8bf 	bl	8001d1a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	ffff0000 	.word	0xffff0000

08002ba8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a5d      	ldr	r2, [pc, #372]	@ (8002d3c <I2C_ITError+0x194>)
 8002bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2b28      	cmp	r3, #40	@ 0x28
 8002bde:	d005      	beq.n	8002bec <I2C_ITError+0x44>
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	2b29      	cmp	r3, #41	@ 0x29
 8002be4:	d002      	beq.n	8002bec <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bea:	d10b      	bne.n	8002c04 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002bec:	2103      	movs	r1, #3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fb4c 	bl	800328c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2228      	movs	r2, #40	@ 0x28
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a50      	ldr	r2, [pc, #320]	@ (8002d40 <I2C_ITError+0x198>)
 8002c00:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c02:	e011      	b.n	8002c28 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c04:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fb3f 	bl	800328c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b60      	cmp	r3, #96	@ 0x60
 8002c18:	d003      	beq.n	8002c22 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }
    hi2c->XferISR       = NULL;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d039      	beq.n	8002caa <I2C_ITError+0x102>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b11      	cmp	r3, #17
 8002c3a:	d002      	beq.n	8002c42 <I2C_ITError+0x9a>
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b21      	cmp	r3, #33	@ 0x21
 8002c40:	d133      	bne.n	8002caa <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c50:	d107      	bne.n	8002c62 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c60:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fc11 	bl	800148e <HAL_DMA_GetState>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d017      	beq.n	8002ca2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c76:	4a33      	ldr	r2, [pc, #204]	@ (8002d44 <I2C_ITError+0x19c>)
 8002c78:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe fbdf 	bl	800144a <HAL_DMA_Abort_IT>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d04d      	beq.n	8002d2e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ca0:	e045      	b.n	8002d2e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f850 	bl	8002d48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ca8:	e041      	b.n	8002d2e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d039      	beq.n	8002d26 <I2C_ITError+0x17e>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b12      	cmp	r3, #18
 8002cb6:	d002      	beq.n	8002cbe <I2C_ITError+0x116>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b22      	cmp	r3, #34	@ 0x22
 8002cbc:	d133      	bne.n	8002d26 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ccc:	d107      	bne.n	8002cde <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cdc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe fbd3 	bl	800148e <HAL_DMA_GetState>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d017      	beq.n	8002d1e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf2:	4a14      	ldr	r2, [pc, #80]	@ (8002d44 <I2C_ITError+0x19c>)
 8002cf4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe fba1 	bl	800144a <HAL_DMA_Abort_IT>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d011      	beq.n	8002d32 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d1c:	e009      	b.n	8002d32 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f812 	bl	8002d48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d24:	e005      	b.n	8002d32 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f80e 	bl	8002d48 <I2C_TreatErrorCallback>
  }
}
 8002d2c:	e002      	b.n	8002d34 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d2e:	bf00      	nop
 8002d30:	e000      	b.n	8002d34 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d32:	bf00      	nop
}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	ffff0000 	.word	0xffff0000
 8002d40:	08001fb7 	.word	0x08001fb7
 8002d44:	08002ddf 	.word	0x08002ddf

08002d48 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b60      	cmp	r3, #96	@ 0x60
 8002d5a:	d10e      	bne.n	8002d7a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fe fff9 	bl	8001d6a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d78:	e009      	b.n	8002d8e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7fe ffe4 	bl	8001d56 <HAL_I2C_ErrorCallback>
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d103      	bne.n	8002db4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2200      	movs	r2, #0
 8002db2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d007      	beq.n	8002dd2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	619a      	str	r2, [r3, #24]
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df8:	2200      	movs	r2, #0
 8002dfa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e08:	2200      	movs	r2, #0
 8002e0a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff ff9b 	bl	8002d48 <I2C_TreatErrorCallback>
}
 8002e12:	bf00      	nop
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	603b      	str	r3, [r7, #0]
 8002e26:	4613      	mov	r3, r2
 8002e28:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e2a:	e022      	b.n	8002e72 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e32:	d01e      	beq.n	8002e72 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e34:	f7fe f9c8 	bl	80011c8 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d302      	bcc.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d113      	bne.n	8002e72 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4e:	f043 0220 	orr.w	r2, r3, #32
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e00f      	b.n	8002e92 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699a      	ldr	r2, [r3, #24]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	bf0c      	ite	eq
 8002e82:	2301      	moveq	r3, #1
 8002e84:	2300      	movne	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d0cd      	beq.n	8002e2c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ea6:	e02c      	b.n	8002f02 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f871 	bl	8002f94 <I2C_IsErrorOccurred>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e02a      	b.n	8002f12 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec2:	d01e      	beq.n	8002f02 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec4:	f7fe f980 	bl	80011c8 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d302      	bcc.n	8002eda <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d113      	bne.n	8002f02 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ede:	f043 0220 	orr.w	r2, r3, #32
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e007      	b.n	8002f12 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d1cb      	bne.n	8002ea8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f26:	e028      	b.n	8002f7a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	68b9      	ldr	r1, [r7, #8]
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f831 	bl	8002f94 <I2C_IsErrorOccurred>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e026      	b.n	8002f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3c:	f7fe f944 	bl	80011c8 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d302      	bcc.n	8002f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d113      	bne.n	8002f7a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f56:	f043 0220 	orr.w	r2, r3, #32
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e007      	b.n	8002f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d1cf      	bne.n	8002f28 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08a      	sub	sp, #40	@ 0x28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d068      	beq.n	8003092 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2210      	movs	r2, #16
 8002fc6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fc8:	e049      	b.n	800305e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d045      	beq.n	800305e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fd2:	f7fe f8f9 	bl	80011c8 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d302      	bcc.n	8002fe8 <I2C_IsErrorOccurred+0x54>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d13a      	bne.n	800305e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ff2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ffa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003006:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800300a:	d121      	bne.n	8003050 <I2C_IsErrorOccurred+0xbc>
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003012:	d01d      	beq.n	8003050 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003014:	7cfb      	ldrb	r3, [r7, #19]
 8003016:	2b20      	cmp	r3, #32
 8003018:	d01a      	beq.n	8003050 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003028:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800302a:	f7fe f8cd 	bl	80011c8 <HAL_GetTick>
 800302e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003030:	e00e      	b.n	8003050 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003032:	f7fe f8c9 	bl	80011c8 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b19      	cmp	r3, #25
 800303e:	d907      	bls.n	8003050 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	f043 0320 	orr.w	r3, r3, #32
 8003046:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800304e:	e006      	b.n	800305e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b20      	cmp	r3, #32
 800305c:	d1e9      	bne.n	8003032 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b20      	cmp	r3, #32
 800306a:	d003      	beq.n	8003074 <I2C_IsErrorOccurred+0xe0>
 800306c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0aa      	beq.n	8002fca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003074:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003078:	2b00      	cmp	r3, #0
 800307a:	d103      	bne.n	8003084 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2220      	movs	r2, #32
 8003082:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00b      	beq.n	80030bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	f043 0308 	orr.w	r3, r3, #8
 80030cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00b      	beq.n	8003100 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	f043 0302 	orr.w	r3, r3, #2
 80030ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003100:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01c      	beq.n	8003142 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f7ff fe44 	bl	8002d96 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4b0d      	ldr	r3, [pc, #52]	@ (8003150 <I2C_IsErrorOccurred+0x1bc>)
 800311a:	400b      	ands	r3, r1
 800311c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	431a      	orrs	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003142:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003146:	4618      	mov	r0, r3
 8003148:	3728      	adds	r7, #40	@ 0x28
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	fe00e800 	.word	0xfe00e800

08003154 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	817b      	strh	r3, [r7, #10]
 8003162:	4613      	mov	r3, r2
 8003164:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003166:	897b      	ldrh	r3, [r7, #10]
 8003168:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800316c:	7a7b      	ldrb	r3, [r7, #9]
 800316e:	041b      	lsls	r3, r3, #16
 8003170:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003174:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	4313      	orrs	r3, r2
 800317e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003182:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	0d5b      	lsrs	r3, r3, #21
 800318e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003192:	4b08      	ldr	r3, [pc, #32]	@ (80031b4 <I2C_TransferConfig+0x60>)
 8003194:	430b      	orrs	r3, r1
 8003196:	43db      	mvns	r3, r3
 8003198:	ea02 0103 	and.w	r1, r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	03ff63ff 	.word	0x03ff63ff

080031b8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031cc:	4a2d      	ldr	r2, [pc, #180]	@ (8003284 <I2C_Enable_IRQ+0xcc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d004      	beq.n	80031dc <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80031d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003288 <I2C_Enable_IRQ+0xd0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d11d      	bne.n	8003218 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80031dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	da03      	bge.n	80031ec <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80031ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80031ec:	887b      	ldrh	r3, [r7, #2]
 80031ee:	2b10      	cmp	r3, #16
 80031f0:	d103      	bne.n	80031fa <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80031f8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80031fa:	887b      	ldrh	r3, [r7, #2]
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	d103      	bne.n	8003208 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003206:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003208:	887b      	ldrh	r3, [r7, #2]
 800320a:	2b40      	cmp	r3, #64	@ 0x40
 800320c:	d12c      	bne.n	8003268 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003214:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003216:	e027      	b.n	8003268 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003218:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800321c:	2b00      	cmp	r3, #0
 800321e:	da03      	bge.n	8003228 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003226:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003228:	887b      	ldrh	r3, [r7, #2]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003238:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800323a:	887b      	ldrh	r3, [r7, #2]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800324a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800324c:	887b      	ldrh	r3, [r7, #2]
 800324e:	2b10      	cmp	r3, #16
 8003250:	d103      	bne.n	800325a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003258:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800325a:	887b      	ldrh	r3, [r7, #2]
 800325c:	2b20      	cmp	r3, #32
 800325e:	d103      	bne.n	8003268 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f043 0320 	orr.w	r3, r3, #32
 8003266:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6819      	ldr	r1, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	430a      	orrs	r2, r1
 8003276:	601a      	str	r2, [r3, #0]
}
 8003278:	bf00      	nop
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	080021a7 	.word	0x080021a7
 8003288:	0800237d 	.word	0x0800237d

0800328c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800329c:	887b      	ldrh	r3, [r7, #2]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00f      	beq.n	80032c6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80032ac:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032ba:	2b28      	cmp	r3, #40	@ 0x28
 80032bc:	d003      	beq.n	80032c6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80032c4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80032c6:	887b      	ldrh	r3, [r7, #2]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00f      	beq.n	80032f0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80032d6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032e4:	2b28      	cmp	r3, #40	@ 0x28
 80032e6:	d003      	beq.n	80032f0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80032ee:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80032f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	da03      	bge.n	8003300 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80032fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003300:	887b      	ldrh	r3, [r7, #2]
 8003302:	2b10      	cmp	r3, #16
 8003304:	d103      	bne.n	800330e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800330c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800330e:	887b      	ldrh	r3, [r7, #2]
 8003310:	2b20      	cmp	r3, #32
 8003312:	d103      	bne.n	800331c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f043 0320 	orr.w	r3, r3, #32
 800331a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800331c:	887b      	ldrh	r3, [r7, #2]
 800331e:	2b40      	cmp	r3, #64	@ 0x40
 8003320:	d103      	bne.n	800332a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003328:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6819      	ldr	r1, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	43da      	mvns	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	400a      	ands	r2, r1
 800333a:	601a      	str	r2, [r3, #0]
}
 800333c:	bf00      	nop
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b20      	cmp	r3, #32
 800335c:	d138      	bne.n	80033d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003368:	2302      	movs	r3, #2
 800336a:	e032      	b.n	80033d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2224      	movs	r2, #36	@ 0x24
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0201 	bic.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800339a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6819      	ldr	r1, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
  }
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033de:	b480      	push	{r7}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d139      	bne.n	8003468 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033fe:	2302      	movs	r3, #2
 8003400:	e033      	b.n	800346a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2224      	movs	r2, #36	@ 0x24
 800340e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0201 	bic.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003430:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	e000      	b.n	800346a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003468:	2302      	movs	r3, #2
  }
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003480:	2300      	movs	r3, #0
 8003482:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e29b      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 8087 	beq.w	80035aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800349c:	4b96      	ldr	r3, [pc, #600]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 030c 	and.w	r3, r3, #12
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d00c      	beq.n	80034c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034a8:	4b93      	ldr	r3, [pc, #588]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 030c 	and.w	r3, r3, #12
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d112      	bne.n	80034da <HAL_RCC_OscConfig+0x62>
 80034b4:	4b90      	ldr	r3, [pc, #576]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034c0:	d10b      	bne.n	80034da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c2:	4b8d      	ldr	r3, [pc, #564]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d06c      	beq.n	80035a8 <HAL_RCC_OscConfig+0x130>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d168      	bne.n	80035a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e275      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034e2:	d106      	bne.n	80034f2 <HAL_RCC_OscConfig+0x7a>
 80034e4:	4b84      	ldr	r3, [pc, #528]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a83      	ldr	r2, [pc, #524]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80034ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	e02e      	b.n	8003550 <HAL_RCC_OscConfig+0xd8>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0x9c>
 80034fa:	4b7f      	ldr	r3, [pc, #508]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a7e      	ldr	r2, [pc, #504]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003500:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	4b7c      	ldr	r3, [pc, #496]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a7b      	ldr	r2, [pc, #492]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 800350c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e01d      	b.n	8003550 <HAL_RCC_OscConfig+0xd8>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800351c:	d10c      	bne.n	8003538 <HAL_RCC_OscConfig+0xc0>
 800351e:	4b76      	ldr	r3, [pc, #472]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a75      	ldr	r2, [pc, #468]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	4b73      	ldr	r3, [pc, #460]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a72      	ldr	r2, [pc, #456]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e00b      	b.n	8003550 <HAL_RCC_OscConfig+0xd8>
 8003538:	4b6f      	ldr	r3, [pc, #444]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a6e      	ldr	r2, [pc, #440]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 800353e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	4b6c      	ldr	r3, [pc, #432]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a6b      	ldr	r2, [pc, #428]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 800354a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800354e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d013      	beq.n	8003580 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7fd fe36 	bl	80011c8 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003560:	f7fd fe32 	bl	80011c8 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	@ 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e229      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003572:	4b61      	ldr	r3, [pc, #388]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0xe8>
 800357e:	e014      	b.n	80035aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fd fe22 	bl	80011c8 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003588:	f7fd fe1e 	bl	80011c8 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	@ 0x64
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e215      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359a:	4b57      	ldr	r3, [pc, #348]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x110>
 80035a6:	e000      	b.n	80035aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d069      	beq.n	800368a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035b6:	4b50      	ldr	r3, [pc, #320]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035c2:	4b4d      	ldr	r3, [pc, #308]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 030c 	and.w	r3, r3, #12
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d11c      	bne.n	8003608 <HAL_RCC_OscConfig+0x190>
 80035ce:	4b4a      	ldr	r3, [pc, #296]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d116      	bne.n	8003608 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035da:	4b47      	ldr	r3, [pc, #284]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_RCC_OscConfig+0x17a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d001      	beq.n	80035f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e1e9      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f2:	4b41      	ldr	r3, [pc, #260]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	493d      	ldr	r1, [pc, #244]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003602:	4313      	orrs	r3, r2
 8003604:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003606:	e040      	b.n	800368a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d023      	beq.n	8003658 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003610:	4b39      	ldr	r3, [pc, #228]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a38      	ldr	r2, [pc, #224]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fd fdd4 	bl	80011c8 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003624:	f7fd fdd0 	bl	80011c8 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e1c7      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003636:	4b30      	ldr	r3, [pc, #192]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003642:	4b2d      	ldr	r3, [pc, #180]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4929      	ldr	r1, [pc, #164]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]
 8003656:	e018      	b.n	800368a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003658:	4b27      	ldr	r3, [pc, #156]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a26      	ldr	r2, [pc, #152]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fd fdb0 	bl	80011c8 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366c:	f7fd fdac 	bl	80011c8 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e1a3      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367e:	4b1e      	ldr	r3, [pc, #120]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d038      	beq.n	8003708 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d019      	beq.n	80036d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800369e:	4b16      	ldr	r3, [pc, #88]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80036a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a2:	4a15      	ldr	r2, [pc, #84]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036aa:	f7fd fd8d 	bl	80011c8 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b2:	f7fd fd89 	bl	80011c8 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e180      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c4:	4b0c      	ldr	r3, [pc, #48]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80036c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x23a>
 80036d0:	e01a      	b.n	8003708 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d2:	4b09      	ldr	r3, [pc, #36]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80036d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d6:	4a08      	ldr	r2, [pc, #32]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80036d8:	f023 0301 	bic.w	r3, r3, #1
 80036dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036de:	f7fd fd73 	bl	80011c8 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e4:	e00a      	b.n	80036fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e6:	f7fd fd6f 	bl	80011c8 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d903      	bls.n	80036fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e166      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
 80036f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036fc:	4b92      	ldr	r3, [pc, #584]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80036fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1ee      	bne.n	80036e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80a4 	beq.w	800385e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003716:	4b8c      	ldr	r3, [pc, #560]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10d      	bne.n	800373e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003722:	4b89      	ldr	r3, [pc, #548]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	4a88      	ldr	r2, [pc, #544]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800372c:	6413      	str	r3, [r2, #64]	@ 0x40
 800372e:	4b86      	ldr	r3, [pc, #536]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800373e:	4b83      	ldr	r3, [pc, #524]	@ (800394c <HAL_RCC_OscConfig+0x4d4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d118      	bne.n	800377c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800374a:	4b80      	ldr	r3, [pc, #512]	@ (800394c <HAL_RCC_OscConfig+0x4d4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a7f      	ldr	r2, [pc, #508]	@ (800394c <HAL_RCC_OscConfig+0x4d4>)
 8003750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003756:	f7fd fd37 	bl	80011c8 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375e:	f7fd fd33 	bl	80011c8 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b64      	cmp	r3, #100	@ 0x64
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e12a      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003770:	4b76      	ldr	r3, [pc, #472]	@ (800394c <HAL_RCC_OscConfig+0x4d4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d106      	bne.n	8003792 <HAL_RCC_OscConfig+0x31a>
 8003784:	4b70      	ldr	r3, [pc, #448]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003788:	4a6f      	ldr	r2, [pc, #444]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003790:	e02d      	b.n	80037ee <HAL_RCC_OscConfig+0x376>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10c      	bne.n	80037b4 <HAL_RCC_OscConfig+0x33c>
 800379a:	4b6b      	ldr	r3, [pc, #428]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379e:	4a6a      	ldr	r2, [pc, #424]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037a0:	f023 0301 	bic.w	r3, r3, #1
 80037a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a6:	4b68      	ldr	r3, [pc, #416]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037aa:	4a67      	ldr	r2, [pc, #412]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037ac:	f023 0304 	bic.w	r3, r3, #4
 80037b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b2:	e01c      	b.n	80037ee <HAL_RCC_OscConfig+0x376>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b05      	cmp	r3, #5
 80037ba:	d10c      	bne.n	80037d6 <HAL_RCC_OscConfig+0x35e>
 80037bc:	4b62      	ldr	r3, [pc, #392]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c0:	4a61      	ldr	r2, [pc, #388]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037c2:	f043 0304 	orr.w	r3, r3, #4
 80037c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037c8:	4b5f      	ldr	r3, [pc, #380]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037cc:	4a5e      	ldr	r2, [pc, #376]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d4:	e00b      	b.n	80037ee <HAL_RCC_OscConfig+0x376>
 80037d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037da:	4a5b      	ldr	r2, [pc, #364]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e2:	4b59      	ldr	r3, [pc, #356]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e6:	4a58      	ldr	r2, [pc, #352]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037e8:	f023 0304 	bic.w	r3, r3, #4
 80037ec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d015      	beq.n	8003822 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7fd fce7 	bl	80011c8 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7fd fce3 	bl	80011c8 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e0d8      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003814:	4b4c      	ldr	r3, [pc, #304]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0ee      	beq.n	80037fe <HAL_RCC_OscConfig+0x386>
 8003820:	e014      	b.n	800384c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003822:	f7fd fcd1 	bl	80011c8 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003828:	e00a      	b.n	8003840 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fd fccd 	bl	80011c8 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e0c2      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003840:	4b41      	ldr	r3, [pc, #260]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1ee      	bne.n	800382a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d105      	bne.n	800385e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003852:	4b3d      	ldr	r3, [pc, #244]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003856:	4a3c      	ldr	r2, [pc, #240]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003858:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800385c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80ae 	beq.w	80039c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003868:	4b37      	ldr	r3, [pc, #220]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b08      	cmp	r3, #8
 8003872:	d06d      	beq.n	8003950 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d14b      	bne.n	8003914 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387c:	4b32      	ldr	r3, [pc, #200]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a31      	ldr	r2, [pc, #196]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003882:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003888:	f7fd fc9e 	bl	80011c8 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003890:	f7fd fc9a 	bl	80011c8 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e091      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a2:	4b29      	ldr	r3, [pc, #164]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038bc:	019b      	lsls	r3, r3, #6
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c4:	085b      	lsrs	r3, r3, #1
 80038c6:	3b01      	subs	r3, #1
 80038c8:	041b      	lsls	r3, r3, #16
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d0:	061b      	lsls	r3, r3, #24
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d8:	071b      	lsls	r3, r3, #28
 80038da:	491b      	ldr	r1, [pc, #108]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e0:	4b19      	ldr	r3, [pc, #100]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a18      	ldr	r2, [pc, #96]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80038e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fd fc6c 	bl	80011c8 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f4:	f7fd fc68 	bl	80011c8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e05f      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003906:	4b10      	ldr	r3, [pc, #64]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x47c>
 8003912:	e057      	b.n	80039c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003914:	4b0c      	ldr	r3, [pc, #48]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a0b      	ldr	r2, [pc, #44]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 800391a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800391e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fd fc52 	bl	80011c8 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003928:	f7fd fc4e 	bl	80011c8 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e045      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	4b03      	ldr	r3, [pc, #12]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x4b0>
 8003946:	e03d      	b.n	80039c4 <HAL_RCC_OscConfig+0x54c>
 8003948:	40023800 	.word	0x40023800
 800394c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003950:	4b1f      	ldr	r3, [pc, #124]	@ (80039d0 <HAL_RCC_OscConfig+0x558>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d030      	beq.n	80039c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003968:	429a      	cmp	r2, r3
 800396a:	d129      	bne.n	80039c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d122      	bne.n	80039c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003980:	4013      	ands	r3, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003986:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003988:	4293      	cmp	r3, r2
 800398a:	d119      	bne.n	80039c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003996:	085b      	lsrs	r3, r3, #1
 8003998:	3b01      	subs	r3, #1
 800399a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800399c:	429a      	cmp	r2, r3
 800399e:	d10f      	bne.n	80039c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d107      	bne.n	80039c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40023800 	.word	0x40023800

080039d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0d0      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d910      	bls.n	8003a1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fa:	4b67      	ldr	r3, [pc, #412]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 020f 	bic.w	r2, r3, #15
 8003a02:	4965      	ldr	r1, [pc, #404]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b63      	ldr	r3, [pc, #396]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0b8      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d020      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a34:	4b59      	ldr	r3, [pc, #356]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a58      	ldr	r2, [pc, #352]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a4c:	4b53      	ldr	r3, [pc, #332]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4a52      	ldr	r2, [pc, #328]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a58:	4b50      	ldr	r3, [pc, #320]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	494d      	ldr	r1, [pc, #308]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d040      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	4b47      	ldr	r3, [pc, #284]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d115      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e07f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d107      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a96:	4b41      	ldr	r3, [pc, #260]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e073      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e06b      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ab6:	4b39      	ldr	r3, [pc, #228]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f023 0203 	bic.w	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4936      	ldr	r1, [pc, #216]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac8:	f7fd fb7e 	bl	80011c8 <HAL_GetTick>
 8003acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad0:	f7fd fb7a 	bl	80011c8 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e053      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 020c 	and.w	r2, r3, #12
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d1eb      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003af8:	4b27      	ldr	r3, [pc, #156]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d210      	bcs.n	8003b28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b06:	4b24      	ldr	r3, [pc, #144]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 020f 	bic.w	r2, r3, #15
 8003b0e:	4922      	ldr	r1, [pc, #136]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b16:	4b20      	ldr	r3, [pc, #128]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e032      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b34:	4b19      	ldr	r3, [pc, #100]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4916      	ldr	r1, [pc, #88]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b52:	4b12      	ldr	r3, [pc, #72]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	490e      	ldr	r1, [pc, #56]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b66:	f000 f821 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	490a      	ldr	r1, [pc, #40]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1cc>)
 8003b78:	5ccb      	ldrb	r3, [r1, r3]
 8003b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7e:	4a09      	ldr	r2, [pc, #36]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1d0>)
 8003b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b82:	4b09      	ldr	r3, [pc, #36]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1d4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fd fada 	bl	8001140 <HAL_InitTick>

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40023c00 	.word	0x40023c00
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	08004f34 	.word	0x08004f34
 8003ba4:	20000018 	.word	0x20000018
 8003ba8:	2000001c 	.word	0x2000001c

08003bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb0:	b090      	sub	sp, #64	@ 0x40
 8003bb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bb8:	2300      	movs	r3, #0
 8003bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc4:	4b59      	ldr	r3, [pc, #356]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d00d      	beq.n	8003bec <HAL_RCC_GetSysClockFreq+0x40>
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	f200 80a1 	bhi.w	8003d18 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d003      	beq.n	8003be6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bde:	e09b      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be0:	4b53      	ldr	r3, [pc, #332]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x184>)
 8003be2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003be4:	e09b      	b.n	8003d1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003be6:	4b53      	ldr	r3, [pc, #332]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003be8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bea:	e098      	b.n	8003d1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bec:	4b4f      	ldr	r3, [pc, #316]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bf4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003bf6:	4b4d      	ldr	r3, [pc, #308]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d028      	beq.n	8003c54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c02:	4b4a      	ldr	r3, [pc, #296]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	099b      	lsrs	r3, r3, #6
 8003c08:	2200      	movs	r2, #0
 8003c0a:	623b      	str	r3, [r7, #32]
 8003c0c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c14:	2100      	movs	r1, #0
 8003c16:	4b47      	ldr	r3, [pc, #284]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c18:	fb03 f201 	mul.w	r2, r3, r1
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	fb00 f303 	mul.w	r3, r0, r3
 8003c22:	4413      	add	r3, r2
 8003c24:	4a43      	ldr	r2, [pc, #268]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c26:	fba0 1202 	umull	r1, r2, r0, r2
 8003c2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c2c:	460a      	mov	r2, r1
 8003c2e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003c30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c32:	4413      	add	r3, r2
 8003c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c38:	2200      	movs	r2, #0
 8003c3a:	61bb      	str	r3, [r7, #24]
 8003c3c:	61fa      	str	r2, [r7, #28]
 8003c3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003c46:	f7fc fb53 	bl	80002f0 <__aeabi_uldivmod>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4613      	mov	r3, r2
 8003c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c52:	e053      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c54:	4b35      	ldr	r3, [pc, #212]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	099b      	lsrs	r3, r3, #6
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	617a      	str	r2, [r7, #20]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c66:	f04f 0b00 	mov.w	fp, #0
 8003c6a:	4652      	mov	r2, sl
 8003c6c:	465b      	mov	r3, fp
 8003c6e:	f04f 0000 	mov.w	r0, #0
 8003c72:	f04f 0100 	mov.w	r1, #0
 8003c76:	0159      	lsls	r1, r3, #5
 8003c78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c7c:	0150      	lsls	r0, r2, #5
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	ebb2 080a 	subs.w	r8, r2, sl
 8003c86:	eb63 090b 	sbc.w	r9, r3, fp
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c9e:	ebb2 0408 	subs.w	r4, r2, r8
 8003ca2:	eb63 0509 	sbc.w	r5, r3, r9
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	00eb      	lsls	r3, r5, #3
 8003cb0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cb4:	00e2      	lsls	r2, r4, #3
 8003cb6:	4614      	mov	r4, r2
 8003cb8:	461d      	mov	r5, r3
 8003cba:	eb14 030a 	adds.w	r3, r4, sl
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	eb45 030b 	adc.w	r3, r5, fp
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	028b      	lsls	r3, r1, #10
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cdc:	4621      	mov	r1, r4
 8003cde:	028a      	lsls	r2, r1, #10
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	60fa      	str	r2, [r7, #12]
 8003cec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cf0:	f7fc fafe 	bl	80002f0 <__aeabi_uldivmod>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	0c1b      	lsrs	r3, r3, #16
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	3301      	adds	r3, #1
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003d0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d16:	e002      	b.n	8003d1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d18:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3740      	adds	r7, #64	@ 0x40
 8003d24:	46bd      	mov	sp, r7
 8003d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	00f42400 	.word	0x00f42400
 8003d34:	017d7840 	.word	0x017d7840

08003d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d012      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d60:	4b69      	ldr	r3, [pc, #420]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	4a68      	ldr	r2, [pc, #416]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d66:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003d6a:	6093      	str	r3, [r2, #8]
 8003d6c:	4b66      	ldr	r3, [pc, #408]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d74:	4964      	ldr	r1, [pc, #400]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d82:	2301      	movs	r3, #1
 8003d84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d017      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d92:	4b5d      	ldr	r3, [pc, #372]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d98:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da0:	4959      	ldr	r1, [pc, #356]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003db0:	d101      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003db2:	2301      	movs	r3, #1
 8003db4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d017      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dce:	4b4e      	ldr	r3, [pc, #312]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dd4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	494a      	ldr	r1, [pc, #296]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dec:	d101      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003dee:	2301      	movs	r3, #1
 8003df0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 808b 	beq.w	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e20:	4a39      	ldr	r2, [pc, #228]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e26:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e28:	4b37      	ldr	r3, [pc, #220]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e34:	4b35      	ldr	r3, [pc, #212]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a34      	ldr	r2, [pc, #208]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e40:	f7fd f9c2 	bl	80011c8 <HAL_GetTick>
 8003e44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e48:	f7fd f9be 	bl	80011c8 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b64      	cmp	r3, #100	@ 0x64
 8003e54:	d901      	bls.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e38f      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e66:	4b28      	ldr	r3, [pc, #160]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d035      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d02e      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e84:	4b20      	ldr	r3, [pc, #128]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e92:	4a1d      	ldr	r2, [pc, #116]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e98:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ea4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ea6:	4a18      	ldr	r2, [pc, #96]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003eac:	4b16      	ldr	r3, [pc, #88]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d114      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fd f986 	bl	80011c8 <HAL_GetTick>
 8003ebc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebe:	e00a      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec0:	f7fd f982 	bl	80011c8 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e351      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0ee      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eee:	d111      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ef0:	4b05      	ldr	r3, [pc, #20]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003efc:	4b04      	ldr	r3, [pc, #16]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003efe:	400b      	ands	r3, r1
 8003f00:	4901      	ldr	r1, [pc, #4]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
 8003f06:	e00b      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	40007000 	.word	0x40007000
 8003f10:	0ffffcff 	.word	0x0ffffcff
 8003f14:	4bac      	ldr	r3, [pc, #688]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4aab      	ldr	r2, [pc, #684]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f1a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003f1e:	6093      	str	r3, [r2, #8]
 8003f20:	4ba9      	ldr	r3, [pc, #676]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2c:	49a6      	ldr	r1, [pc, #664]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d010      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f3e:	4ba2      	ldr	r3, [pc, #648]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f44:	4aa0      	ldr	r2, [pc, #640]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f4e:	4b9e      	ldr	r3, [pc, #632]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f50:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f58:	499b      	ldr	r1, [pc, #620]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f6c:	4b96      	ldr	r3, [pc, #600]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f72:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f7a:	4993      	ldr	r1, [pc, #588]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f8e:	4b8e      	ldr	r3, [pc, #568]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f94:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f9c:	498a      	ldr	r1, [pc, #552]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fb0:	4b85      	ldr	r3, [pc, #532]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fbe:	4982      	ldr	r1, [pc, #520]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fd2:	4b7d      	ldr	r3, [pc, #500]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe0:	4979      	ldr	r1, [pc, #484]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ff4:	4b74      	ldr	r3, [pc, #464]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ffa:	f023 0203 	bic.w	r2, r3, #3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004002:	4971      	ldr	r1, [pc, #452]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004016:	4b6c      	ldr	r3, [pc, #432]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800401c:	f023 020c 	bic.w	r2, r3, #12
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004024:	4968      	ldr	r1, [pc, #416]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004038:	4b63      	ldr	r3, [pc, #396]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800403e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004046:	4960      	ldr	r1, [pc, #384]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800405a:	4b5b      	ldr	r3, [pc, #364]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004060:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004068:	4957      	ldr	r1, [pc, #348]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800407c:	4b52      	ldr	r3, [pc, #328]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004082:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408a:	494f      	ldr	r1, [pc, #316]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800409e:	4b4a      	ldr	r3, [pc, #296]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ac:	4946      	ldr	r1, [pc, #280]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040c0:	4b41      	ldr	r3, [pc, #260]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ce:	493e      	ldr	r1, [pc, #248]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040e2:	4b39      	ldr	r3, [pc, #228]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040f0:	4935      	ldr	r1, [pc, #212]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004104:	4b30      	ldr	r3, [pc, #192]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004112:	492d      	ldr	r1, [pc, #180]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d011      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004126:	4b28      	ldr	r3, [pc, #160]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800412c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004134:	4924      	ldr	r1, [pc, #144]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004140:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004144:	d101      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004146:	2301      	movs	r3, #1
 8004148:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004156:	2301      	movs	r3, #1
 8004158:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004166:	4b18      	ldr	r3, [pc, #96]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800416c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004174:	4914      	ldr	r1, [pc, #80]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00b      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004188:	4b0f      	ldr	r3, [pc, #60]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800418e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004198:	490b      	ldr	r1, [pc, #44]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00f      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80041ac:	4b06      	ldr	r3, [pc, #24]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041bc:	4902      	ldr	r1, [pc, #8]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80041c4:	e002      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00b      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041d8:	4b8a      	ldr	r3, [pc, #552]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041de:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e8:	4986      	ldr	r1, [pc, #536]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00b      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80041fc:	4b81      	ldr	r3, [pc, #516]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004202:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800420c:	497d      	ldr	r1, [pc, #500]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d006      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 80d6 	beq.w	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004228:	4b76      	ldr	r3, [pc, #472]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a75      	ldr	r2, [pc, #468]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004232:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004234:	f7fc ffc8 	bl	80011c8 <HAL_GetTick>
 8004238:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800423a:	e008      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800423c:	f7fc ffc4 	bl	80011c8 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b64      	cmp	r3, #100	@ 0x64
 8004248:	d901      	bls.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e195      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800424e:	4b6d      	ldr	r3, [pc, #436]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f0      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d021      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426a:	2b00      	cmp	r3, #0
 800426c:	d11d      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800426e:	4b65      	ldr	r3, [pc, #404]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004274:	0c1b      	lsrs	r3, r3, #16
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800427c:	4b61      	ldr	r3, [pc, #388]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800427e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004282:	0e1b      	lsrs	r3, r3, #24
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	019a      	lsls	r2, r3, #6
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	041b      	lsls	r3, r3, #16
 8004294:	431a      	orrs	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	061b      	lsls	r3, r3, #24
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	071b      	lsls	r3, r3, #28
 80042a2:	4958      	ldr	r1, [pc, #352]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d004      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d02e      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042d4:	d129      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042e4:	4b47      	ldr	r3, [pc, #284]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ea:	0f1b      	lsrs	r3, r3, #28
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	019a      	lsls	r2, r3, #6
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	041b      	lsls	r3, r3, #16
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	061b      	lsls	r3, r3, #24
 8004304:	431a      	orrs	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	071b      	lsls	r3, r3, #28
 800430a:	493e      	ldr	r1, [pc, #248]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004312:	4b3c      	ldr	r3, [pc, #240]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004318:	f023 021f 	bic.w	r2, r3, #31
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	3b01      	subs	r3, #1
 8004322:	4938      	ldr	r1, [pc, #224]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d01d      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004336:	4b33      	ldr	r3, [pc, #204]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004338:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800433c:	0e1b      	lsrs	r3, r3, #24
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004344:	4b2f      	ldr	r3, [pc, #188]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004346:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800434a:	0f1b      	lsrs	r3, r3, #28
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	019a      	lsls	r2, r3, #6
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	041b      	lsls	r3, r3, #16
 800435e:	431a      	orrs	r2, r3
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	061b      	lsls	r3, r3, #24
 8004364:	431a      	orrs	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	071b      	lsls	r3, r3, #28
 800436a:	4926      	ldr	r1, [pc, #152]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d011      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	019a      	lsls	r2, r3, #6
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	041b      	lsls	r3, r3, #16
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	061b      	lsls	r3, r3, #24
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	071b      	lsls	r3, r3, #28
 800439a:	491a      	ldr	r1, [pc, #104]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043a2:	4b18      	ldr	r3, [pc, #96]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a17      	ldr	r2, [pc, #92]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ae:	f7fc ff0b 	bl	80011c8 <HAL_GetTick>
 80043b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043b6:	f7fc ff07 	bl	80011c8 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b64      	cmp	r3, #100	@ 0x64
 80043c2:	d901      	bls.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e0d8      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	f040 80ce 	bne.w	8004578 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043dc:	4b09      	ldr	r3, [pc, #36]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a08      	ldr	r2, [pc, #32]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e8:	f7fc feee 	bl	80011c8 <HAL_GetTick>
 80043ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043ee:	e00b      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043f0:	f7fc feea 	bl	80011c8 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	@ 0x64
 80043fc:	d904      	bls.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e0bb      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004402:	bf00      	nop
 8004404:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004408:	4b5e      	ldr	r3, [pc, #376]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004414:	d0ec      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004432:	2b00      	cmp	r3, #0
 8004434:	d02e      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d12a      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800443e:	4b51      	ldr	r3, [pc, #324]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004444:	0c1b      	lsrs	r3, r3, #16
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800444c:	4b4d      	ldr	r3, [pc, #308]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004452:	0f1b      	lsrs	r3, r3, #28
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	019a      	lsls	r2, r3, #6
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	041b      	lsls	r3, r3, #16
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	061b      	lsls	r3, r3, #24
 800446c:	431a      	orrs	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	071b      	lsls	r3, r3, #28
 8004472:	4944      	ldr	r1, [pc, #272]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800447a:	4b42      	ldr	r3, [pc, #264]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800447c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004480:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004488:	3b01      	subs	r3, #1
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	493d      	ldr	r1, [pc, #244]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d022      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044a8:	d11d      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044aa:	4b36      	ldr	r3, [pc, #216]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b0:	0e1b      	lsrs	r3, r3, #24
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044b8:	4b32      	ldr	r3, [pc, #200]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044be:	0f1b      	lsrs	r3, r3, #28
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	019a      	lsls	r2, r3, #6
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	041b      	lsls	r3, r3, #16
 80044d2:	431a      	orrs	r2, r3
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	061b      	lsls	r3, r3, #24
 80044d8:	431a      	orrs	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	071b      	lsls	r3, r3, #28
 80044de:	4929      	ldr	r1, [pc, #164]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d028      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044f2:	4b24      	ldr	r3, [pc, #144]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f8:	0e1b      	lsrs	r3, r3, #24
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004500:	4b20      	ldr	r3, [pc, #128]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004506:	0c1b      	lsrs	r3, r3, #16
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	019a      	lsls	r2, r3, #6
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	041b      	lsls	r3, r3, #16
 8004518:	431a      	orrs	r2, r3
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	061b      	lsls	r3, r3, #24
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	071b      	lsls	r3, r3, #28
 8004526:	4917      	ldr	r1, [pc, #92]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800452e:	4b15      	ldr	r3, [pc, #84]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004534:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	4911      	ldr	r1, [pc, #68]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004544:	4b0f      	ldr	r3, [pc, #60]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a0e      	ldr	r2, [pc, #56]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800454a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800454e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004550:	f7fc fe3a 	bl	80011c8 <HAL_GetTick>
 8004554:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004556:	e008      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004558:	f7fc fe36 	bl	80011c8 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b64      	cmp	r3, #100	@ 0x64
 8004564:	d901      	bls.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e007      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800456a:	4b06      	ldr	r3, [pc, #24]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004572:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004576:	d1ef      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3720      	adds	r7, #32
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40023800 	.word	0x40023800

08004588 <siprintf>:
 8004588:	b40e      	push	{r1, r2, r3}
 800458a:	b500      	push	{lr}
 800458c:	b09c      	sub	sp, #112	@ 0x70
 800458e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004590:	9002      	str	r0, [sp, #8]
 8004592:	9006      	str	r0, [sp, #24]
 8004594:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004598:	4809      	ldr	r0, [pc, #36]	@ (80045c0 <siprintf+0x38>)
 800459a:	9107      	str	r1, [sp, #28]
 800459c:	9104      	str	r1, [sp, #16]
 800459e:	4909      	ldr	r1, [pc, #36]	@ (80045c4 <siprintf+0x3c>)
 80045a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80045a4:	9105      	str	r1, [sp, #20]
 80045a6:	6800      	ldr	r0, [r0, #0]
 80045a8:	9301      	str	r3, [sp, #4]
 80045aa:	a902      	add	r1, sp, #8
 80045ac:	f000 f9a4 	bl	80048f8 <_svfiprintf_r>
 80045b0:	9b02      	ldr	r3, [sp, #8]
 80045b2:	2200      	movs	r2, #0
 80045b4:	701a      	strb	r2, [r3, #0]
 80045b6:	b01c      	add	sp, #112	@ 0x70
 80045b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045bc:	b003      	add	sp, #12
 80045be:	4770      	bx	lr
 80045c0:	20000024 	.word	0x20000024
 80045c4:	ffff0208 	.word	0xffff0208

080045c8 <memset>:
 80045c8:	4402      	add	r2, r0
 80045ca:	4603      	mov	r3, r0
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d100      	bne.n	80045d2 <memset+0xa>
 80045d0:	4770      	bx	lr
 80045d2:	f803 1b01 	strb.w	r1, [r3], #1
 80045d6:	e7f9      	b.n	80045cc <memset+0x4>

080045d8 <strcat>:
 80045d8:	b510      	push	{r4, lr}
 80045da:	4602      	mov	r2, r0
 80045dc:	7814      	ldrb	r4, [r2, #0]
 80045de:	4613      	mov	r3, r2
 80045e0:	3201      	adds	r2, #1
 80045e2:	2c00      	cmp	r4, #0
 80045e4:	d1fa      	bne.n	80045dc <strcat+0x4>
 80045e6:	3b01      	subs	r3, #1
 80045e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045f0:	2a00      	cmp	r2, #0
 80045f2:	d1f9      	bne.n	80045e8 <strcat+0x10>
 80045f4:	bd10      	pop	{r4, pc}
	...

080045f8 <__errno>:
 80045f8:	4b01      	ldr	r3, [pc, #4]	@ (8004600 <__errno+0x8>)
 80045fa:	6818      	ldr	r0, [r3, #0]
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	20000024 	.word	0x20000024

08004604 <__libc_init_array>:
 8004604:	b570      	push	{r4, r5, r6, lr}
 8004606:	4d0d      	ldr	r5, [pc, #52]	@ (800463c <__libc_init_array+0x38>)
 8004608:	4c0d      	ldr	r4, [pc, #52]	@ (8004640 <__libc_init_array+0x3c>)
 800460a:	1b64      	subs	r4, r4, r5
 800460c:	10a4      	asrs	r4, r4, #2
 800460e:	2600      	movs	r6, #0
 8004610:	42a6      	cmp	r6, r4
 8004612:	d109      	bne.n	8004628 <__libc_init_array+0x24>
 8004614:	4d0b      	ldr	r5, [pc, #44]	@ (8004644 <__libc_init_array+0x40>)
 8004616:	4c0c      	ldr	r4, [pc, #48]	@ (8004648 <__libc_init_array+0x44>)
 8004618:	f000 fc66 	bl	8004ee8 <_init>
 800461c:	1b64      	subs	r4, r4, r5
 800461e:	10a4      	asrs	r4, r4, #2
 8004620:	2600      	movs	r6, #0
 8004622:	42a6      	cmp	r6, r4
 8004624:	d105      	bne.n	8004632 <__libc_init_array+0x2e>
 8004626:	bd70      	pop	{r4, r5, r6, pc}
 8004628:	f855 3b04 	ldr.w	r3, [r5], #4
 800462c:	4798      	blx	r3
 800462e:	3601      	adds	r6, #1
 8004630:	e7ee      	b.n	8004610 <__libc_init_array+0xc>
 8004632:	f855 3b04 	ldr.w	r3, [r5], #4
 8004636:	4798      	blx	r3
 8004638:	3601      	adds	r6, #1
 800463a:	e7f2      	b.n	8004622 <__libc_init_array+0x1e>
 800463c:	08004f80 	.word	0x08004f80
 8004640:	08004f80 	.word	0x08004f80
 8004644:	08004f80 	.word	0x08004f80
 8004648:	08004f84 	.word	0x08004f84

0800464c <__retarget_lock_acquire_recursive>:
 800464c:	4770      	bx	lr

0800464e <__retarget_lock_release_recursive>:
 800464e:	4770      	bx	lr

08004650 <_free_r>:
 8004650:	b538      	push	{r3, r4, r5, lr}
 8004652:	4605      	mov	r5, r0
 8004654:	2900      	cmp	r1, #0
 8004656:	d041      	beq.n	80046dc <_free_r+0x8c>
 8004658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800465c:	1f0c      	subs	r4, r1, #4
 800465e:	2b00      	cmp	r3, #0
 8004660:	bfb8      	it	lt
 8004662:	18e4      	addlt	r4, r4, r3
 8004664:	f000 f8e0 	bl	8004828 <__malloc_lock>
 8004668:	4a1d      	ldr	r2, [pc, #116]	@ (80046e0 <_free_r+0x90>)
 800466a:	6813      	ldr	r3, [r2, #0]
 800466c:	b933      	cbnz	r3, 800467c <_free_r+0x2c>
 800466e:	6063      	str	r3, [r4, #4]
 8004670:	6014      	str	r4, [r2, #0]
 8004672:	4628      	mov	r0, r5
 8004674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004678:	f000 b8dc 	b.w	8004834 <__malloc_unlock>
 800467c:	42a3      	cmp	r3, r4
 800467e:	d908      	bls.n	8004692 <_free_r+0x42>
 8004680:	6820      	ldr	r0, [r4, #0]
 8004682:	1821      	adds	r1, r4, r0
 8004684:	428b      	cmp	r3, r1
 8004686:	bf01      	itttt	eq
 8004688:	6819      	ldreq	r1, [r3, #0]
 800468a:	685b      	ldreq	r3, [r3, #4]
 800468c:	1809      	addeq	r1, r1, r0
 800468e:	6021      	streq	r1, [r4, #0]
 8004690:	e7ed      	b.n	800466e <_free_r+0x1e>
 8004692:	461a      	mov	r2, r3
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	b10b      	cbz	r3, 800469c <_free_r+0x4c>
 8004698:	42a3      	cmp	r3, r4
 800469a:	d9fa      	bls.n	8004692 <_free_r+0x42>
 800469c:	6811      	ldr	r1, [r2, #0]
 800469e:	1850      	adds	r0, r2, r1
 80046a0:	42a0      	cmp	r0, r4
 80046a2:	d10b      	bne.n	80046bc <_free_r+0x6c>
 80046a4:	6820      	ldr	r0, [r4, #0]
 80046a6:	4401      	add	r1, r0
 80046a8:	1850      	adds	r0, r2, r1
 80046aa:	4283      	cmp	r3, r0
 80046ac:	6011      	str	r1, [r2, #0]
 80046ae:	d1e0      	bne.n	8004672 <_free_r+0x22>
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	6053      	str	r3, [r2, #4]
 80046b6:	4408      	add	r0, r1
 80046b8:	6010      	str	r0, [r2, #0]
 80046ba:	e7da      	b.n	8004672 <_free_r+0x22>
 80046bc:	d902      	bls.n	80046c4 <_free_r+0x74>
 80046be:	230c      	movs	r3, #12
 80046c0:	602b      	str	r3, [r5, #0]
 80046c2:	e7d6      	b.n	8004672 <_free_r+0x22>
 80046c4:	6820      	ldr	r0, [r4, #0]
 80046c6:	1821      	adds	r1, r4, r0
 80046c8:	428b      	cmp	r3, r1
 80046ca:	bf04      	itt	eq
 80046cc:	6819      	ldreq	r1, [r3, #0]
 80046ce:	685b      	ldreq	r3, [r3, #4]
 80046d0:	6063      	str	r3, [r4, #4]
 80046d2:	bf04      	itt	eq
 80046d4:	1809      	addeq	r1, r1, r0
 80046d6:	6021      	streq	r1, [r4, #0]
 80046d8:	6054      	str	r4, [r2, #4]
 80046da:	e7ca      	b.n	8004672 <_free_r+0x22>
 80046dc:	bd38      	pop	{r3, r4, r5, pc}
 80046de:	bf00      	nop
 80046e0:	2000025c 	.word	0x2000025c

080046e4 <sbrk_aligned>:
 80046e4:	b570      	push	{r4, r5, r6, lr}
 80046e6:	4e0f      	ldr	r6, [pc, #60]	@ (8004724 <sbrk_aligned+0x40>)
 80046e8:	460c      	mov	r4, r1
 80046ea:	6831      	ldr	r1, [r6, #0]
 80046ec:	4605      	mov	r5, r0
 80046ee:	b911      	cbnz	r1, 80046f6 <sbrk_aligned+0x12>
 80046f0:	f000 fba6 	bl	8004e40 <_sbrk_r>
 80046f4:	6030      	str	r0, [r6, #0]
 80046f6:	4621      	mov	r1, r4
 80046f8:	4628      	mov	r0, r5
 80046fa:	f000 fba1 	bl	8004e40 <_sbrk_r>
 80046fe:	1c43      	adds	r3, r0, #1
 8004700:	d103      	bne.n	800470a <sbrk_aligned+0x26>
 8004702:	f04f 34ff 	mov.w	r4, #4294967295
 8004706:	4620      	mov	r0, r4
 8004708:	bd70      	pop	{r4, r5, r6, pc}
 800470a:	1cc4      	adds	r4, r0, #3
 800470c:	f024 0403 	bic.w	r4, r4, #3
 8004710:	42a0      	cmp	r0, r4
 8004712:	d0f8      	beq.n	8004706 <sbrk_aligned+0x22>
 8004714:	1a21      	subs	r1, r4, r0
 8004716:	4628      	mov	r0, r5
 8004718:	f000 fb92 	bl	8004e40 <_sbrk_r>
 800471c:	3001      	adds	r0, #1
 800471e:	d1f2      	bne.n	8004706 <sbrk_aligned+0x22>
 8004720:	e7ef      	b.n	8004702 <sbrk_aligned+0x1e>
 8004722:	bf00      	nop
 8004724:	20000258 	.word	0x20000258

08004728 <_malloc_r>:
 8004728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800472c:	1ccd      	adds	r5, r1, #3
 800472e:	f025 0503 	bic.w	r5, r5, #3
 8004732:	3508      	adds	r5, #8
 8004734:	2d0c      	cmp	r5, #12
 8004736:	bf38      	it	cc
 8004738:	250c      	movcc	r5, #12
 800473a:	2d00      	cmp	r5, #0
 800473c:	4606      	mov	r6, r0
 800473e:	db01      	blt.n	8004744 <_malloc_r+0x1c>
 8004740:	42a9      	cmp	r1, r5
 8004742:	d904      	bls.n	800474e <_malloc_r+0x26>
 8004744:	230c      	movs	r3, #12
 8004746:	6033      	str	r3, [r6, #0]
 8004748:	2000      	movs	r0, #0
 800474a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800474e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004824 <_malloc_r+0xfc>
 8004752:	f000 f869 	bl	8004828 <__malloc_lock>
 8004756:	f8d8 3000 	ldr.w	r3, [r8]
 800475a:	461c      	mov	r4, r3
 800475c:	bb44      	cbnz	r4, 80047b0 <_malloc_r+0x88>
 800475e:	4629      	mov	r1, r5
 8004760:	4630      	mov	r0, r6
 8004762:	f7ff ffbf 	bl	80046e4 <sbrk_aligned>
 8004766:	1c43      	adds	r3, r0, #1
 8004768:	4604      	mov	r4, r0
 800476a:	d158      	bne.n	800481e <_malloc_r+0xf6>
 800476c:	f8d8 4000 	ldr.w	r4, [r8]
 8004770:	4627      	mov	r7, r4
 8004772:	2f00      	cmp	r7, #0
 8004774:	d143      	bne.n	80047fe <_malloc_r+0xd6>
 8004776:	2c00      	cmp	r4, #0
 8004778:	d04b      	beq.n	8004812 <_malloc_r+0xea>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	4639      	mov	r1, r7
 800477e:	4630      	mov	r0, r6
 8004780:	eb04 0903 	add.w	r9, r4, r3
 8004784:	f000 fb5c 	bl	8004e40 <_sbrk_r>
 8004788:	4581      	cmp	r9, r0
 800478a:	d142      	bne.n	8004812 <_malloc_r+0xea>
 800478c:	6821      	ldr	r1, [r4, #0]
 800478e:	1a6d      	subs	r5, r5, r1
 8004790:	4629      	mov	r1, r5
 8004792:	4630      	mov	r0, r6
 8004794:	f7ff ffa6 	bl	80046e4 <sbrk_aligned>
 8004798:	3001      	adds	r0, #1
 800479a:	d03a      	beq.n	8004812 <_malloc_r+0xea>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	442b      	add	r3, r5
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	f8d8 3000 	ldr.w	r3, [r8]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	bb62      	cbnz	r2, 8004804 <_malloc_r+0xdc>
 80047aa:	f8c8 7000 	str.w	r7, [r8]
 80047ae:	e00f      	b.n	80047d0 <_malloc_r+0xa8>
 80047b0:	6822      	ldr	r2, [r4, #0]
 80047b2:	1b52      	subs	r2, r2, r5
 80047b4:	d420      	bmi.n	80047f8 <_malloc_r+0xd0>
 80047b6:	2a0b      	cmp	r2, #11
 80047b8:	d917      	bls.n	80047ea <_malloc_r+0xc2>
 80047ba:	1961      	adds	r1, r4, r5
 80047bc:	42a3      	cmp	r3, r4
 80047be:	6025      	str	r5, [r4, #0]
 80047c0:	bf18      	it	ne
 80047c2:	6059      	strne	r1, [r3, #4]
 80047c4:	6863      	ldr	r3, [r4, #4]
 80047c6:	bf08      	it	eq
 80047c8:	f8c8 1000 	streq.w	r1, [r8]
 80047cc:	5162      	str	r2, [r4, r5]
 80047ce:	604b      	str	r3, [r1, #4]
 80047d0:	4630      	mov	r0, r6
 80047d2:	f000 f82f 	bl	8004834 <__malloc_unlock>
 80047d6:	f104 000b 	add.w	r0, r4, #11
 80047da:	1d23      	adds	r3, r4, #4
 80047dc:	f020 0007 	bic.w	r0, r0, #7
 80047e0:	1ac2      	subs	r2, r0, r3
 80047e2:	bf1c      	itt	ne
 80047e4:	1a1b      	subne	r3, r3, r0
 80047e6:	50a3      	strne	r3, [r4, r2]
 80047e8:	e7af      	b.n	800474a <_malloc_r+0x22>
 80047ea:	6862      	ldr	r2, [r4, #4]
 80047ec:	42a3      	cmp	r3, r4
 80047ee:	bf0c      	ite	eq
 80047f0:	f8c8 2000 	streq.w	r2, [r8]
 80047f4:	605a      	strne	r2, [r3, #4]
 80047f6:	e7eb      	b.n	80047d0 <_malloc_r+0xa8>
 80047f8:	4623      	mov	r3, r4
 80047fa:	6864      	ldr	r4, [r4, #4]
 80047fc:	e7ae      	b.n	800475c <_malloc_r+0x34>
 80047fe:	463c      	mov	r4, r7
 8004800:	687f      	ldr	r7, [r7, #4]
 8004802:	e7b6      	b.n	8004772 <_malloc_r+0x4a>
 8004804:	461a      	mov	r2, r3
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	42a3      	cmp	r3, r4
 800480a:	d1fb      	bne.n	8004804 <_malloc_r+0xdc>
 800480c:	2300      	movs	r3, #0
 800480e:	6053      	str	r3, [r2, #4]
 8004810:	e7de      	b.n	80047d0 <_malloc_r+0xa8>
 8004812:	230c      	movs	r3, #12
 8004814:	6033      	str	r3, [r6, #0]
 8004816:	4630      	mov	r0, r6
 8004818:	f000 f80c 	bl	8004834 <__malloc_unlock>
 800481c:	e794      	b.n	8004748 <_malloc_r+0x20>
 800481e:	6005      	str	r5, [r0, #0]
 8004820:	e7d6      	b.n	80047d0 <_malloc_r+0xa8>
 8004822:	bf00      	nop
 8004824:	2000025c 	.word	0x2000025c

08004828 <__malloc_lock>:
 8004828:	4801      	ldr	r0, [pc, #4]	@ (8004830 <__malloc_lock+0x8>)
 800482a:	f7ff bf0f 	b.w	800464c <__retarget_lock_acquire_recursive>
 800482e:	bf00      	nop
 8004830:	20000254 	.word	0x20000254

08004834 <__malloc_unlock>:
 8004834:	4801      	ldr	r0, [pc, #4]	@ (800483c <__malloc_unlock+0x8>)
 8004836:	f7ff bf0a 	b.w	800464e <__retarget_lock_release_recursive>
 800483a:	bf00      	nop
 800483c:	20000254 	.word	0x20000254

08004840 <__ssputs_r>:
 8004840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004844:	688e      	ldr	r6, [r1, #8]
 8004846:	461f      	mov	r7, r3
 8004848:	42be      	cmp	r6, r7
 800484a:	680b      	ldr	r3, [r1, #0]
 800484c:	4682      	mov	sl, r0
 800484e:	460c      	mov	r4, r1
 8004850:	4690      	mov	r8, r2
 8004852:	d82d      	bhi.n	80048b0 <__ssputs_r+0x70>
 8004854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004858:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800485c:	d026      	beq.n	80048ac <__ssputs_r+0x6c>
 800485e:	6965      	ldr	r5, [r4, #20]
 8004860:	6909      	ldr	r1, [r1, #16]
 8004862:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004866:	eba3 0901 	sub.w	r9, r3, r1
 800486a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800486e:	1c7b      	adds	r3, r7, #1
 8004870:	444b      	add	r3, r9
 8004872:	106d      	asrs	r5, r5, #1
 8004874:	429d      	cmp	r5, r3
 8004876:	bf38      	it	cc
 8004878:	461d      	movcc	r5, r3
 800487a:	0553      	lsls	r3, r2, #21
 800487c:	d527      	bpl.n	80048ce <__ssputs_r+0x8e>
 800487e:	4629      	mov	r1, r5
 8004880:	f7ff ff52 	bl	8004728 <_malloc_r>
 8004884:	4606      	mov	r6, r0
 8004886:	b360      	cbz	r0, 80048e2 <__ssputs_r+0xa2>
 8004888:	6921      	ldr	r1, [r4, #16]
 800488a:	464a      	mov	r2, r9
 800488c:	f000 fae8 	bl	8004e60 <memcpy>
 8004890:	89a3      	ldrh	r3, [r4, #12]
 8004892:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800489a:	81a3      	strh	r3, [r4, #12]
 800489c:	6126      	str	r6, [r4, #16]
 800489e:	6165      	str	r5, [r4, #20]
 80048a0:	444e      	add	r6, r9
 80048a2:	eba5 0509 	sub.w	r5, r5, r9
 80048a6:	6026      	str	r6, [r4, #0]
 80048a8:	60a5      	str	r5, [r4, #8]
 80048aa:	463e      	mov	r6, r7
 80048ac:	42be      	cmp	r6, r7
 80048ae:	d900      	bls.n	80048b2 <__ssputs_r+0x72>
 80048b0:	463e      	mov	r6, r7
 80048b2:	6820      	ldr	r0, [r4, #0]
 80048b4:	4632      	mov	r2, r6
 80048b6:	4641      	mov	r1, r8
 80048b8:	f000 faa8 	bl	8004e0c <memmove>
 80048bc:	68a3      	ldr	r3, [r4, #8]
 80048be:	1b9b      	subs	r3, r3, r6
 80048c0:	60a3      	str	r3, [r4, #8]
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	4433      	add	r3, r6
 80048c6:	6023      	str	r3, [r4, #0]
 80048c8:	2000      	movs	r0, #0
 80048ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ce:	462a      	mov	r2, r5
 80048d0:	f000 fad4 	bl	8004e7c <_realloc_r>
 80048d4:	4606      	mov	r6, r0
 80048d6:	2800      	cmp	r0, #0
 80048d8:	d1e0      	bne.n	800489c <__ssputs_r+0x5c>
 80048da:	6921      	ldr	r1, [r4, #16]
 80048dc:	4650      	mov	r0, sl
 80048de:	f7ff feb7 	bl	8004650 <_free_r>
 80048e2:	230c      	movs	r3, #12
 80048e4:	f8ca 3000 	str.w	r3, [sl]
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048ee:	81a3      	strh	r3, [r4, #12]
 80048f0:	f04f 30ff 	mov.w	r0, #4294967295
 80048f4:	e7e9      	b.n	80048ca <__ssputs_r+0x8a>
	...

080048f8 <_svfiprintf_r>:
 80048f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fc:	4698      	mov	r8, r3
 80048fe:	898b      	ldrh	r3, [r1, #12]
 8004900:	061b      	lsls	r3, r3, #24
 8004902:	b09d      	sub	sp, #116	@ 0x74
 8004904:	4607      	mov	r7, r0
 8004906:	460d      	mov	r5, r1
 8004908:	4614      	mov	r4, r2
 800490a:	d510      	bpl.n	800492e <_svfiprintf_r+0x36>
 800490c:	690b      	ldr	r3, [r1, #16]
 800490e:	b973      	cbnz	r3, 800492e <_svfiprintf_r+0x36>
 8004910:	2140      	movs	r1, #64	@ 0x40
 8004912:	f7ff ff09 	bl	8004728 <_malloc_r>
 8004916:	6028      	str	r0, [r5, #0]
 8004918:	6128      	str	r0, [r5, #16]
 800491a:	b930      	cbnz	r0, 800492a <_svfiprintf_r+0x32>
 800491c:	230c      	movs	r3, #12
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	f04f 30ff 	mov.w	r0, #4294967295
 8004924:	b01d      	add	sp, #116	@ 0x74
 8004926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492a:	2340      	movs	r3, #64	@ 0x40
 800492c:	616b      	str	r3, [r5, #20]
 800492e:	2300      	movs	r3, #0
 8004930:	9309      	str	r3, [sp, #36]	@ 0x24
 8004932:	2320      	movs	r3, #32
 8004934:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004938:	f8cd 800c 	str.w	r8, [sp, #12]
 800493c:	2330      	movs	r3, #48	@ 0x30
 800493e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004adc <_svfiprintf_r+0x1e4>
 8004942:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004946:	f04f 0901 	mov.w	r9, #1
 800494a:	4623      	mov	r3, r4
 800494c:	469a      	mov	sl, r3
 800494e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004952:	b10a      	cbz	r2, 8004958 <_svfiprintf_r+0x60>
 8004954:	2a25      	cmp	r2, #37	@ 0x25
 8004956:	d1f9      	bne.n	800494c <_svfiprintf_r+0x54>
 8004958:	ebba 0b04 	subs.w	fp, sl, r4
 800495c:	d00b      	beq.n	8004976 <_svfiprintf_r+0x7e>
 800495e:	465b      	mov	r3, fp
 8004960:	4622      	mov	r2, r4
 8004962:	4629      	mov	r1, r5
 8004964:	4638      	mov	r0, r7
 8004966:	f7ff ff6b 	bl	8004840 <__ssputs_r>
 800496a:	3001      	adds	r0, #1
 800496c:	f000 80a7 	beq.w	8004abe <_svfiprintf_r+0x1c6>
 8004970:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004972:	445a      	add	r2, fp
 8004974:	9209      	str	r2, [sp, #36]	@ 0x24
 8004976:	f89a 3000 	ldrb.w	r3, [sl]
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 809f 	beq.w	8004abe <_svfiprintf_r+0x1c6>
 8004980:	2300      	movs	r3, #0
 8004982:	f04f 32ff 	mov.w	r2, #4294967295
 8004986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800498a:	f10a 0a01 	add.w	sl, sl, #1
 800498e:	9304      	str	r3, [sp, #16]
 8004990:	9307      	str	r3, [sp, #28]
 8004992:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004996:	931a      	str	r3, [sp, #104]	@ 0x68
 8004998:	4654      	mov	r4, sl
 800499a:	2205      	movs	r2, #5
 800499c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a0:	484e      	ldr	r0, [pc, #312]	@ (8004adc <_svfiprintf_r+0x1e4>)
 80049a2:	f7fb fc55 	bl	8000250 <memchr>
 80049a6:	9a04      	ldr	r2, [sp, #16]
 80049a8:	b9d8      	cbnz	r0, 80049e2 <_svfiprintf_r+0xea>
 80049aa:	06d0      	lsls	r0, r2, #27
 80049ac:	bf44      	itt	mi
 80049ae:	2320      	movmi	r3, #32
 80049b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049b4:	0711      	lsls	r1, r2, #28
 80049b6:	bf44      	itt	mi
 80049b8:	232b      	movmi	r3, #43	@ 0x2b
 80049ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049be:	f89a 3000 	ldrb.w	r3, [sl]
 80049c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80049c4:	d015      	beq.n	80049f2 <_svfiprintf_r+0xfa>
 80049c6:	9a07      	ldr	r2, [sp, #28]
 80049c8:	4654      	mov	r4, sl
 80049ca:	2000      	movs	r0, #0
 80049cc:	f04f 0c0a 	mov.w	ip, #10
 80049d0:	4621      	mov	r1, r4
 80049d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049d6:	3b30      	subs	r3, #48	@ 0x30
 80049d8:	2b09      	cmp	r3, #9
 80049da:	d94b      	bls.n	8004a74 <_svfiprintf_r+0x17c>
 80049dc:	b1b0      	cbz	r0, 8004a0c <_svfiprintf_r+0x114>
 80049de:	9207      	str	r2, [sp, #28]
 80049e0:	e014      	b.n	8004a0c <_svfiprintf_r+0x114>
 80049e2:	eba0 0308 	sub.w	r3, r0, r8
 80049e6:	fa09 f303 	lsl.w	r3, r9, r3
 80049ea:	4313      	orrs	r3, r2
 80049ec:	9304      	str	r3, [sp, #16]
 80049ee:	46a2      	mov	sl, r4
 80049f0:	e7d2      	b.n	8004998 <_svfiprintf_r+0xa0>
 80049f2:	9b03      	ldr	r3, [sp, #12]
 80049f4:	1d19      	adds	r1, r3, #4
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	9103      	str	r1, [sp, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	bfbb      	ittet	lt
 80049fe:	425b      	neglt	r3, r3
 8004a00:	f042 0202 	orrlt.w	r2, r2, #2
 8004a04:	9307      	strge	r3, [sp, #28]
 8004a06:	9307      	strlt	r3, [sp, #28]
 8004a08:	bfb8      	it	lt
 8004a0a:	9204      	strlt	r2, [sp, #16]
 8004a0c:	7823      	ldrb	r3, [r4, #0]
 8004a0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a10:	d10a      	bne.n	8004a28 <_svfiprintf_r+0x130>
 8004a12:	7863      	ldrb	r3, [r4, #1]
 8004a14:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a16:	d132      	bne.n	8004a7e <_svfiprintf_r+0x186>
 8004a18:	9b03      	ldr	r3, [sp, #12]
 8004a1a:	1d1a      	adds	r2, r3, #4
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	9203      	str	r2, [sp, #12]
 8004a20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a24:	3402      	adds	r4, #2
 8004a26:	9305      	str	r3, [sp, #20]
 8004a28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004aec <_svfiprintf_r+0x1f4>
 8004a2c:	7821      	ldrb	r1, [r4, #0]
 8004a2e:	2203      	movs	r2, #3
 8004a30:	4650      	mov	r0, sl
 8004a32:	f7fb fc0d 	bl	8000250 <memchr>
 8004a36:	b138      	cbz	r0, 8004a48 <_svfiprintf_r+0x150>
 8004a38:	9b04      	ldr	r3, [sp, #16]
 8004a3a:	eba0 000a 	sub.w	r0, r0, sl
 8004a3e:	2240      	movs	r2, #64	@ 0x40
 8004a40:	4082      	lsls	r2, r0
 8004a42:	4313      	orrs	r3, r2
 8004a44:	3401      	adds	r4, #1
 8004a46:	9304      	str	r3, [sp, #16]
 8004a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a4c:	4824      	ldr	r0, [pc, #144]	@ (8004ae0 <_svfiprintf_r+0x1e8>)
 8004a4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a52:	2206      	movs	r2, #6
 8004a54:	f7fb fbfc 	bl	8000250 <memchr>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	d036      	beq.n	8004aca <_svfiprintf_r+0x1d2>
 8004a5c:	4b21      	ldr	r3, [pc, #132]	@ (8004ae4 <_svfiprintf_r+0x1ec>)
 8004a5e:	bb1b      	cbnz	r3, 8004aa8 <_svfiprintf_r+0x1b0>
 8004a60:	9b03      	ldr	r3, [sp, #12]
 8004a62:	3307      	adds	r3, #7
 8004a64:	f023 0307 	bic.w	r3, r3, #7
 8004a68:	3308      	adds	r3, #8
 8004a6a:	9303      	str	r3, [sp, #12]
 8004a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a6e:	4433      	add	r3, r6
 8004a70:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a72:	e76a      	b.n	800494a <_svfiprintf_r+0x52>
 8004a74:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a78:	460c      	mov	r4, r1
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	e7a8      	b.n	80049d0 <_svfiprintf_r+0xd8>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	3401      	adds	r4, #1
 8004a82:	9305      	str	r3, [sp, #20]
 8004a84:	4619      	mov	r1, r3
 8004a86:	f04f 0c0a 	mov.w	ip, #10
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a90:	3a30      	subs	r2, #48	@ 0x30
 8004a92:	2a09      	cmp	r2, #9
 8004a94:	d903      	bls.n	8004a9e <_svfiprintf_r+0x1a6>
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0c6      	beq.n	8004a28 <_svfiprintf_r+0x130>
 8004a9a:	9105      	str	r1, [sp, #20]
 8004a9c:	e7c4      	b.n	8004a28 <_svfiprintf_r+0x130>
 8004a9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e7f0      	b.n	8004a8a <_svfiprintf_r+0x192>
 8004aa8:	ab03      	add	r3, sp, #12
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	462a      	mov	r2, r5
 8004aae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae8 <_svfiprintf_r+0x1f0>)
 8004ab0:	a904      	add	r1, sp, #16
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	f3af 8000 	nop.w
 8004ab8:	1c42      	adds	r2, r0, #1
 8004aba:	4606      	mov	r6, r0
 8004abc:	d1d6      	bne.n	8004a6c <_svfiprintf_r+0x174>
 8004abe:	89ab      	ldrh	r3, [r5, #12]
 8004ac0:	065b      	lsls	r3, r3, #25
 8004ac2:	f53f af2d 	bmi.w	8004920 <_svfiprintf_r+0x28>
 8004ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ac8:	e72c      	b.n	8004924 <_svfiprintf_r+0x2c>
 8004aca:	ab03      	add	r3, sp, #12
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	462a      	mov	r2, r5
 8004ad0:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <_svfiprintf_r+0x1f0>)
 8004ad2:	a904      	add	r1, sp, #16
 8004ad4:	4638      	mov	r0, r7
 8004ad6:	f000 f879 	bl	8004bcc <_printf_i>
 8004ada:	e7ed      	b.n	8004ab8 <_svfiprintf_r+0x1c0>
 8004adc:	08004f44 	.word	0x08004f44
 8004ae0:	08004f4e 	.word	0x08004f4e
 8004ae4:	00000000 	.word	0x00000000
 8004ae8:	08004841 	.word	0x08004841
 8004aec:	08004f4a 	.word	0x08004f4a

08004af0 <_printf_common>:
 8004af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af4:	4616      	mov	r6, r2
 8004af6:	4698      	mov	r8, r3
 8004af8:	688a      	ldr	r2, [r1, #8]
 8004afa:	690b      	ldr	r3, [r1, #16]
 8004afc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b00:	4293      	cmp	r3, r2
 8004b02:	bfb8      	it	lt
 8004b04:	4613      	movlt	r3, r2
 8004b06:	6033      	str	r3, [r6, #0]
 8004b08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b0c:	4607      	mov	r7, r0
 8004b0e:	460c      	mov	r4, r1
 8004b10:	b10a      	cbz	r2, 8004b16 <_printf_common+0x26>
 8004b12:	3301      	adds	r3, #1
 8004b14:	6033      	str	r3, [r6, #0]
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	0699      	lsls	r1, r3, #26
 8004b1a:	bf42      	ittt	mi
 8004b1c:	6833      	ldrmi	r3, [r6, #0]
 8004b1e:	3302      	addmi	r3, #2
 8004b20:	6033      	strmi	r3, [r6, #0]
 8004b22:	6825      	ldr	r5, [r4, #0]
 8004b24:	f015 0506 	ands.w	r5, r5, #6
 8004b28:	d106      	bne.n	8004b38 <_printf_common+0x48>
 8004b2a:	f104 0a19 	add.w	sl, r4, #25
 8004b2e:	68e3      	ldr	r3, [r4, #12]
 8004b30:	6832      	ldr	r2, [r6, #0]
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	42ab      	cmp	r3, r5
 8004b36:	dc26      	bgt.n	8004b86 <_printf_common+0x96>
 8004b38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b3c:	6822      	ldr	r2, [r4, #0]
 8004b3e:	3b00      	subs	r3, #0
 8004b40:	bf18      	it	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	0692      	lsls	r2, r2, #26
 8004b46:	d42b      	bmi.n	8004ba0 <_printf_common+0xb0>
 8004b48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	4638      	mov	r0, r7
 8004b50:	47c8      	blx	r9
 8004b52:	3001      	adds	r0, #1
 8004b54:	d01e      	beq.n	8004b94 <_printf_common+0xa4>
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	6922      	ldr	r2, [r4, #16]
 8004b5a:	f003 0306 	and.w	r3, r3, #6
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	bf02      	ittt	eq
 8004b62:	68e5      	ldreq	r5, [r4, #12]
 8004b64:	6833      	ldreq	r3, [r6, #0]
 8004b66:	1aed      	subeq	r5, r5, r3
 8004b68:	68a3      	ldr	r3, [r4, #8]
 8004b6a:	bf0c      	ite	eq
 8004b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b70:	2500      	movne	r5, #0
 8004b72:	4293      	cmp	r3, r2
 8004b74:	bfc4      	itt	gt
 8004b76:	1a9b      	subgt	r3, r3, r2
 8004b78:	18ed      	addgt	r5, r5, r3
 8004b7a:	2600      	movs	r6, #0
 8004b7c:	341a      	adds	r4, #26
 8004b7e:	42b5      	cmp	r5, r6
 8004b80:	d11a      	bne.n	8004bb8 <_printf_common+0xc8>
 8004b82:	2000      	movs	r0, #0
 8004b84:	e008      	b.n	8004b98 <_printf_common+0xa8>
 8004b86:	2301      	movs	r3, #1
 8004b88:	4652      	mov	r2, sl
 8004b8a:	4641      	mov	r1, r8
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	47c8      	blx	r9
 8004b90:	3001      	adds	r0, #1
 8004b92:	d103      	bne.n	8004b9c <_printf_common+0xac>
 8004b94:	f04f 30ff 	mov.w	r0, #4294967295
 8004b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b9c:	3501      	adds	r5, #1
 8004b9e:	e7c6      	b.n	8004b2e <_printf_common+0x3e>
 8004ba0:	18e1      	adds	r1, r4, r3
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	2030      	movs	r0, #48	@ 0x30
 8004ba6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004baa:	4422      	add	r2, r4
 8004bac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bb4:	3302      	adds	r3, #2
 8004bb6:	e7c7      	b.n	8004b48 <_printf_common+0x58>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	4622      	mov	r2, r4
 8004bbc:	4641      	mov	r1, r8
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	47c8      	blx	r9
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	d0e6      	beq.n	8004b94 <_printf_common+0xa4>
 8004bc6:	3601      	adds	r6, #1
 8004bc8:	e7d9      	b.n	8004b7e <_printf_common+0x8e>
	...

08004bcc <_printf_i>:
 8004bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd0:	7e0f      	ldrb	r7, [r1, #24]
 8004bd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004bd4:	2f78      	cmp	r7, #120	@ 0x78
 8004bd6:	4691      	mov	r9, r2
 8004bd8:	4680      	mov	r8, r0
 8004bda:	460c      	mov	r4, r1
 8004bdc:	469a      	mov	sl, r3
 8004bde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004be2:	d807      	bhi.n	8004bf4 <_printf_i+0x28>
 8004be4:	2f62      	cmp	r7, #98	@ 0x62
 8004be6:	d80a      	bhi.n	8004bfe <_printf_i+0x32>
 8004be8:	2f00      	cmp	r7, #0
 8004bea:	f000 80d2 	beq.w	8004d92 <_printf_i+0x1c6>
 8004bee:	2f58      	cmp	r7, #88	@ 0x58
 8004bf0:	f000 80b9 	beq.w	8004d66 <_printf_i+0x19a>
 8004bf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bfc:	e03a      	b.n	8004c74 <_printf_i+0xa8>
 8004bfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c02:	2b15      	cmp	r3, #21
 8004c04:	d8f6      	bhi.n	8004bf4 <_printf_i+0x28>
 8004c06:	a101      	add	r1, pc, #4	@ (adr r1, 8004c0c <_printf_i+0x40>)
 8004c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c0c:	08004c65 	.word	0x08004c65
 8004c10:	08004c79 	.word	0x08004c79
 8004c14:	08004bf5 	.word	0x08004bf5
 8004c18:	08004bf5 	.word	0x08004bf5
 8004c1c:	08004bf5 	.word	0x08004bf5
 8004c20:	08004bf5 	.word	0x08004bf5
 8004c24:	08004c79 	.word	0x08004c79
 8004c28:	08004bf5 	.word	0x08004bf5
 8004c2c:	08004bf5 	.word	0x08004bf5
 8004c30:	08004bf5 	.word	0x08004bf5
 8004c34:	08004bf5 	.word	0x08004bf5
 8004c38:	08004d79 	.word	0x08004d79
 8004c3c:	08004ca3 	.word	0x08004ca3
 8004c40:	08004d33 	.word	0x08004d33
 8004c44:	08004bf5 	.word	0x08004bf5
 8004c48:	08004bf5 	.word	0x08004bf5
 8004c4c:	08004d9b 	.word	0x08004d9b
 8004c50:	08004bf5 	.word	0x08004bf5
 8004c54:	08004ca3 	.word	0x08004ca3
 8004c58:	08004bf5 	.word	0x08004bf5
 8004c5c:	08004bf5 	.word	0x08004bf5
 8004c60:	08004d3b 	.word	0x08004d3b
 8004c64:	6833      	ldr	r3, [r6, #0]
 8004c66:	1d1a      	adds	r2, r3, #4
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6032      	str	r2, [r6, #0]
 8004c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c74:	2301      	movs	r3, #1
 8004c76:	e09d      	b.n	8004db4 <_printf_i+0x1e8>
 8004c78:	6833      	ldr	r3, [r6, #0]
 8004c7a:	6820      	ldr	r0, [r4, #0]
 8004c7c:	1d19      	adds	r1, r3, #4
 8004c7e:	6031      	str	r1, [r6, #0]
 8004c80:	0606      	lsls	r6, r0, #24
 8004c82:	d501      	bpl.n	8004c88 <_printf_i+0xbc>
 8004c84:	681d      	ldr	r5, [r3, #0]
 8004c86:	e003      	b.n	8004c90 <_printf_i+0xc4>
 8004c88:	0645      	lsls	r5, r0, #25
 8004c8a:	d5fb      	bpl.n	8004c84 <_printf_i+0xb8>
 8004c8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c90:	2d00      	cmp	r5, #0
 8004c92:	da03      	bge.n	8004c9c <_printf_i+0xd0>
 8004c94:	232d      	movs	r3, #45	@ 0x2d
 8004c96:	426d      	negs	r5, r5
 8004c98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c9c:	4859      	ldr	r0, [pc, #356]	@ (8004e04 <_printf_i+0x238>)
 8004c9e:	230a      	movs	r3, #10
 8004ca0:	e011      	b.n	8004cc6 <_printf_i+0xfa>
 8004ca2:	6821      	ldr	r1, [r4, #0]
 8004ca4:	6833      	ldr	r3, [r6, #0]
 8004ca6:	0608      	lsls	r0, r1, #24
 8004ca8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004cac:	d402      	bmi.n	8004cb4 <_printf_i+0xe8>
 8004cae:	0649      	lsls	r1, r1, #25
 8004cb0:	bf48      	it	mi
 8004cb2:	b2ad      	uxthmi	r5, r5
 8004cb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cb6:	4853      	ldr	r0, [pc, #332]	@ (8004e04 <_printf_i+0x238>)
 8004cb8:	6033      	str	r3, [r6, #0]
 8004cba:	bf14      	ite	ne
 8004cbc:	230a      	movne	r3, #10
 8004cbe:	2308      	moveq	r3, #8
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cc6:	6866      	ldr	r6, [r4, #4]
 8004cc8:	60a6      	str	r6, [r4, #8]
 8004cca:	2e00      	cmp	r6, #0
 8004ccc:	bfa2      	ittt	ge
 8004cce:	6821      	ldrge	r1, [r4, #0]
 8004cd0:	f021 0104 	bicge.w	r1, r1, #4
 8004cd4:	6021      	strge	r1, [r4, #0]
 8004cd6:	b90d      	cbnz	r5, 8004cdc <_printf_i+0x110>
 8004cd8:	2e00      	cmp	r6, #0
 8004cda:	d04b      	beq.n	8004d74 <_printf_i+0x1a8>
 8004cdc:	4616      	mov	r6, r2
 8004cde:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ce2:	fb03 5711 	mls	r7, r3, r1, r5
 8004ce6:	5dc7      	ldrb	r7, [r0, r7]
 8004ce8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cec:	462f      	mov	r7, r5
 8004cee:	42bb      	cmp	r3, r7
 8004cf0:	460d      	mov	r5, r1
 8004cf2:	d9f4      	bls.n	8004cde <_printf_i+0x112>
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d10b      	bne.n	8004d10 <_printf_i+0x144>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	07df      	lsls	r7, r3, #31
 8004cfc:	d508      	bpl.n	8004d10 <_printf_i+0x144>
 8004cfe:	6923      	ldr	r3, [r4, #16]
 8004d00:	6861      	ldr	r1, [r4, #4]
 8004d02:	4299      	cmp	r1, r3
 8004d04:	bfde      	ittt	le
 8004d06:	2330      	movle	r3, #48	@ 0x30
 8004d08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d10:	1b92      	subs	r2, r2, r6
 8004d12:	6122      	str	r2, [r4, #16]
 8004d14:	f8cd a000 	str.w	sl, [sp]
 8004d18:	464b      	mov	r3, r9
 8004d1a:	aa03      	add	r2, sp, #12
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	4640      	mov	r0, r8
 8004d20:	f7ff fee6 	bl	8004af0 <_printf_common>
 8004d24:	3001      	adds	r0, #1
 8004d26:	d14a      	bne.n	8004dbe <_printf_i+0x1f2>
 8004d28:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2c:	b004      	add	sp, #16
 8004d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	f043 0320 	orr.w	r3, r3, #32
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	4833      	ldr	r0, [pc, #204]	@ (8004e08 <_printf_i+0x23c>)
 8004d3c:	2778      	movs	r7, #120	@ 0x78
 8004d3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	6831      	ldr	r1, [r6, #0]
 8004d46:	061f      	lsls	r7, r3, #24
 8004d48:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d4c:	d402      	bmi.n	8004d54 <_printf_i+0x188>
 8004d4e:	065f      	lsls	r7, r3, #25
 8004d50:	bf48      	it	mi
 8004d52:	b2ad      	uxthmi	r5, r5
 8004d54:	6031      	str	r1, [r6, #0]
 8004d56:	07d9      	lsls	r1, r3, #31
 8004d58:	bf44      	itt	mi
 8004d5a:	f043 0320 	orrmi.w	r3, r3, #32
 8004d5e:	6023      	strmi	r3, [r4, #0]
 8004d60:	b11d      	cbz	r5, 8004d6a <_printf_i+0x19e>
 8004d62:	2310      	movs	r3, #16
 8004d64:	e7ac      	b.n	8004cc0 <_printf_i+0xf4>
 8004d66:	4827      	ldr	r0, [pc, #156]	@ (8004e04 <_printf_i+0x238>)
 8004d68:	e7e9      	b.n	8004d3e <_printf_i+0x172>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	f023 0320 	bic.w	r3, r3, #32
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	e7f6      	b.n	8004d62 <_printf_i+0x196>
 8004d74:	4616      	mov	r6, r2
 8004d76:	e7bd      	b.n	8004cf4 <_printf_i+0x128>
 8004d78:	6833      	ldr	r3, [r6, #0]
 8004d7a:	6825      	ldr	r5, [r4, #0]
 8004d7c:	6961      	ldr	r1, [r4, #20]
 8004d7e:	1d18      	adds	r0, r3, #4
 8004d80:	6030      	str	r0, [r6, #0]
 8004d82:	062e      	lsls	r6, r5, #24
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	d501      	bpl.n	8004d8c <_printf_i+0x1c0>
 8004d88:	6019      	str	r1, [r3, #0]
 8004d8a:	e002      	b.n	8004d92 <_printf_i+0x1c6>
 8004d8c:	0668      	lsls	r0, r5, #25
 8004d8e:	d5fb      	bpl.n	8004d88 <_printf_i+0x1bc>
 8004d90:	8019      	strh	r1, [r3, #0]
 8004d92:	2300      	movs	r3, #0
 8004d94:	6123      	str	r3, [r4, #16]
 8004d96:	4616      	mov	r6, r2
 8004d98:	e7bc      	b.n	8004d14 <_printf_i+0x148>
 8004d9a:	6833      	ldr	r3, [r6, #0]
 8004d9c:	1d1a      	adds	r2, r3, #4
 8004d9e:	6032      	str	r2, [r6, #0]
 8004da0:	681e      	ldr	r6, [r3, #0]
 8004da2:	6862      	ldr	r2, [r4, #4]
 8004da4:	2100      	movs	r1, #0
 8004da6:	4630      	mov	r0, r6
 8004da8:	f7fb fa52 	bl	8000250 <memchr>
 8004dac:	b108      	cbz	r0, 8004db2 <_printf_i+0x1e6>
 8004dae:	1b80      	subs	r0, r0, r6
 8004db0:	6060      	str	r0, [r4, #4]
 8004db2:	6863      	ldr	r3, [r4, #4]
 8004db4:	6123      	str	r3, [r4, #16]
 8004db6:	2300      	movs	r3, #0
 8004db8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dbc:	e7aa      	b.n	8004d14 <_printf_i+0x148>
 8004dbe:	6923      	ldr	r3, [r4, #16]
 8004dc0:	4632      	mov	r2, r6
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	4640      	mov	r0, r8
 8004dc6:	47d0      	blx	sl
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d0ad      	beq.n	8004d28 <_printf_i+0x15c>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	079b      	lsls	r3, r3, #30
 8004dd0:	d413      	bmi.n	8004dfa <_printf_i+0x22e>
 8004dd2:	68e0      	ldr	r0, [r4, #12]
 8004dd4:	9b03      	ldr	r3, [sp, #12]
 8004dd6:	4298      	cmp	r0, r3
 8004dd8:	bfb8      	it	lt
 8004dda:	4618      	movlt	r0, r3
 8004ddc:	e7a6      	b.n	8004d2c <_printf_i+0x160>
 8004dde:	2301      	movs	r3, #1
 8004de0:	4632      	mov	r2, r6
 8004de2:	4649      	mov	r1, r9
 8004de4:	4640      	mov	r0, r8
 8004de6:	47d0      	blx	sl
 8004de8:	3001      	adds	r0, #1
 8004dea:	d09d      	beq.n	8004d28 <_printf_i+0x15c>
 8004dec:	3501      	adds	r5, #1
 8004dee:	68e3      	ldr	r3, [r4, #12]
 8004df0:	9903      	ldr	r1, [sp, #12]
 8004df2:	1a5b      	subs	r3, r3, r1
 8004df4:	42ab      	cmp	r3, r5
 8004df6:	dcf2      	bgt.n	8004dde <_printf_i+0x212>
 8004df8:	e7eb      	b.n	8004dd2 <_printf_i+0x206>
 8004dfa:	2500      	movs	r5, #0
 8004dfc:	f104 0619 	add.w	r6, r4, #25
 8004e00:	e7f5      	b.n	8004dee <_printf_i+0x222>
 8004e02:	bf00      	nop
 8004e04:	08004f55 	.word	0x08004f55
 8004e08:	08004f66 	.word	0x08004f66

08004e0c <memmove>:
 8004e0c:	4288      	cmp	r0, r1
 8004e0e:	b510      	push	{r4, lr}
 8004e10:	eb01 0402 	add.w	r4, r1, r2
 8004e14:	d902      	bls.n	8004e1c <memmove+0x10>
 8004e16:	4284      	cmp	r4, r0
 8004e18:	4623      	mov	r3, r4
 8004e1a:	d807      	bhi.n	8004e2c <memmove+0x20>
 8004e1c:	1e43      	subs	r3, r0, #1
 8004e1e:	42a1      	cmp	r1, r4
 8004e20:	d008      	beq.n	8004e34 <memmove+0x28>
 8004e22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e2a:	e7f8      	b.n	8004e1e <memmove+0x12>
 8004e2c:	4402      	add	r2, r0
 8004e2e:	4601      	mov	r1, r0
 8004e30:	428a      	cmp	r2, r1
 8004e32:	d100      	bne.n	8004e36 <memmove+0x2a>
 8004e34:	bd10      	pop	{r4, pc}
 8004e36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e3e:	e7f7      	b.n	8004e30 <memmove+0x24>

08004e40 <_sbrk_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4d06      	ldr	r5, [pc, #24]	@ (8004e5c <_sbrk_r+0x1c>)
 8004e44:	2300      	movs	r3, #0
 8004e46:	4604      	mov	r4, r0
 8004e48:	4608      	mov	r0, r1
 8004e4a:	602b      	str	r3, [r5, #0]
 8004e4c:	f7fc f8fa 	bl	8001044 <_sbrk>
 8004e50:	1c43      	adds	r3, r0, #1
 8004e52:	d102      	bne.n	8004e5a <_sbrk_r+0x1a>
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	b103      	cbz	r3, 8004e5a <_sbrk_r+0x1a>
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
 8004e5c:	20000250 	.word	0x20000250

08004e60 <memcpy>:
 8004e60:	440a      	add	r2, r1
 8004e62:	4291      	cmp	r1, r2
 8004e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e68:	d100      	bne.n	8004e6c <memcpy+0xc>
 8004e6a:	4770      	bx	lr
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e76:	4291      	cmp	r1, r2
 8004e78:	d1f9      	bne.n	8004e6e <memcpy+0xe>
 8004e7a:	bd10      	pop	{r4, pc}

08004e7c <_realloc_r>:
 8004e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e80:	4680      	mov	r8, r0
 8004e82:	4615      	mov	r5, r2
 8004e84:	460c      	mov	r4, r1
 8004e86:	b921      	cbnz	r1, 8004e92 <_realloc_r+0x16>
 8004e88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	f7ff bc4b 	b.w	8004728 <_malloc_r>
 8004e92:	b92a      	cbnz	r2, 8004ea0 <_realloc_r+0x24>
 8004e94:	f7ff fbdc 	bl	8004650 <_free_r>
 8004e98:	2400      	movs	r4, #0
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea0:	f000 f81a 	bl	8004ed8 <_malloc_usable_size_r>
 8004ea4:	4285      	cmp	r5, r0
 8004ea6:	4606      	mov	r6, r0
 8004ea8:	d802      	bhi.n	8004eb0 <_realloc_r+0x34>
 8004eaa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004eae:	d8f4      	bhi.n	8004e9a <_realloc_r+0x1e>
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	4640      	mov	r0, r8
 8004eb4:	f7ff fc38 	bl	8004728 <_malloc_r>
 8004eb8:	4607      	mov	r7, r0
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	d0ec      	beq.n	8004e98 <_realloc_r+0x1c>
 8004ebe:	42b5      	cmp	r5, r6
 8004ec0:	462a      	mov	r2, r5
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	bf28      	it	cs
 8004ec6:	4632      	movcs	r2, r6
 8004ec8:	f7ff ffca 	bl	8004e60 <memcpy>
 8004ecc:	4621      	mov	r1, r4
 8004ece:	4640      	mov	r0, r8
 8004ed0:	f7ff fbbe 	bl	8004650 <_free_r>
 8004ed4:	463c      	mov	r4, r7
 8004ed6:	e7e0      	b.n	8004e9a <_realloc_r+0x1e>

08004ed8 <_malloc_usable_size_r>:
 8004ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004edc:	1f18      	subs	r0, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	bfbc      	itt	lt
 8004ee2:	580b      	ldrlt	r3, [r1, r0]
 8004ee4:	18c0      	addlt	r0, r0, r3
 8004ee6:	4770      	bx	lr

08004ee8 <_init>:
 8004ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eea:	bf00      	nop
 8004eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eee:	bc08      	pop	{r3}
 8004ef0:	469e      	mov	lr, r3
 8004ef2:	4770      	bx	lr

08004ef4 <_fini>:
 8004ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef6:	bf00      	nop
 8004ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004efa:	bc08      	pop	{r3}
 8004efc:	469e      	mov	lr, r3
 8004efe:	4770      	bx	lr
