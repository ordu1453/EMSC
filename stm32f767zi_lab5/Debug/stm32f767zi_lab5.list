
stm32f767zi_lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ae4  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002cdc  08002cdc  00003cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cec  08002cec  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002cec  08002cec  00003cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cf4  08002cf4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cf4  08002cf4  00003cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002cf8  08002cf8  00003cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002cfc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08002d08  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002d08  000040ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a8a  00000000  00000000  0000403a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001787  00000000  00000000  0000bac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0000d250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000593  00000000  00000000  0000d9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d3e  00000000  00000000  0000df5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089c6  00000000  00000000  00033c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea4f9  00000000  00000000  0003c65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126b58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d24  00000000  00000000  00126b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001288c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002cc4 	.word	0x08002cc4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002cc4 	.word	0x08002cc4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <writeRegister>:
* @address: 8-bit address of register
* @value  : 8-bit value of corresponding register
* Since the register values to be written are 8-bit, there is no need to multiple writing
*/
void writeRegister(uint8_t address,uint8_t value)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	460a      	mov	r2, r1
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	4613      	mov	r3, r2
 8000536:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b3f      	cmp	r3, #63	@ 0x3f
 800053c:	d901      	bls.n	8000542 <writeRegister+0x1a>
		address = 63;
 800053e:	233f      	movs	r3, #63	@ 0x3f
 8000540:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
    address &= ~(0x80);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000548:	b2db      	uxtb	r3, r3
 800054a:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000552:	480c      	ldr	r0, [pc, #48]	@ (8000584 <writeRegister+0x5c>)
 8000554:	f000 ff48 	bl	80013e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000558:	1df9      	adds	r1, r7, #7
 800055a:	230a      	movs	r3, #10
 800055c:	2201      	movs	r2, #1
 800055e:	480a      	ldr	r0, [pc, #40]	@ (8000588 <writeRegister+0x60>)
 8000560:	f001 fccf 	bl	8001f02 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,&value,1,10);
 8000564:	1db9      	adds	r1, r7, #6
 8000566:	230a      	movs	r3, #10
 8000568:	2201      	movs	r2, #1
 800056a:	4807      	ldr	r0, [pc, #28]	@ (8000588 <writeRegister+0x60>)
 800056c:	f001 fcc9 	bl	8001f02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000576:	4803      	ldr	r0, [pc, #12]	@ (8000584 <writeRegister+0x5c>)
 8000578:	f000 ff36 	bl	80013e8 <HAL_GPIO_WritePin>
	

}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40020c00 	.word	0x40020c00
 8000588:	20000028 	.word	0x20000028

0800058c <readRegister>:
* @retval value  : array of 8-bit values of corresponding register
* @num		: number of bytes to be written
*/

void readRegister(uint8_t address,uint8_t * value, uint8_t num)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	6039      	str	r1, [r7, #0]
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	4613      	mov	r3, r2
 800059a:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	2b3f      	cmp	r3, #63	@ 0x3f
 80005a0:	d901      	bls.n	80005a6 <readRegister+0x1a>
		address = 63;
 80005a2:	233f      	movs	r3, #63	@ 0x3f
 80005a4:	71fb      	strb	r3, [r7, #7]
		
		// Multiple Byte Read Settings
		if (num > 1)
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d905      	bls.n	80005b8 <readRegister+0x2c>
		address |= 0x40;
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	71fb      	strb	r3, [r7, #7]
 80005b6:	e004      	b.n	80005c2 <readRegister+0x36>
		else	
		address &= ~(0x40);
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
    address |= (0x80);		
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	71fb      	strb	r3, [r7, #7]
		
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005d2:	480d      	ldr	r0, [pc, #52]	@ (8000608 <readRegister+0x7c>)
 80005d4:	f000 ff08 	bl	80013e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 80005d8:	1df9      	adds	r1, r7, #7
 80005da:	230a      	movs	r3, #10
 80005dc:	2201      	movs	r2, #1
 80005de:	480b      	ldr	r0, [pc, #44]	@ (800060c <readRegister+0x80>)
 80005e0:	f001 fc8f 	bl	8001f02 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,10);
 80005e4:	79bb      	ldrb	r3, [r7, #6]
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	230a      	movs	r3, #10
 80005ea:	6839      	ldr	r1, [r7, #0]
 80005ec:	4807      	ldr	r0, [pc, #28]	@ (800060c <readRegister+0x80>)
 80005ee:	f001 fdf6 	bl	80021de <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005f8:	4803      	ldr	r0, [pc, #12]	@ (8000608 <readRegister+0x7c>)
 80005fa:	f000 fef5 	bl	80013e8 <HAL_GPIO_WritePin>
	
	
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40020c00 	.word	0x40020c00
 800060c:	20000028 	.word	0x20000028

08000610 <ADXL_enableSingleTap>:
* @param Threshold: The threshold value for tap interrupt. The scale factor is 62.5 mg/LSB. Should not be 0!
*/

void ADXL_enableSingleTap(ADXL_IntOutput out, uint8_t axes, uint8_t Duration, uint8_t Threshold)
	
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	4604      	mov	r4, r0
 8000618:	4608      	mov	r0, r1
 800061a:	4611      	mov	r1, r2
 800061c:	461a      	mov	r2, r3
 800061e:	4623      	mov	r3, r4
 8000620:	71fb      	strb	r3, [r7, #7]
 8000622:	4603      	mov	r3, r0
 8000624:	71bb      	strb	r3, [r7, #6]
 8000626:	460b      	mov	r3, r1
 8000628:	717b      	strb	r3, [r7, #5]
 800062a:	4613      	mov	r3, r2
 800062c:	713b      	strb	r3, [r7, #4]
	uint8_t reg=0;
 800062e:	2300      	movs	r3, #0
 8000630:	73fb      	strb	r3, [r7, #15]
	
	writeRegister(DUR,Duration);
 8000632:	797b      	ldrb	r3, [r7, #5]
 8000634:	4619      	mov	r1, r3
 8000636:	2021      	movs	r0, #33	@ 0x21
 8000638:	f7ff ff76 	bl	8000528 <writeRegister>
	writeRegister(THRESH_TAP,Threshold);
 800063c:	793b      	ldrb	r3, [r7, #4]
 800063e:	4619      	mov	r1, r3
 8000640:	201d      	movs	r0, #29
 8000642:	f7ff ff71 	bl	8000528 <writeRegister>
	
	//Setting the Axes
	readRegister(TAP_AXES,&reg,1);
 8000646:	f107 030f 	add.w	r3, r7, #15
 800064a:	2201      	movs	r2, #1
 800064c:	4619      	mov	r1, r3
 800064e:	202a      	movs	r0, #42	@ 0x2a
 8000650:	f7ff ff9c 	bl	800058c <readRegister>
	reg |= axes;
 8000654:	7bfa      	ldrb	r2, [r7, #15]
 8000656:	79bb      	ldrb	r3, [r7, #6]
 8000658:	4313      	orrs	r3, r2
 800065a:	b2db      	uxtb	r3, r3
 800065c:	73fb      	strb	r3, [r7, #15]
	
	writeRegister(TAP_AXES,reg);
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	4619      	mov	r1, r3
 8000662:	202a      	movs	r0, #42	@ 0x2a
 8000664:	f7ff ff60 	bl	8000528 <writeRegister>
	
	// Settings Int output
	readRegister(INT_MAP,&reg,1);
 8000668:	f107 030f 	add.w	r3, r7, #15
 800066c:	2201      	movs	r2, #1
 800066e:	4619      	mov	r1, r3
 8000670:	202f      	movs	r0, #47	@ 0x2f
 8000672:	f7ff ff8b 	bl	800058c <readRegister>
	if (out == INT1) reg &= ~(1<<6); else reg |= (1<<6);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d105      	bne.n	8000688 <ADXL_enableSingleTap+0x78>
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000682:	b2db      	uxtb	r3, r3
 8000684:	73fb      	strb	r3, [r7, #15]
 8000686:	e004      	b.n	8000692 <ADXL_enableSingleTap+0x82>
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800068e:	b2db      	uxtb	r3, r3
 8000690:	73fb      	strb	r3, [r7, #15]
	writeRegister(INT_MAP,reg);
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	4619      	mov	r1, r3
 8000696:	202f      	movs	r0, #47	@ 0x2f
 8000698:	f7ff ff46 	bl	8000528 <writeRegister>
	
	// Enabling the TAP interrupt
	readRegister(INT_ENABLE,&reg,1);
 800069c:	f107 030f 	add.w	r3, r7, #15
 80006a0:	2201      	movs	r2, #1
 80006a2:	4619      	mov	r1, r3
 80006a4:	202e      	movs	r0, #46	@ 0x2e
 80006a6:	f7ff ff71 	bl	800058c <readRegister>
	reg |= (1<<6);
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	73fb      	strb	r3, [r7, #15]
	writeRegister(INT_ENABLE,reg);
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	4619      	mov	r1, r3
 80006b8:	202e      	movs	r0, #46	@ 0x2e
 80006ba:	f7ff ff35 	bl	8000528 <writeRegister>
	
}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd90      	pop	{r4, r7, pc}

080006c6 <ADXL_disableSingleTap>:

*/

void ADXL_disableSingleTap(void)
	
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
	uint8_t reg=0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	71fb      	strb	r3, [r7, #7]
	// Disabling the TAP interrupt
	readRegister(INT_ENABLE,&reg,1);
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	2201      	movs	r2, #1
 80006d4:	4619      	mov	r1, r3
 80006d6:	202e      	movs	r0, #46	@ 0x2e
 80006d8:	f7ff ff58 	bl	800058c <readRegister>
	reg &= ~(1<<6);
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	71fb      	strb	r3, [r7, #7]
	writeRegister(INT_ENABLE,reg);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	4619      	mov	r1, r3
 80006ea:	202e      	movs	r0, #46	@ 0x2e
 80006ec:	f7ff ff1c 	bl	8000528 <writeRegister>
	
	
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <adxl_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void adxl_write (uint8_t address, uint8_t value)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	460a      	mov	r2, r1
 8000702:	71fb      	strb	r3, [r7, #7]
 8000704:	4613      	mov	r3, r2
 8000706:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = address|0x40; // multibyte write
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800070e:	b2db      	uxtb	r3, r3
 8000710:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000712:	79bb      	ldrb	r3, [r7, #6]
 8000714:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin (SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET); // pull the cs pin low
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800071c:	4809      	ldr	r0, [pc, #36]	@ (8000744 <adxl_write+0x4c>)
 800071e:	f000 fe63 	bl	80013e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, data, 2, 100); // write data to register
 8000722:	f107 010c 	add.w	r1, r7, #12
 8000726:	2364      	movs	r3, #100	@ 0x64
 8000728:	2202      	movs	r2, #2
 800072a:	4807      	ldr	r0, [pc, #28]	@ (8000748 <adxl_write+0x50>)
 800072c:	f001 fbe9 	bl	8001f02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET); // pull the cs pin high
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000736:	4803      	ldr	r0, [pc, #12]	@ (8000744 <adxl_write+0x4c>)
 8000738:	f000 fe56 	bl	80013e8 <HAL_GPIO_WritePin>
}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40020c00 	.word	0x40020c00
 8000748:	20000028 	.word	0x20000028

0800074c <adxl_read>:

void adxl_read (uint8_t address)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	address |= 0x80; // read operation
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800075c:	b2db      	uxtb	r3, r3
 800075e:	71fb      	strb	r3, [r7, #7]
	address |= 0x40; // multibyte read
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000766:	b2db      	uxtb	r3, r3
 8000768:	71fb      	strb	r3, [r7, #7]
	//uint8_t rec;
	HAL_GPIO_WritePin (SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET); // pull the pin low
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000770:	480c      	ldr	r0, [pc, #48]	@ (80007a4 <adxl_read+0x58>)
 8000772:	f000 fe39 	bl	80013e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, &address, 1, 100); // send address
 8000776:	1df9      	adds	r1, r7, #7
 8000778:	2364      	movs	r3, #100	@ 0x64
 800077a:	2201      	movs	r2, #1
 800077c:	480a      	ldr	r0, [pc, #40]	@ (80007a8 <adxl_read+0x5c>)
 800077e:	f001 fbc0 	bl	8001f02 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi1, data_rec, 6, 100); // receive 6 bytes data
 8000782:	2364      	movs	r3, #100	@ 0x64
 8000784:	2206      	movs	r2, #6
 8000786:	4909      	ldr	r1, [pc, #36]	@ (80007ac <adxl_read+0x60>)
 8000788:	4807      	ldr	r0, [pc, #28]	@ (80007a8 <adxl_read+0x5c>)
 800078a:	f001 fd28 	bl	80021de <HAL_SPI_Receive>
	HAL_GPIO_WritePin (SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET); // pull the pin high
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000794:	4803      	ldr	r0, [pc, #12]	@ (80007a4 <adxl_read+0x58>)
 8000796:	f000 fe27 	bl	80013e8 <HAL_GPIO_WritePin>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40020c00 	.word	0x40020c00
 80007a8:	20000028 	.word	0x20000028
 80007ac:	2000008c 	.word	0x2000008c

080007b0 <adxl_init>:

void adxl_init (void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	adxl_write (0x2d, 0x00); // reset all bits
 80007b4:	2100      	movs	r1, #0
 80007b6:	202d      	movs	r0, #45	@ 0x2d
 80007b8:	f7ff ff9e 	bl	80006f8 <adxl_write>
	adxl_write (0x2d, 0x08); // power_cntl measure
 80007bc:	2108      	movs	r1, #8
 80007be:	202d      	movs	r0, #45	@ 0x2d
 80007c0:	f7ff ff9a 	bl	80006f8 <adxl_write>
	adxl_write (0x31, 0x01); // data_format range= +- 4g
 80007c4:	2101      	movs	r1, #1
 80007c6:	2031      	movs	r0, #49	@ 0x31
 80007c8:	f7ff ff96 	bl	80006f8 <adxl_write>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <adxl_read_1byte>:

void adxl_read_1byte (uint8_t address)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
	address |= 0x80; // read operation
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	71fb      	strb	r3, [r7, #7]
	address |= 0x40; // multibyte read
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin (SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET); // pull the pin low
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007f4:	480c      	ldr	r0, [pc, #48]	@ (8000828 <adxl_read_1byte+0x58>)
 80007f6:	f000 fdf7 	bl	80013e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, &address, 1, 100); // send address
 80007fa:	1df9      	adds	r1, r7, #7
 80007fc:	2364      	movs	r3, #100	@ 0x64
 80007fe:	2201      	movs	r2, #1
 8000800:	480a      	ldr	r0, [pc, #40]	@ (800082c <adxl_read_1byte+0x5c>)
 8000802:	f001 fb7e 	bl	8001f02 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi1, rec, 1, 100); // receive 1 byte data
 8000806:	2364      	movs	r3, #100	@ 0x64
 8000808:	2201      	movs	r2, #1
 800080a:	4909      	ldr	r1, [pc, #36]	@ (8000830 <adxl_read_1byte+0x60>)
 800080c:	4807      	ldr	r0, [pc, #28]	@ (800082c <adxl_read_1byte+0x5c>)
 800080e:	f001 fce6 	bl	80021de <HAL_SPI_Receive>
	HAL_GPIO_WritePin (SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET); // pull the pin high
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000818:	4803      	ldr	r0, [pc, #12]	@ (8000828 <adxl_read_1byte+0x58>)
 800081a:	f000 fde5 	bl	80013e8 <HAL_GPIO_WritePin>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40020c00 	.word	0x40020c00
 800082c:	20000028 	.word	0x20000028
 8000830:	200000a4 	.word	0x200000a4

08000834 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == INT2_Pin)
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d114      	bne.n	800086e <HAL_GPIO_EXTI_Callback+0x3a>
	{
		tap = !tap;
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <HAL_GPIO_EXTI_Callback+0x44>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	bf0c      	ite	eq
 800084c:	2301      	moveq	r3, #1
 800084e:	2300      	movne	r3, #0
 8000850:	b2db      	uxtb	r3, r3
 8000852:	461a      	mov	r2, r3
 8000854:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <HAL_GPIO_EXTI_Callback+0x44>)
 8000856:	701a      	strb	r2, [r3, #0]
		adxl_read_1byte (0x30);
 8000858:	2030      	movs	r0, #48	@ 0x30
 800085a:	f7ff ffb9 	bl	80007d0 <adxl_read_1byte>
		ADXL_disableSingleTap();
 800085e:	f7ff ff32 	bl	80006c6 <ADXL_disableSingleTap>
		ADXL_enableSingleTap(INT2, X_axes, 100, 20);
 8000862:	2314      	movs	r3, #20
 8000864:	2264      	movs	r2, #100	@ 0x64
 8000866:	2104      	movs	r1, #4
 8000868:	2001      	movs	r0, #1
 800086a:	f7ff fed1 	bl	8000610 <ADXL_enableSingleTap>
		//readRegister (0x30, &rec, 1);
		//adxl_read(0x30);
	}
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000a7 	.word	0x200000a7

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000880:	f000 fa73 	bl	8000d6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000884:	f000 f880 	bl	8000988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000888:	f000 f92c 	bl	8000ae4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800088c:	f000 f8ec 	bl	8000a68 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  adxl_init(); // initialise adxl
 8000890:	f7ff ff8e 	bl	80007b0 <adxl_init>
  //ADXL_Init(&ADXL);
  adxl_read (0x00); // who i am
 8000894:	2000      	movs	r0, #0
 8000896:	f7ff ff59 	bl	800074c <adxl_read>
  ADXL_enableSingleTap(INT2, X_axes, 100, 20);
 800089a:	2314      	movs	r3, #20
 800089c:	2264      	movs	r2, #100	@ 0x64
 800089e:	2104      	movs	r1, #4
 80008a0:	2001      	movs	r0, #1
 80008a2:	f7ff feb5 	bl	8000610 <ADXL_enableSingleTap>
//  adxl_write(TAP_AXES, 0x5);// enable TAP_X
//  adxl_write(0x1D, 1);//threshhold of tap
  adxl_write(0x2E, 0x40);
 80008a6:	2140      	movs	r1, #64	@ 0x40
 80008a8:	202e      	movs	r0, #46	@ 0x2e
 80008aa:	f7ff ff25 	bl	80006f8 <adxl_write>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  adxl_read (0x32);
 80008ae:	2032      	movs	r0, #50	@ 0x32
 80008b0:	f7ff ff4c 	bl	800074c <adxl_read>
	  x = ((data_rec[1]<<8)|data_rec[0]);
 80008b4:	4b2d      	ldr	r3, [pc, #180]	@ (800096c <main+0xf0>)
 80008b6:	785b      	ldrb	r3, [r3, #1]
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	4b2b      	ldr	r3, [pc, #172]	@ (800096c <main+0xf0>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	4313      	orrs	r3, r2
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000970 <main+0xf4>)
 80008c8:	801a      	strh	r2, [r3, #0]
	  y = ((data_rec[3]<<8)|data_rec[2]);
 80008ca:	4b28      	ldr	r3, [pc, #160]	@ (800096c <main+0xf0>)
 80008cc:	78db      	ldrb	r3, [r3, #3]
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	b21a      	sxth	r2, r3
 80008d2:	4b26      	ldr	r3, [pc, #152]	@ (800096c <main+0xf0>)
 80008d4:	789b      	ldrb	r3, [r3, #2]
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	4313      	orrs	r3, r2
 80008da:	b21a      	sxth	r2, r3
 80008dc:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <main+0xf8>)
 80008de:	801a      	strh	r2, [r3, #0]
	  z = ((data_rec[5]<<8)|data_rec[4]);
 80008e0:	4b22      	ldr	r3, [pc, #136]	@ (800096c <main+0xf0>)
 80008e2:	795b      	ldrb	r3, [r3, #5]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	4b20      	ldr	r3, [pc, #128]	@ (800096c <main+0xf0>)
 80008ea:	791b      	ldrb	r3, [r3, #4]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <main+0xfc>)
 80008f4:	801a      	strh	r2, [r3, #0]
	  xg = x*100/128;
 80008f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000970 <main+0xf4>)
 80008f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008fc:	461a      	mov	r2, r3
 80008fe:	2364      	movs	r3, #100	@ 0x64
 8000900:	fb02 f303 	mul.w	r3, r2, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	da00      	bge.n	800090a <main+0x8e>
 8000908:	337f      	adds	r3, #127	@ 0x7f
 800090a:	11db      	asrs	r3, r3, #7
 800090c:	ee07 3a90 	vmov	s15, r3
 8000910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000914:	4b19      	ldr	r3, [pc, #100]	@ (800097c <main+0x100>)
 8000916:	edc3 7a00 	vstr	s15, [r3]
	  yg = y*100/128;
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <main+0xf8>)
 800091c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000920:	461a      	mov	r2, r3
 8000922:	2364      	movs	r3, #100	@ 0x64
 8000924:	fb02 f303 	mul.w	r3, r2, r3
 8000928:	2b00      	cmp	r3, #0
 800092a:	da00      	bge.n	800092e <main+0xb2>
 800092c:	337f      	adds	r3, #127	@ 0x7f
 800092e:	11db      	asrs	r3, r3, #7
 8000930:	ee07 3a90 	vmov	s15, r3
 8000934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <main+0x104>)
 800093a:	edc3 7a00 	vstr	s15, [r3]
	  zg = z*100/128;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <main+0xfc>)
 8000940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000944:	461a      	mov	r2, r3
 8000946:	2364      	movs	r3, #100	@ 0x64
 8000948:	fb02 f303 	mul.w	r3, r2, r3
 800094c:	2b00      	cmp	r3, #0
 800094e:	da00      	bge.n	8000952 <main+0xd6>
 8000950:	337f      	adds	r3, #127	@ 0x7f
 8000952:	11db      	asrs	r3, r3, #7
 8000954:	ee07 3a90 	vmov	s15, r3
 8000958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800095c:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <main+0x108>)
 800095e:	edc3 7a00 	vstr	s15, [r3]
//	  {
//		  tap = 1;
//	  }
//	  x = data_rec[0]&&0b001;
//	  z = data_rec[0]&&0b100;
	  HAL_Delay(200);
 8000962:	20c8      	movs	r0, #200	@ 0xc8
 8000964:	f000 fa5e 	bl	8000e24 <HAL_Delay>
	  adxl_read (0x32);
 8000968:	bf00      	nop
 800096a:	e7a0      	b.n	80008ae <main+0x32>
 800096c:	2000008c 	.word	0x2000008c
 8000970:	20000092 	.word	0x20000092
 8000974:	20000094 	.word	0x20000094
 8000978:	20000096 	.word	0x20000096
 800097c:	20000098 	.word	0x20000098
 8000980:	2000009c 	.word	0x2000009c
 8000984:	200000a0 	.word	0x200000a0

08000988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b094      	sub	sp, #80	@ 0x50
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	2234      	movs	r2, #52	@ 0x34
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f002 f968 	bl	8002c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000a60 <SystemClock_Config+0xd8>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b0:	4a2b      	ldr	r2, [pc, #172]	@ (8000a60 <SystemClock_Config+0xd8>)
 80009b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b8:	4b29      	ldr	r3, [pc, #164]	@ (8000a60 <SystemClock_Config+0xd8>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009c4:	4b27      	ldr	r3, [pc, #156]	@ (8000a64 <SystemClock_Config+0xdc>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009cc:	4a25      	ldr	r2, [pc, #148]	@ (8000a64 <SystemClock_Config+0xdc>)
 80009ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	4b23      	ldr	r3, [pc, #140]	@ (8000a64 <SystemClock_Config+0xdc>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e4:	2301      	movs	r3, #1
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e8:	2310      	movs	r3, #16
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
 80009ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f0:	2300      	movs	r3, #0
 80009f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009f4:	2310      	movs	r3, #16
 80009f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80009f8:	23c0      	movs	r3, #192	@ 0xc0
 80009fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 fd6d 	bl	80014ec <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a18:	f000 f8c8 	bl	8000bac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a1c:	f000 fd16 	bl	800144c <HAL_PWREx_EnableOverDrive>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a26:	f000 f8c1 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a40:	f107 0308 	add.w	r3, r7, #8
 8000a44:	2103      	movs	r1, #3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 fffe 	bl	8001a48 <HAL_RCC_ClockConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000a52:	f000 f8ab 	bl	8000bac <Error_Handler>
  }
}
 8000a56:	bf00      	nop
 8000a58:	3750      	adds	r7, #80	@ 0x50
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40007000 	.word	0x40007000

08000a68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae0 <MX_SPI1_Init+0x78>)
 8000a70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a80:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a82:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a94:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a9e:	2228      	movs	r2, #40	@ 0x28
 8000aa0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000ac8:	f001 f970 	bl	8001dac <HAL_SPI_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ad2:	f000 f86b 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000028 	.word	0x20000028
 8000ae0:	40013000 	.word	0x40013000

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b29      	ldr	r3, [pc, #164]	@ (8000ba0 <MX_GPIO_Init+0xbc>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a28      	ldr	r2, [pc, #160]	@ (8000ba0 <MX_GPIO_Init+0xbc>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b26      	ldr	r3, [pc, #152]	@ (8000ba0 <MX_GPIO_Init+0xbc>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b12:	4b23      	ldr	r3, [pc, #140]	@ (8000ba0 <MX_GPIO_Init+0xbc>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a22      	ldr	r2, [pc, #136]	@ (8000ba0 <MX_GPIO_Init+0xbc>)
 8000b18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ba0 <MX_GPIO_Init+0xbc>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba0 <MX_GPIO_Init+0xbc>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ba0 <MX_GPIO_Init+0xbc>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <MX_GPIO_Init+0xbc>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b48:	4816      	ldr	r0, [pc, #88]	@ (8000ba4 <MX_GPIO_Init+0xc0>)
 8000b4a:	f000 fc4d 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT2_Pin */
  GPIO_InitStruct.Pin = INT2_Pin;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b52:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT2_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	4619      	mov	r1, r3
 8000b62:	4811      	ldr	r0, [pc, #68]	@ (8000ba8 <MX_GPIO_Init+0xc4>)
 8000b64:	f000 fa94 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000b68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4808      	ldr	r0, [pc, #32]	@ (8000ba4 <MX_GPIO_Init+0xc0>)
 8000b82:	f000 fa85 	bl	8001090 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2006      	movs	r0, #6
 8000b8c:	f000 fa49 	bl	8001022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b90:	2006      	movs	r0, #6
 8000b92:	f000 fa62 	bl	800105a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b96:	bf00      	nop
 8000b98:	3720      	adds	r7, #32
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	40021800 	.word	0x40021800

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <Error_Handler+0x8>

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bda:	4a08      	ldr	r2, [pc, #32]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_MspInit+0x44>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	@ 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a17      	ldr	r2, [pc, #92]	@ (8000c7c <HAL_SPI_MspInit+0x7c>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d127      	bne.n	8000c72 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c22:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <HAL_SPI_MspInit+0x80>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	4a16      	ldr	r2, [pc, #88]	@ (8000c80 <HAL_SPI_MspInit+0x80>)
 8000c28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2e:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <HAL_SPI_MspInit+0x80>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <HAL_SPI_MspInit+0x80>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a10      	ldr	r2, [pc, #64]	@ (8000c80 <HAL_SPI_MspInit+0x80>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <HAL_SPI_MspInit+0x80>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c52:	23e0      	movs	r3, #224	@ 0xe0
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c62:	2305      	movs	r3, #5
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <HAL_SPI_MspInit+0x84>)
 8000c6e:	f000 fa0f 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	@ 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40013000 	.word	0x40013000
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020000 	.word	0x40020000

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <NMI_Handler+0x4>

08000c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <MemManage_Handler+0x4>

08000ca0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <UsageFault_Handler+0x4>

08000cb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cde:	f000 f881 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_Pin);
 8000cea:	2001      	movs	r0, #1
 8000cec:	f000 fb96 	bl	800141c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <SystemInit+0x20>)
 8000cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cfe:	4a05      	ldr	r2, [pc, #20]	@ (8000d14 <SystemInit+0x20>)
 8000d00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d1c:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d1e:	490e      	ldr	r1, [pc, #56]	@ (8000d58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d20:	4a0e      	ldr	r2, [pc, #56]	@ (8000d5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0b      	ldr	r2, [pc, #44]	@ (8000d60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d34:	4c0b      	ldr	r4, [pc, #44]	@ (8000d64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d42:	f7ff ffd7 	bl	8000cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d46:	f001 ff99 	bl	8002c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4a:	f7ff fd97 	bl	800087c <main>
  bx  lr    
 8000d4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d50:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d5c:	08002cfc 	.word	0x08002cfc
  ldr r2, =_sbss
 8000d60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d64:	200000ac 	.word	0x200000ac

08000d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC_IRQHandler>

08000d6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6e:	2003      	movs	r0, #3
 8000d70:	f000 f94c 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d74:	200f      	movs	r0, #15
 8000d76:	f000 f805 	bl	8000d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7a:	f7ff ff1d 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <HAL_InitTick+0x54>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <HAL_InitTick+0x58>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f967 	bl	8001076 <HAL_SYSTICK_Config>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00e      	b.n	8000dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	d80a      	bhi.n	8000dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db8:	2200      	movs	r2, #0
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f000 f92f 	bl	8001022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc4:	4a06      	ldr	r2, [pc, #24]	@ (8000de0 <HAL_InitTick+0x5c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e000      	b.n	8000dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000004 	.word	0x20000004

08000de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_IncTick+0x20>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_IncTick+0x24>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <HAL_IncTick+0x24>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008
 8000e08:	200000a8 	.word	0x200000a8

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	@ (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200000a8 	.word	0x200000a8

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff ffee 	bl	8000e0c <HAL_GetTick>
 8000e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3c:	d005      	beq.n	8000e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <HAL_Delay+0x44>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e4a:	bf00      	nop
 8000e4c:	f7ff ffde 	bl	8000e0c <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d8f7      	bhi.n	8000e4c <HAL_Delay+0x28>
  {
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <__NVIC_SetPriorityGrouping+0x40>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e96:	4313      	orrs	r3, r2
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	@ (8000eac <__NVIC_SetPriorityGrouping+0x40>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00
 8000eb0:	05fa0000 	.word	0x05fa0000

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4907      	ldr	r1, [pc, #28]	@ (8000f08 <__NVIC_EnableIRQ+0x38>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	@ (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	@ (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	@ 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	@ 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd8:	d301      	bcc.n	8000fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00f      	b.n	8000ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fde:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <SysTick_Config+0x40>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f7ff ff8e 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <SysTick_Config+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <SysTick_Config+0x40>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff29 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001034:	f7ff ff3e 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8001038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f7ff ff8e 	bl	8000f60 <NVIC_EncodePriority>
 8001044:	4602      	mov	r2, r0
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff5d 	bl	8000f0c <__NVIC_SetPriority>
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff31 	bl	8000ed0 <__NVIC_EnableIRQ>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ffa2 	bl	8000fc8 <SysTick_Config>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	@ 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	e175      	b.n	800139c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010b0:	2201      	movs	r2, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f040 8164 	bne.w	8001396 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d005      	beq.n	80010e6 <HAL_GPIO_Init+0x56>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d130      	bne.n	8001148 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	091b      	lsrs	r3, r3, #4
 8001132:	f003 0201 	and.w	r2, r3, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b03      	cmp	r3, #3
 8001152:	d017      	beq.n	8001184 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d123      	bne.n	80011d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	08da      	lsrs	r2, r3, #3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3208      	adds	r2, #8
 8001198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	69b9      	ldr	r1, [r7, #24]
 80011d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0203 	and.w	r2, r3, #3
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 80be 	beq.w	8001396 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	4b66      	ldr	r3, [pc, #408]	@ (80013b4 <HAL_GPIO_Init+0x324>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	4a65      	ldr	r2, [pc, #404]	@ (80013b4 <HAL_GPIO_Init+0x324>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001224:	6453      	str	r3, [r2, #68]	@ 0x44
 8001226:	4b63      	ldr	r3, [pc, #396]	@ (80013b4 <HAL_GPIO_Init+0x324>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001232:	4a61      	ldr	r2, [pc, #388]	@ (80013b8 <HAL_GPIO_Init+0x328>)
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	3302      	adds	r3, #2
 800123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	220f      	movs	r2, #15
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a58      	ldr	r2, [pc, #352]	@ (80013bc <HAL_GPIO_Init+0x32c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d037      	beq.n	80012ce <HAL_GPIO_Init+0x23e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a57      	ldr	r2, [pc, #348]	@ (80013c0 <HAL_GPIO_Init+0x330>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d031      	beq.n	80012ca <HAL_GPIO_Init+0x23a>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a56      	ldr	r2, [pc, #344]	@ (80013c4 <HAL_GPIO_Init+0x334>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d02b      	beq.n	80012c6 <HAL_GPIO_Init+0x236>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a55      	ldr	r2, [pc, #340]	@ (80013c8 <HAL_GPIO_Init+0x338>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d025      	beq.n	80012c2 <HAL_GPIO_Init+0x232>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a54      	ldr	r2, [pc, #336]	@ (80013cc <HAL_GPIO_Init+0x33c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d01f      	beq.n	80012be <HAL_GPIO_Init+0x22e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a53      	ldr	r2, [pc, #332]	@ (80013d0 <HAL_GPIO_Init+0x340>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d019      	beq.n	80012ba <HAL_GPIO_Init+0x22a>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a52      	ldr	r2, [pc, #328]	@ (80013d4 <HAL_GPIO_Init+0x344>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d013      	beq.n	80012b6 <HAL_GPIO_Init+0x226>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a51      	ldr	r2, [pc, #324]	@ (80013d8 <HAL_GPIO_Init+0x348>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d00d      	beq.n	80012b2 <HAL_GPIO_Init+0x222>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a50      	ldr	r2, [pc, #320]	@ (80013dc <HAL_GPIO_Init+0x34c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d007      	beq.n	80012ae <HAL_GPIO_Init+0x21e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4f      	ldr	r2, [pc, #316]	@ (80013e0 <HAL_GPIO_Init+0x350>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d101      	bne.n	80012aa <HAL_GPIO_Init+0x21a>
 80012a6:	2309      	movs	r3, #9
 80012a8:	e012      	b.n	80012d0 <HAL_GPIO_Init+0x240>
 80012aa:	230a      	movs	r3, #10
 80012ac:	e010      	b.n	80012d0 <HAL_GPIO_Init+0x240>
 80012ae:	2308      	movs	r3, #8
 80012b0:	e00e      	b.n	80012d0 <HAL_GPIO_Init+0x240>
 80012b2:	2307      	movs	r3, #7
 80012b4:	e00c      	b.n	80012d0 <HAL_GPIO_Init+0x240>
 80012b6:	2306      	movs	r3, #6
 80012b8:	e00a      	b.n	80012d0 <HAL_GPIO_Init+0x240>
 80012ba:	2305      	movs	r3, #5
 80012bc:	e008      	b.n	80012d0 <HAL_GPIO_Init+0x240>
 80012be:	2304      	movs	r3, #4
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x240>
 80012c2:	2303      	movs	r3, #3
 80012c4:	e004      	b.n	80012d0 <HAL_GPIO_Init+0x240>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e002      	b.n	80012d0 <HAL_GPIO_Init+0x240>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <HAL_GPIO_Init+0x240>
 80012ce:	2300      	movs	r3, #0
 80012d0:	69fa      	ldr	r2, [r7, #28]
 80012d2:	f002 0203 	and.w	r2, r2, #3
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	4093      	lsls	r3, r2
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012e0:	4935      	ldr	r1, [pc, #212]	@ (80013b8 <HAL_GPIO_Init+0x328>)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ee:	4b3d      	ldr	r3, [pc, #244]	@ (80013e4 <HAL_GPIO_Init+0x354>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001312:	4a34      	ldr	r2, [pc, #208]	@ (80013e4 <HAL_GPIO_Init+0x354>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001318:	4b32      	ldr	r3, [pc, #200]	@ (80013e4 <HAL_GPIO_Init+0x354>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800133c:	4a29      	ldr	r2, [pc, #164]	@ (80013e4 <HAL_GPIO_Init+0x354>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001342:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <HAL_GPIO_Init+0x354>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001366:	4a1f      	ldr	r2, [pc, #124]	@ (80013e4 <HAL_GPIO_Init+0x354>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800136c:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <HAL_GPIO_Init+0x354>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001390:	4a14      	ldr	r2, [pc, #80]	@ (80013e4 <HAL_GPIO_Init+0x354>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3301      	adds	r3, #1
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	2b0f      	cmp	r3, #15
 80013a0:	f67f ae86 	bls.w	80010b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3724      	adds	r7, #36	@ 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40013800 	.word	0x40013800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020400 	.word	0x40020400
 80013c4:	40020800 	.word	0x40020800
 80013c8:	40020c00 	.word	0x40020c00
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40021400 	.word	0x40021400
 80013d4:	40021800 	.word	0x40021800
 80013d8:	40021c00 	.word	0x40021c00
 80013dc:	40022000 	.word	0x40022000
 80013e0:	40022400 	.word	0x40022400
 80013e4:	40013c00 	.word	0x40013c00

080013e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]
 80013f4:	4613      	mov	r3, r2
 80013f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f8:	787b      	ldrb	r3, [r7, #1]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013fe:	887a      	ldrh	r2, [r7, #2]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001404:	e003      	b.n	800140e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	041a      	lsls	r2, r3, #16
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	619a      	str	r2, [r3, #24]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001426:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001428:	695a      	ldr	r2, [r3, #20]
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	4013      	ands	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001432:	4a05      	ldr	r2, [pc, #20]	@ (8001448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f9fa 	bl	8000834 <HAL_GPIO_EXTI_Callback>
  }
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40013c00 	.word	0x40013c00

0800144c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	4b23      	ldr	r3, [pc, #140]	@ (80014e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	4a22      	ldr	r2, [pc, #136]	@ (80014e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001460:	6413      	str	r3, [r2, #64]	@ 0x40
 8001462:	4b20      	ldr	r3, [pc, #128]	@ (80014e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800146e:	4b1e      	ldr	r3, [pc, #120]	@ (80014e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a1d      	ldr	r2, [pc, #116]	@ (80014e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001478:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800147a:	f7ff fcc7 	bl	8000e0c <HAL_GetTick>
 800147e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001480:	e009      	b.n	8001496 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001482:	f7ff fcc3 	bl	8000e0c <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001490:	d901      	bls.n	8001496 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e022      	b.n	80014dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001496:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800149e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a2:	d1ee      	bne.n	8001482 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014a4:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0f      	ldr	r2, [pc, #60]	@ (80014e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b0:	f7ff fcac 	bl	8000e0c <HAL_GetTick>
 80014b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014b6:	e009      	b.n	80014cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014b8:	f7ff fca8 	bl	8000e0c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014c6:	d901      	bls.n	80014cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e007      	b.n	80014dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80014d8:	d1ee      	bne.n	80014b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40007000 	.word	0x40007000

080014ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80014f4:	2300      	movs	r3, #0
 80014f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e29b      	b.n	8001a3a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8087 	beq.w	800161e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001510:	4b96      	ldr	r3, [pc, #600]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b04      	cmp	r3, #4
 800151a:	d00c      	beq.n	8001536 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800151c:	4b93      	ldr	r3, [pc, #588]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b08      	cmp	r3, #8
 8001526:	d112      	bne.n	800154e <HAL_RCC_OscConfig+0x62>
 8001528:	4b90      	ldr	r3, [pc, #576]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001530:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001534:	d10b      	bne.n	800154e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001536:	4b8d      	ldr	r3, [pc, #564]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d06c      	beq.n	800161c <HAL_RCC_OscConfig+0x130>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d168      	bne.n	800161c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e275      	b.n	8001a3a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001556:	d106      	bne.n	8001566 <HAL_RCC_OscConfig+0x7a>
 8001558:	4b84      	ldr	r3, [pc, #528]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a83      	ldr	r2, [pc, #524]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 800155e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	e02e      	b.n	80015c4 <HAL_RCC_OscConfig+0xd8>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10c      	bne.n	8001588 <HAL_RCC_OscConfig+0x9c>
 800156e:	4b7f      	ldr	r3, [pc, #508]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a7e      	ldr	r2, [pc, #504]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 8001574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	4b7c      	ldr	r3, [pc, #496]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a7b      	ldr	r2, [pc, #492]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 8001580:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	e01d      	b.n	80015c4 <HAL_RCC_OscConfig+0xd8>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001590:	d10c      	bne.n	80015ac <HAL_RCC_OscConfig+0xc0>
 8001592:	4b76      	ldr	r3, [pc, #472]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a75      	ldr	r2, [pc, #468]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	4b73      	ldr	r3, [pc, #460]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a72      	ldr	r2, [pc, #456]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e00b      	b.n	80015c4 <HAL_RCC_OscConfig+0xd8>
 80015ac:	4b6f      	ldr	r3, [pc, #444]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a6e      	ldr	r2, [pc, #440]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 80015b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b6c      	ldr	r3, [pc, #432]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a6b      	ldr	r2, [pc, #428]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 80015be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d013      	beq.n	80015f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fc1e 	bl	8000e0c <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff fc1a 	bl	8000e0c <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	@ 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e229      	b.n	8001a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	4b61      	ldr	r3, [pc, #388]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0xe8>
 80015f2:	e014      	b.n	800161e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f4:	f7ff fc0a 	bl	8000e0c <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fc06 	bl	8000e0c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	@ 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e215      	b.n	8001a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	4b57      	ldr	r3, [pc, #348]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x110>
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d069      	beq.n	80016fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800162a:	4b50      	ldr	r3, [pc, #320]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00b      	beq.n	800164e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001636:	4b4d      	ldr	r3, [pc, #308]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b08      	cmp	r3, #8
 8001640:	d11c      	bne.n	800167c <HAL_RCC_OscConfig+0x190>
 8001642:	4b4a      	ldr	r3, [pc, #296]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d116      	bne.n	800167c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164e:	4b47      	ldr	r3, [pc, #284]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d005      	beq.n	8001666 <HAL_RCC_OscConfig+0x17a>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d001      	beq.n	8001666 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e1e9      	b.n	8001a3a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001666:	4b41      	ldr	r3, [pc, #260]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	493d      	ldr	r1, [pc, #244]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167a:	e040      	b.n	80016fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d023      	beq.n	80016cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001684:	4b39      	ldr	r3, [pc, #228]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a38      	ldr	r2, [pc, #224]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001690:	f7ff fbbc 	bl	8000e0c <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001698:	f7ff fbb8 	bl	8000e0c <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e1c7      	b.n	8001a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016aa:	4b30      	ldr	r3, [pc, #192]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b6:	4b2d      	ldr	r3, [pc, #180]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4929      	ldr	r1, [pc, #164]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
 80016ca:	e018      	b.n	80016fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016cc:	4b27      	ldr	r3, [pc, #156]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a26      	ldr	r2, [pc, #152]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 80016d2:	f023 0301 	bic.w	r3, r3, #1
 80016d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff fb98 	bl	8000e0c <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e0:	f7ff fb94 	bl	8000e0c <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e1a3      	b.n	8001a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f2:	4b1e      	ldr	r3, [pc, #120]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d038      	beq.n	800177c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d019      	beq.n	8001746 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001712:	4b16      	ldr	r3, [pc, #88]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 8001714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001716:	4a15      	ldr	r2, [pc, #84]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171e:	f7ff fb75 	bl	8000e0c <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001726:	f7ff fb71 	bl	8000e0c <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e180      	b.n	8001a3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001738:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 800173a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x23a>
 8001744:	e01a      	b.n	800177c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 8001748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800174a:	4a08      	ldr	r2, [pc, #32]	@ (800176c <HAL_RCC_OscConfig+0x280>)
 800174c:	f023 0301 	bic.w	r3, r3, #1
 8001750:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001752:	f7ff fb5b 	bl	8000e0c <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800175a:	f7ff fb57 	bl	8000e0c <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d903      	bls.n	8001770 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e166      	b.n	8001a3a <HAL_RCC_OscConfig+0x54e>
 800176c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001770:	4b92      	ldr	r3, [pc, #584]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 8001772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1ee      	bne.n	800175a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 80a4 	beq.w	80018d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800178a:	4b8c      	ldr	r3, [pc, #560]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10d      	bne.n	80017b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	4b89      	ldr	r3, [pc, #548]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	4a88      	ldr	r2, [pc, #544]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a2:	4b86      	ldr	r3, [pc, #536]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ae:	2301      	movs	r3, #1
 80017b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b2:	4b83      	ldr	r3, [pc, #524]	@ (80019c0 <HAL_RCC_OscConfig+0x4d4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d118      	bne.n	80017f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017be:	4b80      	ldr	r3, [pc, #512]	@ (80019c0 <HAL_RCC_OscConfig+0x4d4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a7f      	ldr	r2, [pc, #508]	@ (80019c0 <HAL_RCC_OscConfig+0x4d4>)
 80017c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ca:	f7ff fb1f 	bl	8000e0c <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d2:	f7ff fb1b 	bl	8000e0c <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b64      	cmp	r3, #100	@ 0x64
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e12a      	b.n	8001a3a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e4:	4b76      	ldr	r3, [pc, #472]	@ (80019c0 <HAL_RCC_OscConfig+0x4d4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d106      	bne.n	8001806 <HAL_RCC_OscConfig+0x31a>
 80017f8:	4b70      	ldr	r3, [pc, #448]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 80017fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017fc:	4a6f      	ldr	r2, [pc, #444]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6713      	str	r3, [r2, #112]	@ 0x70
 8001804:	e02d      	b.n	8001862 <HAL_RCC_OscConfig+0x376>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0x33c>
 800180e:	4b6b      	ldr	r3, [pc, #428]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 8001810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001812:	4a6a      	ldr	r2, [pc, #424]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 8001814:	f023 0301 	bic.w	r3, r3, #1
 8001818:	6713      	str	r3, [r2, #112]	@ 0x70
 800181a:	4b68      	ldr	r3, [pc, #416]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181e:	4a67      	ldr	r2, [pc, #412]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 8001820:	f023 0304 	bic.w	r3, r3, #4
 8001824:	6713      	str	r3, [r2, #112]	@ 0x70
 8001826:	e01c      	b.n	8001862 <HAL_RCC_OscConfig+0x376>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b05      	cmp	r3, #5
 800182e:	d10c      	bne.n	800184a <HAL_RCC_OscConfig+0x35e>
 8001830:	4b62      	ldr	r3, [pc, #392]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 8001832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001834:	4a61      	ldr	r2, [pc, #388]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	6713      	str	r3, [r2, #112]	@ 0x70
 800183c:	4b5f      	ldr	r3, [pc, #380]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 800183e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001840:	4a5e      	ldr	r2, [pc, #376]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6713      	str	r3, [r2, #112]	@ 0x70
 8001848:	e00b      	b.n	8001862 <HAL_RCC_OscConfig+0x376>
 800184a:	4b5c      	ldr	r3, [pc, #368]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800184e:	4a5b      	ldr	r2, [pc, #364]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	6713      	str	r3, [r2, #112]	@ 0x70
 8001856:	4b59      	ldr	r3, [pc, #356]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 8001858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800185a:	4a58      	ldr	r2, [pc, #352]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 800185c:	f023 0304 	bic.w	r3, r3, #4
 8001860:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d015      	beq.n	8001896 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186a:	f7ff facf 	bl	8000e0c <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001870:	e00a      	b.n	8001888 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7ff facb 	bl	8000e0c <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001880:	4293      	cmp	r3, r2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e0d8      	b.n	8001a3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001888:	4b4c      	ldr	r3, [pc, #304]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0ee      	beq.n	8001872 <HAL_RCC_OscConfig+0x386>
 8001894:	e014      	b.n	80018c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001896:	f7ff fab9 	bl	8000e0c <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189e:	f7ff fab5 	bl	8000e0c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e0c2      	b.n	8001a3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b4:	4b41      	ldr	r3, [pc, #260]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1ee      	bne.n	800189e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018c0:	7dfb      	ldrb	r3, [r7, #23]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d105      	bne.n	80018d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c6:	4b3d      	ldr	r3, [pc, #244]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	4a3c      	ldr	r2, [pc, #240]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 80018cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018d0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 80ae 	beq.w	8001a38 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018dc:	4b37      	ldr	r3, [pc, #220]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d06d      	beq.n	80019c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d14b      	bne.n	8001988 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f0:	4b32      	ldr	r3, [pc, #200]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a31      	ldr	r2, [pc, #196]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 80018f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff fa86 	bl	8000e0c <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff fa82 	bl	8000e0c <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e091      	b.n	8001a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001916:	4b29      	ldr	r3, [pc, #164]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69da      	ldr	r2, [r3, #28]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001930:	019b      	lsls	r3, r3, #6
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001938:	085b      	lsrs	r3, r3, #1
 800193a:	3b01      	subs	r3, #1
 800193c:	041b      	lsls	r3, r3, #16
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001944:	061b      	lsls	r3, r3, #24
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194c:	071b      	lsls	r3, r3, #28
 800194e:	491b      	ldr	r1, [pc, #108]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001954:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a18      	ldr	r2, [pc, #96]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 800195a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800195e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff fa54 	bl	8000e0c <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff fa50 	bl	8000e0c <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e05f      	b.n	8001a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x47c>
 8001986:	e057      	b.n	8001a38 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001988:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0b      	ldr	r2, [pc, #44]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 800198e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff fa3a 	bl	8000e0c <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff fa36 	bl	8000e0c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e045      	b.n	8001a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ae:	4b03      	ldr	r3, [pc, #12]	@ (80019bc <HAL_RCC_OscConfig+0x4d0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x4b0>
 80019ba:	e03d      	b.n	8001a38 <HAL_RCC_OscConfig+0x54c>
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80019c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a44 <HAL_RCC_OscConfig+0x558>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d030      	beq.n	8001a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d129      	bne.n	8001a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d122      	bne.n	8001a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019f4:	4013      	ands	r3, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d119      	bne.n	8001a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0a:	085b      	lsrs	r3, r3, #1
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d10f      	bne.n	8001a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d107      	bne.n	8001a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800

08001a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0d0      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a60:	4b6a      	ldr	r3, [pc, #424]	@ (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 030f 	and.w	r3, r3, #15
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d910      	bls.n	8001a90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b67      	ldr	r3, [pc, #412]	@ (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 020f 	bic.w	r2, r3, #15
 8001a76:	4965      	ldr	r1, [pc, #404]	@ (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	4b63      	ldr	r3, [pc, #396]	@ (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0b8      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d020      	beq.n	8001ade <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa8:	4b59      	ldr	r3, [pc, #356]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4a58      	ldr	r2, [pc, #352]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001aae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ab2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac0:	4b53      	ldr	r3, [pc, #332]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	4a52      	ldr	r2, [pc, #328]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001aca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001acc:	4b50      	ldr	r3, [pc, #320]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	494d      	ldr	r1, [pc, #308]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d040      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	4b47      	ldr	r3, [pc, #284]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d115      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e07f      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0a:	4b41      	ldr	r3, [pc, #260]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d109      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e073      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e06b      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b2a:	4b39      	ldr	r3, [pc, #228]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f023 0203 	bic.w	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4936      	ldr	r1, [pc, #216]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b3c:	f7ff f966 	bl	8000e0c <HAL_GetTick>
 8001b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b44:	f7ff f962 	bl	8000e0c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e053      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 020c 	and.w	r2, r3, #12
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d1eb      	bne.n	8001b44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b27      	ldr	r3, [pc, #156]	@ (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 030f 	and.w	r3, r3, #15
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d210      	bcs.n	8001b9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b24      	ldr	r3, [pc, #144]	@ (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 020f 	bic.w	r2, r3, #15
 8001b82:	4922      	ldr	r1, [pc, #136]	@ (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e032      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba8:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4916      	ldr	r1, [pc, #88]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bc6:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	490e      	ldr	r1, [pc, #56]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bda:	f000 f821 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001bde:	4602      	mov	r2, r0
 8001be0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	490a      	ldr	r1, [pc, #40]	@ (8001c14 <HAL_RCC_ClockConfig+0x1cc>)
 8001bec:	5ccb      	ldrb	r3, [r1, r3]
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	4a09      	ldr	r2, [pc, #36]	@ (8001c18 <HAL_RCC_ClockConfig+0x1d0>)
 8001bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bf6:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <HAL_RCC_ClockConfig+0x1d4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff f8c2 	bl	8000d84 <HAL_InitTick>

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023c00 	.word	0x40023c00
 8001c10:	40023800 	.word	0x40023800
 8001c14:	08002cdc 	.word	0x08002cdc
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c24:	b090      	sub	sp, #64	@ 0x40
 8001c26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c30:	2300      	movs	r3, #0
 8001c32:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c38:	4b59      	ldr	r3, [pc, #356]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d00d      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0x40>
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	f200 80a1 	bhi.w	8001d8c <HAL_RCC_GetSysClockFreq+0x16c>
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0x34>
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d003      	beq.n	8001c5a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c52:	e09b      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c54:	4b53      	ldr	r3, [pc, #332]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c58:	e09b      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c5a:	4b53      	ldr	r3, [pc, #332]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c5e:	e098      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c60:	4b4f      	ldr	r3, [pc, #316]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c68:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c6a:	4b4d      	ldr	r3, [pc, #308]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d028      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c76:	4b4a      	ldr	r3, [pc, #296]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	099b      	lsrs	r3, r3, #6
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	623b      	str	r3, [r7, #32]
 8001c80:	627a      	str	r2, [r7, #36]	@ 0x24
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4b47      	ldr	r3, [pc, #284]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c8c:	fb03 f201 	mul.w	r2, r3, r1
 8001c90:	2300      	movs	r3, #0
 8001c92:	fb00 f303 	mul.w	r3, r0, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	4a43      	ldr	r2, [pc, #268]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c9a:	fba0 1202 	umull	r1, r2, r0, r2
 8001c9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ca0:	460a      	mov	r2, r1
 8001ca2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001ca4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ca6:	4413      	add	r3, r2
 8001ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cac:	2200      	movs	r2, #0
 8001cae:	61bb      	str	r3, [r7, #24]
 8001cb0:	61fa      	str	r2, [r7, #28]
 8001cb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001cba:	f7fe fabd 	bl	8000238 <__aeabi_uldivmod>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cc6:	e053      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc8:	4b35      	ldr	r3, [pc, #212]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	099b      	lsrs	r3, r3, #6
 8001cce:	2200      	movs	r2, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	617a      	str	r2, [r7, #20]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001cda:	f04f 0b00 	mov.w	fp, #0
 8001cde:	4652      	mov	r2, sl
 8001ce0:	465b      	mov	r3, fp
 8001ce2:	f04f 0000 	mov.w	r0, #0
 8001ce6:	f04f 0100 	mov.w	r1, #0
 8001cea:	0159      	lsls	r1, r3, #5
 8001cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cf0:	0150      	lsls	r0, r2, #5
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	ebb2 080a 	subs.w	r8, r2, sl
 8001cfa:	eb63 090b 	sbc.w	r9, r3, fp
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d12:	ebb2 0408 	subs.w	r4, r2, r8
 8001d16:	eb63 0509 	sbc.w	r5, r3, r9
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	00eb      	lsls	r3, r5, #3
 8001d24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d28:	00e2      	lsls	r2, r4, #3
 8001d2a:	4614      	mov	r4, r2
 8001d2c:	461d      	mov	r5, r3
 8001d2e:	eb14 030a 	adds.w	r3, r4, sl
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	eb45 030b 	adc.w	r3, r5, fp
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d46:	4629      	mov	r1, r5
 8001d48:	028b      	lsls	r3, r1, #10
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d50:	4621      	mov	r1, r4
 8001d52:	028a      	lsls	r2, r1, #10
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	60fa      	str	r2, [r7, #12]
 8001d60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d64:	f7fe fa68 	bl	8000238 <__aeabi_uldivmod>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d70:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	0c1b      	lsrs	r3, r3, #16
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001d80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d8a:	e002      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d8c:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3740      	adds	r7, #64	@ 0x40
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	00f42400 	.word	0x00f42400
 8001da8:	017d7840 	.word	0x017d7840

08001dac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e09d      	b.n	8001efa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d108      	bne.n	8001dd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001dce:	d009      	beq.n	8001de4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	61da      	str	r2, [r3, #28]
 8001dd6:	e005      	b.n	8001de4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d106      	bne.n	8001e04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7fe fefe 	bl	8000c00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001e24:	d902      	bls.n	8001e2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	e002      	b.n	8001e32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001e3a:	d007      	beq.n	8001e4c <HAL_SPI_Init+0xa0>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001e44:	d002      	beq.n	8001e4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8e:	ea42 0103 	orr.w	r1, r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e96:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	0c1b      	lsrs	r3, r3, #16
 8001ea8:	f003 0204 	and.w	r2, r3, #4
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	f003 0310 	and.w	r3, r3, #16
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001ec8:	ea42 0103 	orr.w	r1, r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	69da      	ldr	r2, [r3, #28]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ee8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b088      	sub	sp, #32
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	60f8      	str	r0, [r7, #12]
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_SPI_Transmit+0x22>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e158      	b.n	80021d6 <HAL_SPI_Transmit+0x2d4>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f2c:	f7fe ff6e 	bl	8000e0c <HAL_GetTick>
 8001f30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d002      	beq.n	8001f48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f42:	2302      	movs	r3, #2
 8001f44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f46:	e13d      	b.n	80021c4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d002      	beq.n	8001f54 <HAL_SPI_Transmit+0x52>
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f58:	e134      	b.n	80021c4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	88fa      	ldrh	r2, [r7, #6]
 8001f72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	88fa      	ldrh	r2, [r7, #6]
 8001f78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fa4:	d10f      	bne.n	8001fc6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001fc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd0:	2b40      	cmp	r3, #64	@ 0x40
 8001fd2:	d007      	beq.n	8001fe4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fe2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001fec:	d94b      	bls.n	8002086 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <HAL_SPI_Transmit+0xfa>
 8001ff6:	8afb      	ldrh	r3, [r7, #22]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d13e      	bne.n	800207a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002000:	881a      	ldrh	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800200c:	1c9a      	adds	r2, r3, #2
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002016:	b29b      	uxth	r3, r3
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002020:	e02b      	b.n	800207a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b02      	cmp	r3, #2
 800202e:	d112      	bne.n	8002056 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002034:	881a      	ldrh	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002040:	1c9a      	adds	r2, r3, #2
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800204a:	b29b      	uxth	r3, r3
 800204c:	3b01      	subs	r3, #1
 800204e:	b29a      	uxth	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002054:	e011      	b.n	800207a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002056:	f7fe fed9 	bl	8000e0c <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d803      	bhi.n	800206e <HAL_SPI_Transmit+0x16c>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206c:	d102      	bne.n	8002074 <HAL_SPI_Transmit+0x172>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002078:	e0a4      	b.n	80021c4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800207e:	b29b      	uxth	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1ce      	bne.n	8002022 <HAL_SPI_Transmit+0x120>
 8002084:	e07c      	b.n	8002180 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <HAL_SPI_Transmit+0x192>
 800208e:	8afb      	ldrh	r3, [r7, #22]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d170      	bne.n	8002176 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002098:	b29b      	uxth	r3, r3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d912      	bls.n	80020c4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a2:	881a      	ldrh	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ae:	1c9a      	adds	r2, r3, #2
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3b02      	subs	r3, #2
 80020bc:	b29a      	uxth	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80020c2:	e058      	b.n	8002176 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	330c      	adds	r3, #12
 80020ce:	7812      	ldrb	r2, [r2, #0]
 80020d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80020ea:	e044      	b.n	8002176 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d12b      	bne.n	8002152 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b01      	cmp	r3, #1
 8002102:	d912      	bls.n	800212a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002108:	881a      	ldrh	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002114:	1c9a      	adds	r2, r3, #2
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b02      	subs	r3, #2
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002128:	e025      	b.n	8002176 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	330c      	adds	r3, #12
 8002134:	7812      	ldrb	r2, [r2, #0]
 8002136:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002150:	e011      	b.n	8002176 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002152:	f7fe fe5b 	bl	8000e0c <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d803      	bhi.n	800216a <HAL_SPI_Transmit+0x268>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002168:	d102      	bne.n	8002170 <HAL_SPI_Transmit+0x26e>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002174:	e026      	b.n	80021c4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800217a:	b29b      	uxth	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1b5      	bne.n	80020ec <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	6839      	ldr	r1, [r7, #0]
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 fd07 	bl	8002b98 <SPI_EndRxTxTransaction>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d002      	beq.n	8002196 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2220      	movs	r2, #32
 8002194:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10a      	bne.n	80021b4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	77fb      	strb	r3, [r7, #31]
 80021c0:	e000      	b.n	80021c4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80021c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80021d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b088      	sub	sp, #32
 80021e2:	af02      	add	r7, sp, #8
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	603b      	str	r3, [r7, #0]
 80021ea:	4613      	mov	r3, r2
 80021ec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021fa:	d112      	bne.n	8002222 <HAL_SPI_Receive+0x44>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10e      	bne.n	8002222 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2204      	movs	r2, #4
 8002208:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800220c:	88fa      	ldrh	r2, [r7, #6]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	4613      	mov	r3, r2
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f910 	bl	800243e <HAL_SPI_TransmitReceive>
 800221e:	4603      	mov	r3, r0
 8002220:	e109      	b.n	8002436 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_SPI_Receive+0x52>
 800222c:	2302      	movs	r3, #2
 800222e:	e102      	b.n	8002436 <HAL_SPI_Receive+0x258>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002238:	f7fe fde8 	bl	8000e0c <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b01      	cmp	r3, #1
 8002248:	d002      	beq.n	8002250 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800224a:	2302      	movs	r3, #2
 800224c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800224e:	e0e9      	b.n	8002424 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <HAL_SPI_Receive+0x7e>
 8002256:	88fb      	ldrh	r3, [r7, #6]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d102      	bne.n	8002262 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002260:	e0e0      	b.n	8002424 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2204      	movs	r2, #4
 8002266:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	88fa      	ldrh	r2, [r7, #6]
 800227a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	88fa      	ldrh	r2, [r7, #6]
 8002282:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80022ac:	d908      	bls.n	80022c0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	e007      	b.n	80022d0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80022ce:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022d8:	d10f      	bne.n	80022fa <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80022f8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002304:	2b40      	cmp	r3, #64	@ 0x40
 8002306:	d007      	beq.n	8002318 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002316:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002320:	d867      	bhi.n	80023f2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002322:	e030      	b.n	8002386 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b01      	cmp	r3, #1
 8002330:	d117      	bne.n	8002362 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f103 020c 	add.w	r2, r3, #12
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	7812      	ldrb	r2, [r2, #0]
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002360:	e011      	b.n	8002386 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002362:	f7fe fd53 	bl	8000e0c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d803      	bhi.n	800237a <HAL_SPI_Receive+0x19c>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d102      	bne.n	8002380 <HAL_SPI_Receive+0x1a2>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002384:	e04e      	b.n	8002424 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1c8      	bne.n	8002324 <HAL_SPI_Receive+0x146>
 8002392:	e034      	b.n	80023fe <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d115      	bne.n	80023ce <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ac:	b292      	uxth	r2, r2
 80023ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b4:	1c9a      	adds	r2, r3, #2
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80023cc:	e011      	b.n	80023f2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023ce:	f7fe fd1d 	bl	8000e0c <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d803      	bhi.n	80023e6 <HAL_SPI_Receive+0x208>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e4:	d102      	bne.n	80023ec <HAL_SPI_Receive+0x20e>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80023f0:	e018      	b.n	8002424 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ca      	bne.n	8002394 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	6839      	ldr	r1, [r7, #0]
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 fb4c 	bl	8002aa0 <SPI_EndRxTransaction>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	75fb      	strb	r3, [r7, #23]
 8002420:	e000      	b.n	8002424 <HAL_SPI_Receive+0x246>
  }

error :
 8002422:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002434:	7dfb      	ldrb	r3, [r7, #23]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b08a      	sub	sp, #40	@ 0x28
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800244c:	2301      	movs	r3, #1
 800244e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_SPI_TransmitReceive+0x26>
 8002460:	2302      	movs	r3, #2
 8002462:	e1fb      	b.n	800285c <HAL_SPI_TransmitReceive+0x41e>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800246c:	f7fe fcce 	bl	8000e0c <HAL_GetTick>
 8002470:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002478:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002480:	887b      	ldrh	r3, [r7, #2]
 8002482:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002484:	887b      	ldrh	r3, [r7, #2]
 8002486:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002488:	7efb      	ldrb	r3, [r7, #27]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d00e      	beq.n	80024ac <HAL_SPI_TransmitReceive+0x6e>
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002494:	d106      	bne.n	80024a4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d102      	bne.n	80024a4 <HAL_SPI_TransmitReceive+0x66>
 800249e:	7efb      	ldrb	r3, [r7, #27]
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d003      	beq.n	80024ac <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80024a4:	2302      	movs	r3, #2
 80024a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80024aa:	e1cd      	b.n	8002848 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_SPI_TransmitReceive+0x80>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <HAL_SPI_TransmitReceive+0x80>
 80024b8:	887b      	ldrh	r3, [r7, #2]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d103      	bne.n	80024c6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80024c4:	e1c0      	b.n	8002848 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d003      	beq.n	80024da <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2205      	movs	r2, #5
 80024d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	887a      	ldrh	r2, [r7, #2]
 80024ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	887a      	ldrh	r2, [r7, #2]
 80024f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	887a      	ldrh	r2, [r7, #2]
 8002500:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	887a      	ldrh	r2, [r7, #2]
 8002506:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800251c:	d802      	bhi.n	8002524 <HAL_SPI_TransmitReceive+0xe6>
 800251e:	8a3b      	ldrh	r3, [r7, #16]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d908      	bls.n	8002536 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	e007      	b.n	8002546 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002544:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002550:	2b40      	cmp	r3, #64	@ 0x40
 8002552:	d007      	beq.n	8002564 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002562:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800256c:	d97c      	bls.n	8002668 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_SPI_TransmitReceive+0x13e>
 8002576:	8a7b      	ldrh	r3, [r7, #18]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d169      	bne.n	8002650 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002580:	881a      	ldrh	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800258c:	1c9a      	adds	r2, r3, #2
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025a0:	e056      	b.n	8002650 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d11b      	bne.n	80025e8 <HAL_SPI_TransmitReceive+0x1aa>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d016      	beq.n	80025e8 <HAL_SPI_TransmitReceive+0x1aa>
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d113      	bne.n	80025e8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c4:	881a      	ldrh	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d0:	1c9a      	adds	r2, r3, #2
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d11c      	bne.n	8002630 <HAL_SPI_TransmitReceive+0x1f2>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d016      	beq.n	8002630 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260c:	b292      	uxth	r2, r2
 800260e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	1c9a      	adds	r2, r3, #2
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002620:	b29b      	uxth	r3, r3
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800262c:	2301      	movs	r3, #1
 800262e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002630:	f7fe fbec 	bl	8000e0c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800263c:	429a      	cmp	r2, r3
 800263e:	d807      	bhi.n	8002650 <HAL_SPI_TransmitReceive+0x212>
 8002640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002646:	d003      	beq.n	8002650 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800264e:	e0fb      	b.n	8002848 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002654:	b29b      	uxth	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1a3      	bne.n	80025a2 <HAL_SPI_TransmitReceive+0x164>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d19d      	bne.n	80025a2 <HAL_SPI_TransmitReceive+0x164>
 8002666:	e0df      	b.n	8002828 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_SPI_TransmitReceive+0x23a>
 8002670:	8a7b      	ldrh	r3, [r7, #18]
 8002672:	2b01      	cmp	r3, #1
 8002674:	f040 80cb 	bne.w	800280e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d912      	bls.n	80026a8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002686:	881a      	ldrh	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002692:	1c9a      	adds	r2, r3, #2
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b02      	subs	r3, #2
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80026a6:	e0b2      	b.n	800280e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	330c      	adds	r3, #12
 80026b2:	7812      	ldrb	r2, [r2, #0]
 80026b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ce:	e09e      	b.n	800280e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d134      	bne.n	8002748 <HAL_SPI_TransmitReceive+0x30a>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d02f      	beq.n	8002748 <HAL_SPI_TransmitReceive+0x30a>
 80026e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d12c      	bne.n	8002748 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d912      	bls.n	800271e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026fc:	881a      	ldrh	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002708:	1c9a      	adds	r2, r3, #2
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b02      	subs	r3, #2
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800271c:	e012      	b.n	8002744 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	330c      	adds	r3, #12
 8002728:	7812      	ldrb	r2, [r2, #0]
 800272a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d148      	bne.n	80027e8 <HAL_SPI_TransmitReceive+0x3aa>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d042      	beq.n	80027e8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002768:	b29b      	uxth	r3, r3
 800276a:	2b01      	cmp	r3, #1
 800276c:	d923      	bls.n	80027b6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	b292      	uxth	r2, r2
 800277a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	1c9a      	adds	r2, r3, #2
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800278c:	b29b      	uxth	r3, r3
 800278e:	3b02      	subs	r3, #2
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d81f      	bhi.n	80027e4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	e016      	b.n	80027e4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f103 020c 	add.w	r2, r3, #12
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	7812      	ldrb	r2, [r2, #0]
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027e4:	2301      	movs	r3, #1
 80027e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027e8:	f7fe fb10 	bl	8000e0c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d803      	bhi.n	8002800 <HAL_SPI_TransmitReceive+0x3c2>
 80027f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fe:	d102      	bne.n	8002806 <HAL_SPI_TransmitReceive+0x3c8>
 8002800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002802:	2b00      	cmp	r3, #0
 8002804:	d103      	bne.n	800280e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800280c:	e01c      	b.n	8002848 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	f47f af5b 	bne.w	80026d0 <HAL_SPI_TransmitReceive+0x292>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002820:	b29b      	uxth	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	f47f af54 	bne.w	80026d0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 f9b3 	bl	8002b98 <SPI_EndRxTxTransaction>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2220      	movs	r2, #32
 8002842:	661a      	str	r2, [r3, #96]	@ 0x60
 8002844:	e000      	b.n	8002848 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002846:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002858:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800285c:	4618      	mov	r0, r3
 800285e:	3728      	adds	r7, #40	@ 0x28
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002874:	f7fe faca 	bl	8000e0c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	4413      	add	r3, r2
 8002882:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002884:	f7fe fac2 	bl	8000e0c <HAL_GetTick>
 8002888:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800288a:	4b39      	ldr	r3, [pc, #228]	@ (8002970 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	015b      	lsls	r3, r3, #5
 8002890:	0d1b      	lsrs	r3, r3, #20
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	fb02 f303 	mul.w	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800289a:	e054      	b.n	8002946 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a2:	d050      	beq.n	8002946 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028a4:	f7fe fab2 	bl	8000e0c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d902      	bls.n	80028ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d13d      	bne.n	8002936 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80028c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028d2:	d111      	bne.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028dc:	d004      	beq.n	80028e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028e6:	d107      	bne.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002900:	d10f      	bne.n	8002922 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002920:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e017      	b.n	8002966 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	3b01      	subs	r3, #1
 8002944:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4013      	ands	r3, r2
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	429a      	cmp	r2, r3
 8002954:	bf0c      	ite	eq
 8002956:	2301      	moveq	r3, #1
 8002958:	2300      	movne	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	429a      	cmp	r2, r3
 8002962:	d19b      	bne.n	800289c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3720      	adds	r7, #32
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000000 	.word	0x20000000

08002974 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	@ 0x28
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002986:	f7fe fa41 	bl	8000e0c <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	4413      	add	r3, r2
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002996:	f7fe fa39 	bl	8000e0c <HAL_GetTick>
 800299a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	330c      	adds	r3, #12
 80029a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80029a4:	4b3d      	ldr	r3, [pc, #244]	@ (8002a9c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	00da      	lsls	r2, r3, #3
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	0d1b      	lsrs	r3, r3, #20
 80029b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b6:	fb02 f303 	mul.w	r3, r2, r3
 80029ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80029bc:	e060      	b.n	8002a80 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80029c4:	d107      	bne.n	80029d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d104      	bne.n	80029d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d050      	beq.n	8002a80 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029de:	f7fe fa15 	bl	8000e0c <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d902      	bls.n	80029f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d13d      	bne.n	8002a70 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a0c:	d111      	bne.n	8002a32 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a16:	d004      	beq.n	8002a22 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a20:	d107      	bne.n	8002a32 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a3a:	d10f      	bne.n	8002a5c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e010      	b.n	8002a92 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d196      	bne.n	80029be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3728      	adds	r7, #40	@ 0x28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000000 	.word	0x20000000

08002aa0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ab4:	d111      	bne.n	8002ada <SPI_EndRxTransaction+0x3a>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002abe:	d004      	beq.n	8002aca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ac8:	d107      	bne.n	8002ada <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ad8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ae2:	d112      	bne.n	8002b0a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2200      	movs	r2, #0
 8002aec:	2180      	movs	r1, #128	@ 0x80
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f7ff feb8 	bl	8002864 <SPI_WaitFlagStateUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d021      	beq.n	8002b3e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002afe:	f043 0220 	orr.w	r2, r3, #32
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e03d      	b.n	8002b86 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b0a:	4b21      	ldr	r3, [pc, #132]	@ (8002b90 <SPI_EndRxTransaction+0xf0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a21      	ldr	r2, [pc, #132]	@ (8002b94 <SPI_EndRxTransaction+0xf4>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	0d5b      	lsrs	r3, r3, #21
 8002b16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b36:	2b80      	cmp	r3, #128	@ 0x80
 8002b38:	d0f2      	beq.n	8002b20 <SPI_EndRxTransaction+0x80>
 8002b3a:	e000      	b.n	8002b3e <SPI_EndRxTransaction+0x9e>
        break;
 8002b3c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b46:	d11d      	bne.n	8002b84 <SPI_EndRxTransaction+0xe4>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b50:	d004      	beq.n	8002b5c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b5a:	d113      	bne.n	8002b84 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7ff ff03 	bl	8002974 <SPI_WaitFifoStateUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b78:	f043 0220 	orr.w	r2, r3, #32
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e000      	b.n	8002b86 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000000 	.word	0x20000000
 8002b94:	165e9f81 	.word	0x165e9f81

08002b98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f7ff fedf 	bl	8002974 <SPI_WaitFifoStateUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc0:	f043 0220 	orr.w	r2, r3, #32
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e046      	b.n	8002c5a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002bcc:	4b25      	ldr	r3, [pc, #148]	@ (8002c64 <SPI_EndRxTxTransaction+0xcc>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a25      	ldr	r2, [pc, #148]	@ (8002c68 <SPI_EndRxTxTransaction+0xd0>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	0d5b      	lsrs	r3, r3, #21
 8002bd8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bdc:	fb02 f303 	mul.w	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bea:	d112      	bne.n	8002c12 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2180      	movs	r1, #128	@ 0x80
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f7ff fe34 	bl	8002864 <SPI_WaitFlagStateUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d016      	beq.n	8002c30 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c06:	f043 0220 	orr.w	r2, r3, #32
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e023      	b.n	8002c5a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c28:	2b80      	cmp	r3, #128	@ 0x80
 8002c2a:	d0f2      	beq.n	8002c12 <SPI_EndRxTxTransaction+0x7a>
 8002c2c:	e000      	b.n	8002c30 <SPI_EndRxTxTransaction+0x98>
        break;
 8002c2e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f7ff fe99 	bl	8002974 <SPI_WaitFifoStateUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d007      	beq.n	8002c58 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4c:	f043 0220 	orr.w	r2, r3, #32
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e000      	b.n	8002c5a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000000 	.word	0x20000000
 8002c68:	165e9f81 	.word	0x165e9f81

08002c6c <memset>:
 8002c6c:	4402      	add	r2, r0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d100      	bne.n	8002c76 <memset+0xa>
 8002c74:	4770      	bx	lr
 8002c76:	f803 1b01 	strb.w	r1, [r3], #1
 8002c7a:	e7f9      	b.n	8002c70 <memset+0x4>

08002c7c <__libc_init_array>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	4d0d      	ldr	r5, [pc, #52]	@ (8002cb4 <__libc_init_array+0x38>)
 8002c80:	4c0d      	ldr	r4, [pc, #52]	@ (8002cb8 <__libc_init_array+0x3c>)
 8002c82:	1b64      	subs	r4, r4, r5
 8002c84:	10a4      	asrs	r4, r4, #2
 8002c86:	2600      	movs	r6, #0
 8002c88:	42a6      	cmp	r6, r4
 8002c8a:	d109      	bne.n	8002ca0 <__libc_init_array+0x24>
 8002c8c:	4d0b      	ldr	r5, [pc, #44]	@ (8002cbc <__libc_init_array+0x40>)
 8002c8e:	4c0c      	ldr	r4, [pc, #48]	@ (8002cc0 <__libc_init_array+0x44>)
 8002c90:	f000 f818 	bl	8002cc4 <_init>
 8002c94:	1b64      	subs	r4, r4, r5
 8002c96:	10a4      	asrs	r4, r4, #2
 8002c98:	2600      	movs	r6, #0
 8002c9a:	42a6      	cmp	r6, r4
 8002c9c:	d105      	bne.n	8002caa <__libc_init_array+0x2e>
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca4:	4798      	blx	r3
 8002ca6:	3601      	adds	r6, #1
 8002ca8:	e7ee      	b.n	8002c88 <__libc_init_array+0xc>
 8002caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cae:	4798      	blx	r3
 8002cb0:	3601      	adds	r6, #1
 8002cb2:	e7f2      	b.n	8002c9a <__libc_init_array+0x1e>
 8002cb4:	08002cf4 	.word	0x08002cf4
 8002cb8:	08002cf4 	.word	0x08002cf4
 8002cbc:	08002cf4 	.word	0x08002cf4
 8002cc0:	08002cf8 	.word	0x08002cf8

08002cc4 <_init>:
 8002cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc6:	bf00      	nop
 8002cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cca:	bc08      	pop	{r3}
 8002ccc:	469e      	mov	lr, r3
 8002cce:	4770      	bx	lr

08002cd0 <_fini>:
 8002cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd2:	bf00      	nop
 8002cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd6:	bc08      	pop	{r3}
 8002cd8:	469e      	mov	lr, r3
 8002cda:	4770      	bx	lr
