
stm32f767zi_lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef8  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080060f0  080060f0  000070f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006134  08006134  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006134  08006134  00007134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800613c  0800613c  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800613c  0800613c  0000713c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006140  08006140  00007140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006144  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000000c  08006150  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08006150  00008240  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014909  00000000  00000000  0000803a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000275c  00000000  00000000  0001c943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  0001f0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e85  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002881  00000000  00000000  0002117d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016eb2  00000000  00000000  000239fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff00d  00000000  00000000  0003a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001398bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e98  00000000  00000000  00139900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0013e798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080060d8 	.word	0x080060d8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080060d8 	.word	0x080060d8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <LCD_SendBytes>:
#define LCDS_ERR_ARG_POS_RANGE		9	// The argument is not within 0, 7 range for characters position in the memory

//other defines used for library functions
#define MAX						150

static void LCD_SendBytes(uint8_t* dataChars, uint8_t lenght){
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af02      	add	r7, sp, #8
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	460b      	mov	r3, r1
 8000532:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_ADDRESS_LCD << 1), dataChars, lenght, I2C_TIMEOUT);
 8000534:	78fb      	ldrb	r3, [r7, #3]
 8000536:	b29b      	uxth	r3, r3
 8000538:	220a      	movs	r2, #10
 800053a:	9200      	str	r2, [sp, #0]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	2190      	movs	r1, #144	@ 0x90
 8000540:	4803      	ldr	r0, [pc, #12]	@ (8000550 <LCD_SendBytes+0x28>)
 8000542:	f001 fbb5 	bl	8001cb0 <HAL_I2C_Master_Transmit>
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000028 	.word	0x20000028

08000554 <LCD_DisplaySet>:
**
**	Description:
**		This function turns the display and the backlight on or off, according to the user's selection
**
-----------------------------------------------------------------------*/
static void LCD_DisplaySet(bool setDisplay, bool setBckl) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	460a      	mov	r2, r1
 800055e:	71fb      	strb	r3, [r7, #7]
 8000560:	4613      	mov	r3, r2
 8000562:	71bb      	strb	r3, [r7, #6]
    uint8_t dispBcklOff []  = {ESC, BRACKET, '0', DISP_EN_CMD};
 8000564:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <LCD_DisplaySet+0x9c>)
 8000566:	617b      	str	r3, [r7, #20]
	uint8_t dispOnBckl  []  = {ESC, BRACKET, '1', DISP_EN_CMD};
 8000568:	4b22      	ldr	r3, [pc, #136]	@ (80005f4 <LCD_DisplaySet+0xa0>)
 800056a:	613b      	str	r3, [r7, #16]
	uint8_t dispBcklOn  []  = {ESC, BRACKET, '2', DISP_EN_CMD};
 800056c:	4b22      	ldr	r3, [pc, #136]	@ (80005f8 <LCD_DisplaySet+0xa4>)
 800056e:	60fb      	str	r3, [r7, #12]
	uint8_t dispOnBcklOn[]  = {ESC, BRACKET, '3', DISP_EN_CMD};
 8000570:	4b22      	ldr	r3, [pc, #136]	@ (80005fc <LCD_DisplaySet+0xa8>)
 8000572:	60bb      	str	r3, [r7, #8]

	if ((!setDisplay)&&(!setBckl))	{
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	f083 0301 	eor.w	r3, r3, #1
 800057a:	b2db      	uxtb	r3, r3
 800057c:	2b00      	cmp	r3, #0
 800057e:	d00c      	beq.n	800059a <LCD_DisplaySet+0x46>
 8000580:	79bb      	ldrb	r3, [r7, #6]
 8000582:	f083 0301 	eor.w	r3, r3, #1
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	d006      	beq.n	800059a <LCD_DisplaySet+0x46>
		//send the command for both display and backlight off
		LCD_SendBytes(dispBcklOff, 4);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	2104      	movs	r1, #4
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ffc8 	bl	8000528 <LCD_SendBytes>
 8000598:	e026      	b.n	80005e8 <LCD_DisplaySet+0x94>
	}
	else if ((setDisplay)&&(!setBckl))	{
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00c      	beq.n	80005ba <LCD_DisplaySet+0x66>
 80005a0:	79bb      	ldrb	r3, [r7, #6]
 80005a2:	f083 0301 	eor.w	r3, r3, #1
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d006      	beq.n	80005ba <LCD_DisplaySet+0x66>
		//send the command for display on and backlight off
		LCD_SendBytes(dispOnBckl, 4);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	2104      	movs	r1, #4
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ffb8 	bl	8000528 <LCD_SendBytes>
 80005b8:	e016      	b.n	80005e8 <LCD_DisplaySet+0x94>
	}
	else if ((!setDisplay)&&(setBckl))	{
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	f083 0301 	eor.w	r3, r3, #1
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d009      	beq.n	80005da <LCD_DisplaySet+0x86>
 80005c6:	79bb      	ldrb	r3, [r7, #6]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d006      	beq.n	80005da <LCD_DisplaySet+0x86>
		//send the command for backlight on and display off
		LCD_SendBytes(dispBcklOn, 4);
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2104      	movs	r1, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff ffa8 	bl	8000528 <LCD_SendBytes>
 80005d8:	e006      	b.n	80005e8 <LCD_DisplaySet+0x94>
	}
	else {
		//send the command for both display and backlight on
		LCD_SendBytes(dispOnBcklOn, 4);
 80005da:	f107 0308 	add.w	r3, r7, #8
 80005de:	2104      	movs	r1, #4
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffa1 	bl	8000528 <LCD_SendBytes>
	}
}
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	3718      	adds	r7, #24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	65305b1b 	.word	0x65305b1b
 80005f4:	65315b1b 	.word	0x65315b1b
 80005f8:	65325b1b 	.word	0x65325b1b
 80005fc:	65335b1b 	.word	0x65335b1b

08000600 <LCD_DisplayClear>:
**
**	Description:
**		This function clears the display and returns the cursor home
**
-----------------------------------------------------------------------*/
static void LCD_DisplayClear() {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
	uint8_t dispClr[] = {ESC, BRACKET, DISP_CLR_CMD};
 8000606:	4a08      	ldr	r2, [pc, #32]	@ (8000628 <LCD_DisplayClear+0x28>)
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	6812      	ldr	r2, [r2, #0]
 800060c:	4611      	mov	r1, r2
 800060e:	8019      	strh	r1, [r3, #0]
 8000610:	3302      	adds	r3, #2
 8000612:	0c12      	lsrs	r2, r2, #16
 8000614:	701a      	strb	r2, [r3, #0]
	//clear the display and returns the cursor home
	LCD_SendBytes(dispClr, 3);
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2103      	movs	r1, #3
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff84 	bl	8000528 <LCD_SendBytes>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	080060f0 	.word	0x080060f0

0800062c <LCD_WriteStringAtPos>:
**		strLn   - the string to be written
**
**		This function writes a string at a specified position
**
-----------------------------------------------------------------------*/
static uint8_t LCD_WriteStringAtPos(uint8_t idxRow, uint8_t idxCol, char* strLn, uint8_t length) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	603a      	str	r2, [r7, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
 800063a:	460b      	mov	r3, r1
 800063c:	71bb      	strb	r3, [r7, #6]
 800063e:	4613      	mov	r3, r2
 8000640:	717b      	strb	r3, [r7, #5]
	int i;
	int j;
	uint8_t bResult = LCDS_ERR_SUCCESS;
 8000642:	2300      	movs	r3, #0
 8000644:	75fb      	strb	r3, [r7, #23]
	if (idxRow < 0 || idxRow > 2){
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d903      	bls.n	8000654 <LCD_WriteStringAtPos+0x28>
		bResult |= LCDS_ERR_ARG_ROW_RANGE;
 800064c:	7dfb      	ldrb	r3, [r7, #23]
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	75fb      	strb	r3, [r7, #23]
	}
	if (idxCol < 0 || idxCol > 39){
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	2b27      	cmp	r3, #39	@ 0x27
 8000658:	d903      	bls.n	8000662 <LCD_WriteStringAtPos+0x36>
		bResult |= LCDS_ERR_ARG_COL_RANGE;
 800065a:	7dfb      	ldrb	r3, [r7, #23]
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	75fb      	strb	r3, [r7, #23]
	}
	if (bResult == LCDS_ERR_SUCCESS){
 8000662:	7dfb      	ldrb	r3, [r7, #23]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d13a      	bne.n	80006de <LCD_WriteStringAtPos+0xb2>
		//separate the position digits in order to send them, useful when the position is greater than 10
		uint8_t firstDigit 		= idxCol % 10;
 8000668:	79ba      	ldrb	r2, [r7, #6]
 800066a:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <LCD_WriteStringAtPos+0xbc>)
 800066c:	fba3 1302 	umull	r1, r3, r3, r2
 8000670:	08d9      	lsrs	r1, r3, #3
 8000672:	460b      	mov	r3, r1
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	440b      	add	r3, r1
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	75bb      	strb	r3, [r7, #22]
		uint8_t secondDigit 	= idxCol / 10;
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	4a19      	ldr	r2, [pc, #100]	@ (80006e8 <LCD_WriteStringAtPos+0xbc>)
 8000682:	fba2 2303 	umull	r2, r3, r2, r3
 8000686:	08db      	lsrs	r3, r3, #3
 8000688:	757b      	strb	r3, [r7, #21]
		//uint8_t length 			= strlen(strLn);
		uint8_t lengthToPrint   = length + idxCol;
 800068a:	797a      	ldrb	r2, [r7, #5]
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	4413      	add	r3, r2
 8000690:	753b      	strb	r3, [r7, #20]
		uint8_t stringToSend[]  = {ESC, BRACKET, idxRow + '0', ';', secondDigit + '0', firstDigit + '0', CURSOR_POS_CMD};
 8000692:	231b      	movs	r3, #27
 8000694:	733b      	strb	r3, [r7, #12]
 8000696:	235b      	movs	r3, #91	@ 0x5b
 8000698:	737b      	strb	r3, [r7, #13]
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	3330      	adds	r3, #48	@ 0x30
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	73bb      	strb	r3, [r7, #14]
 80006a2:	233b      	movs	r3, #59	@ 0x3b
 80006a4:	73fb      	strb	r3, [r7, #15]
 80006a6:	7d7b      	ldrb	r3, [r7, #21]
 80006a8:	3330      	adds	r3, #48	@ 0x30
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	743b      	strb	r3, [r7, #16]
 80006ae:	7dbb      	ldrb	r3, [r7, #22]
 80006b0:	3330      	adds	r3, #48	@ 0x30
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	747b      	strb	r3, [r7, #17]
 80006b6:	2348      	movs	r3, #72	@ 0x48
 80006b8:	74bb      	strb	r3, [r7, #18]
		if (lengthToPrint > 40) {
 80006ba:	7d3b      	ldrb	r3, [r7, #20]
 80006bc:	2b28      	cmp	r3, #40	@ 0x28
 80006be:	d903      	bls.n	80006c8 <LCD_WriteStringAtPos+0x9c>
			//truncate the lenght of the string
			//if it's greater than the positions number of a line
			length = 40 - idxCol;
 80006c0:	79bb      	ldrb	r3, [r7, #6]
 80006c2:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 80006c6:	717b      	strb	r3, [r7, #5]
		}
		LCD_SendBytes(stringToSend, 7);
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2107      	movs	r1, #7
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ff2a 	bl	8000528 <LCD_SendBytes>
		LCD_SendBytes((uint8_t *)strLn, length);
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4619      	mov	r1, r3
 80006d8:	6838      	ldr	r0, [r7, #0]
 80006da:	f7ff ff25 	bl	8000528 <LCD_SendBytes>
	}
	return bResult;
 80006de:	7dfb      	ldrb	r3, [r7, #23]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	cccccccd 	.word	0xcccccccd

080006ec <LCD_disp_int>:
	}
	return bResult;
}

/* Вывод целого числа, начиная с заданной позиции */
static void LCD_disp_int(uint8_t idxRow, uint8_t idxCol, int8_t num, int8_t digits){
 80006ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006f0:	b087      	sub	sp, #28
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	4606      	mov	r6, r0
 80006f6:	4608      	mov	r0, r1
 80006f8:	4611      	mov	r1, r2
 80006fa:	461a      	mov	r2, r3
 80006fc:	4633      	mov	r3, r6
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	4603      	mov	r3, r0
 8000702:	71bb      	strb	r3, [r7, #6]
 8000704:	460b      	mov	r3, r1
 8000706:	717b      	strb	r3, [r7, #5]
 8000708:	4613      	mov	r3, r2
 800070a:	713b      	strb	r3, [r7, #4]
 800070c:	466b      	mov	r3, sp
 800070e:	461e      	mov	r6, r3
	char temp_char[digits+1];
 8000710:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000714:	1c59      	adds	r1, r3, #1
 8000716:	1e4b      	subs	r3, r1, #1
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	460a      	mov	r2, r1
 800071c:	2300      	movs	r3, #0
 800071e:	4690      	mov	r8, r2
 8000720:	4699      	mov	r9, r3
 8000722:	f04f 0200 	mov.w	r2, #0
 8000726:	f04f 0300 	mov.w	r3, #0
 800072a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800072e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000732:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000736:	460a      	mov	r2, r1
 8000738:	2300      	movs	r3, #0
 800073a:	4614      	mov	r4, r2
 800073c:	461d      	mov	r5, r3
 800073e:	f04f 0200 	mov.w	r2, #0
 8000742:	f04f 0300 	mov.w	r3, #0
 8000746:	00eb      	lsls	r3, r5, #3
 8000748:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800074c:	00e2      	lsls	r2, r4, #3
 800074e:	460b      	mov	r3, r1
 8000750:	3307      	adds	r3, #7
 8000752:	08db      	lsrs	r3, r3, #3
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	ebad 0d03 	sub.w	sp, sp, r3
 800075a:	466b      	mov	r3, sp
 800075c:	3300      	adds	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]

	if(num < 0){
 8000760:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000764:	2b00      	cmp	r3, #0
 8000766:	da07      	bge.n	8000778 <LCD_disp_int+0x8c>
		temp_char[0] = '-';
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	222d      	movs	r2, #45	@ 0x2d
 800076c:	701a      	strb	r2, [r3, #0]
		num = -num;
 800076e:	797b      	ldrb	r3, [r7, #5]
 8000770:	425b      	negs	r3, r3
 8000772:	b2db      	uxtb	r3, r3
 8000774:	717b      	strb	r3, [r7, #5]
 8000776:	e002      	b.n	800077e <LCD_disp_int+0x92>
	}else{
		temp_char[0] = ' ';
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2220      	movs	r2, #32
 800077c:	701a      	strb	r2, [r3, #0]
	}
	for(int i=digits; i>0; i--){
 800077e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	e021      	b.n	80007ca <LCD_disp_int+0xde>
		temp_char[i] = '0'+num%10;
 8000786:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800078a:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <LCD_disp_int+0x100>)
 800078c:	fb83 1302 	smull	r1, r3, r3, r2
 8000790:	1099      	asrs	r1, r3, #2
 8000792:	17d3      	asrs	r3, r2, #31
 8000794:	1ac9      	subs	r1, r1, r3
 8000796:	460b      	mov	r3, r1
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	440b      	add	r3, r1
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	3330      	adds	r3, #48	@ 0x30
 80007a6:	b2d9      	uxtb	r1, r3
 80007a8:	68fa      	ldr	r2, [r7, #12]
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	4413      	add	r3, r2
 80007ae:	460a      	mov	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
		num = num/10;
 80007b2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80007b6:	4a0d      	ldr	r2, [pc, #52]	@ (80007ec <LCD_disp_int+0x100>)
 80007b8:	fb82 1203 	smull	r1, r2, r2, r3
 80007bc:	1092      	asrs	r2, r2, #2
 80007be:	17db      	asrs	r3, r3, #31
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	717b      	strb	r3, [r7, #5]
	for(int i=digits; i>0; i--){
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dcda      	bgt.n	8000786 <LCD_disp_int+0x9a>
	}

	LCD_WriteStringAtPos(idxRow, idxCol, temp_char, digits+1);
 80007d0:	793b      	ldrb	r3, [r7, #4]
 80007d2:	3301      	adds	r3, #1
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	79b9      	ldrb	r1, [r7, #6]
 80007d8:	79f8      	ldrb	r0, [r7, #7]
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	f7ff ff26 	bl	800062c <LCD_WriteStringAtPos>
 80007e0:	46b5      	mov	sp, r6
}
 80007e2:	bf00      	nop
 80007e4:	371c      	adds	r7, #28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80007ec:	66666667 	.word	0x66666667

080007f0 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
if(huart == &huart5) {
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a23      	ldr	r2, [pc, #140]	@ (8000888 <HAL_UART_RxCpltCallback+0x98>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d139      	bne.n	8000874 <HAL_UART_RxCpltCallback+0x84>
HAL_GPIO_WritePin(Sonic_RX_GPIO_Port, Sonic_RX_Pin, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000806:	4821      	ldr	r0, [pc, #132]	@ (800088c <HAL_UART_RxCpltCallback+0x9c>)
 8000808:	f001 f98e 	bl	8001b28 <HAL_GPIO_WritePin>
sonic_data = (int)(2.54*((regData[1]-'0')*100 + (regData[2]-'0')*10 + (regData[3]-'0')));
 800080c:	4b20      	ldr	r3, [pc, #128]	@ (8000890 <HAL_UART_RxCpltCallback+0xa0>)
 800080e:	785b      	ldrb	r3, [r3, #1]
 8000810:	3b30      	subs	r3, #48	@ 0x30
 8000812:	2264      	movs	r2, #100	@ 0x64
 8000814:	fb02 f103 	mul.w	r1, r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <HAL_UART_RxCpltCallback+0xa0>)
 800081a:	789b      	ldrb	r3, [r3, #2]
 800081c:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000820:	4613      	mov	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	18ca      	adds	r2, r1, r3
 800082a:	4b19      	ldr	r3, [pc, #100]	@ (8000890 <HAL_UART_RxCpltCallback+0xa0>)
 800082c:	78db      	ldrb	r3, [r3, #3]
 800082e:	3b30      	subs	r3, #48	@ 0x30
 8000830:	4413      	add	r3, r2
 8000832:	ee07 3a90 	vmov	s15, r3
 8000836:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800083a:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8000880 <HAL_UART_RxCpltCallback+0x90>
 800083e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000842:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000846:	ee17 2a90 	vmov	r2, s15
 800084a:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <HAL_UART_RxCpltCallback+0xa4>)
 800084c:	601a      	str	r2, [r3, #0]
LCD_disp_int(0,7,(int)sonic_data,3);
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <HAL_UART_RxCpltCallback+0xa4>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	b25a      	sxtb	r2, r3
 8000854:	2303      	movs	r3, #3
 8000856:	2107      	movs	r1, #7
 8000858:	2000      	movs	r0, #0
 800085a:	f7ff ff47 	bl	80006ec <LCD_disp_int>
HAL_UART_Receive_IT(&huart5, regData, 5);
 800085e:	2205      	movs	r2, #5
 8000860:	490b      	ldr	r1, [pc, #44]	@ (8000890 <HAL_UART_RxCpltCallback+0xa0>)
 8000862:	4809      	ldr	r0, [pc, #36]	@ (8000888 <HAL_UART_RxCpltCallback+0x98>)
 8000864:	f003 fc22 	bl	80040ac <HAL_UART_Receive_IT>
HAL_GPIO_WritePin(Sonic_RX_GPIO_Port, Sonic_RX_Pin, 1);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800086e:	4807      	ldr	r0, [pc, #28]	@ (800088c <HAL_UART_RxCpltCallback+0x9c>)
 8000870:	f001 f95a 	bl	8001b28 <HAL_GPIO_WritePin>
}
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	f3af 8000 	nop.w
 8000880:	851eb852 	.word	0x851eb852
 8000884:	400451eb 	.word	0x400451eb
 8000888:	200000c8 	.word	0x200000c8
 800088c:	40020400 	.word	0x40020400
 8000890:	20000228 	.word	0x20000228
 8000894:	20000234 	.word	0x20000234

08000898 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
if(htim->Instance == TIM1) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a07      	ldr	r2, [pc, #28]	@ (80008c4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d107      	bne.n	80008ba <HAL_TIM_PeriodElapsedCallback+0x22>
HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80008aa:	2101      	movs	r1, #1
 80008ac:	4806      	ldr	r0, [pc, #24]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008ae:	f001 f954 	bl	8001b5a <HAL_GPIO_TogglePin>
HAL_GPIO_TogglePin(Speaker_GPIO_Port, Speaker_Pin);
 80008b2:	2140      	movs	r1, #64	@ 0x40
 80008b4:	4805      	ldr	r0, [pc, #20]	@ (80008cc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80008b6:	f001 f950 	bl	8001b5a <HAL_GPIO_TogglePin>
}
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40010000 	.word	0x40010000
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40020800 	.word	0x40020800

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d6:	f000 fd56 	bl	8001386 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008da:	f000 f87b 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008de:	f000 fa1f 	bl	8000d20 <MX_GPIO_Init>
  MX_UART5_Init();
 80008e2:	f000 f97b 	bl	8000bdc <MX_UART5_Init>
  MX_I2C2_Init();
 80008e6:	f000 f8e5 	bl	8000ab4 <MX_I2C2_Init>
  MX_TIM1_Init();
 80008ea:	f000 f923 	bl	8000b34 <MX_TIM1_Init>
  MX_UART7_Init();
 80008ee:	f000 f9bb 	bl	8000c68 <MX_UART7_Init>
  MX_USART3_Init();
 80008f2:	f000 f9e9 	bl	8000cc8 <MX_USART3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80008f6:	482f      	ldr	r0, [pc, #188]	@ (80009b4 <main+0xe4>)
 80008f8:	f002 febc 	bl	8003674 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart5, regData, 5);
 80008fc:	2205      	movs	r2, #5
 80008fe:	492e      	ldr	r1, [pc, #184]	@ (80009b8 <main+0xe8>)
 8000900:	482e      	ldr	r0, [pc, #184]	@ (80009bc <main+0xec>)
 8000902:	f003 fbd3 	bl	80040ac <HAL_UART_Receive_IT>
  char Text_int[16] = {"Range: cm "};
 8000906:	4a2e      	ldr	r2, [pc, #184]	@ (80009c0 <main+0xf0>)
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	ca07      	ldmia	r2, {r0, r1, r2}
 800090e:	c303      	stmia	r3!, {r0, r1}
 8000910:	801a      	strh	r2, [r3, #0]
 8000912:	3302      	adds	r3, #2
 8000914:	0c12      	lsrs	r2, r2, #16
 8000916:	701a      	strb	r2, [r3, #0]
 8000918:	f107 031b 	add.w	r3, r7, #27
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	711a      	strb	r2, [r3, #4]
  LCD_DisplaySet(true, true);
 8000922:	2101      	movs	r1, #1
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff fe15 	bl	8000554 <LCD_DisplaySet>
  LCD_DisplayClear(); // clear display, return cursor home
 800092a:	f7ff fe69 	bl	8000600 <LCD_DisplayClear>
  LCD_WriteStringAtPos(0, 0, Text_int, 16);
 800092e:	f107 0210 	add.w	r2, r7, #16
 8000932:	2310      	movs	r3, #16
 8000934:	2100      	movs	r1, #0
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff fe78 	bl	800062c <LCD_WriteStringAtPos>

  uint8_t TxBuf[10];
  TxBuf[0] = 0xE; // b01001100
 800093c:	230e      	movs	r3, #14
 800093e:	713b      	strb	r3, [r7, #4]
  TxBuf[1] = 0x2A; // b01010100
 8000940:	232a      	movs	r3, #42	@ 0x2a
 8000942:	717b      	strb	r3, [r7, #5]
  TxBuf[2] = 0x38; // b10011101
 8000944:	2338      	movs	r3, #56	@ 0x38
 8000946:	71bb      	strb	r3, [r7, #6]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_USART_Transmit_IT(&husart3,TxBuf,3);
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2203      	movs	r2, #3
 800094c:	4619      	mov	r1, r3
 800094e:	481d      	ldr	r0, [pc, #116]	@ (80009c4 <main+0xf4>)
 8000950:	f004 fef2 	bl	8005738 <HAL_USART_Transmit_IT>
	  HAL_UART_Transmit_IT(&huart7,TxBuf,3);
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2203      	movs	r2, #3
 8000958:	4619      	mov	r1, r3
 800095a:	481b      	ldr	r0, [pc, #108]	@ (80009c8 <main+0xf8>)
 800095c:	f003 fb48 	bl	8003ff0 <HAL_UART_Transmit_IT>
	  TimerPeriod = (sonic_data-15)*200;
 8000960:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <main+0xfc>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3b0f      	subs	r3, #15
 8000966:	22c8      	movs	r2, #200	@ 0xc8
 8000968:	fb02 f303 	mul.w	r3, r2, r3
 800096c:	4a18      	ldr	r2, [pc, #96]	@ (80009d0 <main+0x100>)
 800096e:	6013      	str	r3, [r2, #0]
	  if(TimerPeriod>65535){TimerPeriod=65535;}
 8000970:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <main+0x100>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000978:	db03      	blt.n	8000982 <main+0xb2>
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <main+0x100>)
 800097c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000980:	601a      	str	r2, [r3, #0]
	  if(TimerPeriod<1){TimerPeriod=1;}
 8000982:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <main+0x100>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	dc02      	bgt.n	8000990 <main+0xc0>
 800098a:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <main+0x100>)
 800098c:	2201      	movs	r2, #1
 800098e:	601a      	str	r2, [r3, #0]
	  htim1.Init.Period = TimerPeriod;
 8000990:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <main+0x100>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <main+0xe4>)
 8000998:	60da      	str	r2, [r3, #12]
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800099a:	4806      	ldr	r0, [pc, #24]	@ (80009b4 <main+0xe4>)
 800099c:	f002 fe12 	bl	80035c4 <HAL_TIM_Base_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <main+0xda>
	  {
	  Error_Handler();
 80009a6:	f000 fa35 	bl	8000e14 <Error_Handler>
	  }
	  HAL_Delay(300);
 80009aa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009ae:	f000 fd47 	bl	8001440 <HAL_Delay>
	  HAL_USART_Transmit_IT(&husart3,TxBuf,3);
 80009b2:	e7c9      	b.n	8000948 <main+0x78>
 80009b4:	2000007c 	.word	0x2000007c
 80009b8:	20000228 	.word	0x20000228
 80009bc:	200000c8 	.word	0x200000c8
 80009c0:	0800610c 	.word	0x0800610c
 80009c4:	200001d8 	.word	0x200001d8
 80009c8:	20000150 	.word	0x20000150
 80009cc:	20000234 	.word	0x20000234
 80009d0:	20000238 	.word	0x20000238

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	@ 0x50
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	2234      	movs	r2, #52	@ 0x34
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f005 fb4b 	bl	800607e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f8:	4b2c      	ldr	r3, [pc, #176]	@ (8000aac <SystemClock_Config+0xd8>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	4a2b      	ldr	r2, [pc, #172]	@ (8000aac <SystemClock_Config+0xd8>)
 80009fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a04:	4b29      	ldr	r3, [pc, #164]	@ (8000aac <SystemClock_Config+0xd8>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a10:	4b27      	ldr	r3, [pc, #156]	@ (8000ab0 <SystemClock_Config+0xdc>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a18:	4a25      	ldr	r2, [pc, #148]	@ (8000ab0 <SystemClock_Config+0xdc>)
 8000a1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	4b23      	ldr	r3, [pc, #140]	@ (8000ab0 <SystemClock_Config+0xdc>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a30:	2301      	movs	r3, #1
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a34:	2310      	movs	r3, #16
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a40:	2310      	movs	r3, #16
 8000a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a44:	23c0      	movs	r3, #192	@ 0xc0
 8000a46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 fcf7 	bl	800244c <HAL_RCC_OscConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a64:	f000 f9d6 	bl	8000e14 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a68:	f001 fca0 	bl	80023ac <HAL_PWREx_EnableOverDrive>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a72:	f000 f9cf 	bl	8000e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a76:	230f      	movs	r3, #15
 8000a78:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	2103      	movs	r1, #3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 ff88 	bl	80029a8 <HAL_RCC_ClockConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000a9e:	f000 f9b9 	bl	8000e14 <Error_Handler>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3750      	adds	r7, #80	@ 0x50
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40007000 	.word	0x40007000

08000ab4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <MX_I2C2_Init+0x74>)
 8000aba:	4a1c      	ldr	r2, [pc, #112]	@ (8000b2c <MX_I2C2_Init+0x78>)
 8000abc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <MX_I2C2_Init+0x74>)
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b30 <MX_I2C2_Init+0x7c>)
 8000ac2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 144;
 8000ac4:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <MX_I2C2_Init+0x74>)
 8000ac6:	2290      	movs	r2, #144	@ 0x90
 8000ac8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aca:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <MX_I2C2_Init+0x74>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad0:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <MX_I2C2_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ad6:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <MX_I2C2_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000adc:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <MX_I2C2_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <MX_I2C2_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <MX_I2C2_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aee:	480e      	ldr	r0, [pc, #56]	@ (8000b28 <MX_I2C2_Init+0x74>)
 8000af0:	f001 f84e 	bl	8001b90 <HAL_I2C_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000afa:	f000 f98b 	bl	8000e14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000afe:	2100      	movs	r1, #0
 8000b00:	4809      	ldr	r0, [pc, #36]	@ (8000b28 <MX_I2C2_Init+0x74>)
 8000b02:	f001 fbbb 	bl	800227c <HAL_I2CEx_ConfigAnalogFilter>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b0c:	f000 f982 	bl	8000e14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b10:	2100      	movs	r1, #0
 8000b12:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <MX_I2C2_Init+0x74>)
 8000b14:	f001 fbfd 	bl	8002312 <HAL_I2CEx_ConfigDigitalFilter>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b1e:	f000 f979 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000028 	.word	0x20000028
 8000b2c:	40005800 	.word	0x40005800
 8000b30:	20303e5d 	.word	0x20303e5d

08000b34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b52:	4b20      	ldr	r3, [pc, #128]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000b54:	4a20      	ldr	r2, [pc, #128]	@ (8000bd8 <MX_TIM1_Init+0xa4>)
 8000b56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47999;
 8000b58:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000b5a:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000b5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b60:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b66:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000b68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b74:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b80:	4814      	ldr	r0, [pc, #80]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000b82:	f002 fd1f 	bl	80035c4 <HAL_TIM_Base_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000b8c:	f000 f942 	bl	8000e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b96:	f107 0310 	add.w	r3, r7, #16
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480d      	ldr	r0, [pc, #52]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000b9e:	f002 ff01 	bl	80039a4 <HAL_TIM_ConfigClockSource>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000ba8:	f000 f934 	bl	8000e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000bbe:	f003 f91d 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000bc8:	f000 f924 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000007c 	.word	0x2000007c
 8000bd8:	40010000 	.word	0x40010000

08000bdc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */
	HAL_GPIO_WritePin(Sonic_RX_GPIO_Port, Sonic_RX_Pin, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000be6:	481d      	ldr	r0, [pc, #116]	@ (8000c5c <MX_UART5_Init+0x80>)
 8000be8:	f000 ff9e 	bl	8001b28 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8000bec:	20fa      	movs	r0, #250	@ 0xfa
 8000bee:	f000 fc27 	bl	8001440 <HAL_Delay>
	HAL_GPIO_WritePin(Sonic_RX_GPIO_Port, Sonic_RX_Pin, 1);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bf8:	4818      	ldr	r0, [pc, #96]	@ (8000c5c <MX_UART5_Init+0x80>)
 8000bfa:	f000 ff95 	bl	8001b28 <HAL_GPIO_WritePin>
	HAL_Delay(49);
 8000bfe:	2031      	movs	r0, #49	@ 0x31
 8000c00:	f000 fc1e 	bl	8001440 <HAL_Delay>
	HAL_Delay(49);
 8000c04:	2031      	movs	r0, #49	@ 0x31
 8000c06:	f000 fc1b 	bl	8001440 <HAL_Delay>
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <MX_UART5_Init+0x84>)
 8000c0c:	4a15      	ldr	r2, [pc, #84]	@ (8000c64 <MX_UART5_Init+0x88>)
 8000c0e:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000c10:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <MX_UART5_Init+0x84>)
 8000c12:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c16:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <MX_UART5_Init+0x84>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <MX_UART5_Init+0x84>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000c24:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <MX_UART5_Init+0x84>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <MX_UART5_Init+0x84>)
 8000c2c:	220c      	movs	r2, #12
 8000c2e:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c30:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <MX_UART5_Init+0x84>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c36:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <MX_UART5_Init+0x84>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <MX_UART5_Init+0x84>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c42:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <MX_UART5_Init+0x84>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c48:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <MX_UART5_Init+0x84>)
 8000c4a:	f003 f983 	bl	8003f54 <HAL_UART_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000c54:	f000 f8de 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40020400 	.word	0x40020400
 8000c60:	200000c8 	.word	0x200000c8
 8000c64:	40005000 	.word	0x40005000

08000c68 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <MX_UART7_Init+0x58>)
 8000c6e:	4a15      	ldr	r2, [pc, #84]	@ (8000cc4 <MX_UART7_Init+0x5c>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000c72:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <MX_UART7_Init+0x58>)
 8000c74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c78:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <MX_UART7_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <MX_UART7_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <MX_UART7_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <MX_UART7_Init+0x58>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <MX_UART7_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <MX_UART7_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <MX_UART7_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <MX_UART7_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <MX_UART7_Init+0x58>)
 8000cac:	f003 f952 	bl	8003f54 <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000cb6:	f000 f8ad 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000150 	.word	0x20000150
 8000cc4:	40007800 	.word	0x40007800

08000cc8 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	@ (8000d18 <MX_USART3_Init+0x50>)
 8000cce:	4a13      	ldr	r2, [pc, #76]	@ (8000d1c <MX_USART3_Init+0x54>)
 8000cd0:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <MX_USART3_Init+0x50>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000cda:	4b0f      	ldr	r3, [pc, #60]	@ (8000d18 <MX_USART3_Init+0x50>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <MX_USART3_Init+0x50>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <MX_USART3_Init+0x50>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <MX_USART3_Init+0x50>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <MX_USART3_Init+0x50>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8000cf8:	4b07      	ldr	r3, [pc, #28]	@ (8000d18 <MX_USART3_Init+0x50>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000cfe:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <MX_USART3_Init+0x50>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000d04:	4804      	ldr	r0, [pc, #16]	@ (8000d18 <MX_USART3_Init+0x50>)
 8000d06:	f004 fccc 	bl	80056a2 <HAL_USART_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART3_Init+0x4c>
  {
    Error_Handler();
 8000d10:	f000 f880 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200001d8 	.word	0x200001d8
 8000d1c:	40004800 	.word	0x40004800

08000d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	@ 0x28
 8000d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d36:	4b34      	ldr	r3, [pc, #208]	@ (8000e08 <MX_GPIO_Init+0xe8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a33      	ldr	r2, [pc, #204]	@ (8000e08 <MX_GPIO_Init+0xe8>)
 8000d3c:	f043 0320 	orr.w	r3, r3, #32
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b31      	ldr	r3, [pc, #196]	@ (8000e08 <MX_GPIO_Init+0xe8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0320 	and.w	r3, r3, #32
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e08 <MX_GPIO_Init+0xe8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a2d      	ldr	r2, [pc, #180]	@ (8000e08 <MX_GPIO_Init+0xe8>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e08 <MX_GPIO_Init+0xe8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	4b28      	ldr	r3, [pc, #160]	@ (8000e08 <MX_GPIO_Init+0xe8>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a27      	ldr	r2, [pc, #156]	@ (8000e08 <MX_GPIO_Init+0xe8>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b25      	ldr	r3, [pc, #148]	@ (8000e08 <MX_GPIO_Init+0xe8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	4b22      	ldr	r3, [pc, #136]	@ (8000e08 <MX_GPIO_Init+0xe8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a21      	ldr	r2, [pc, #132]	@ (8000e08 <MX_GPIO_Init+0xe8>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <MX_GPIO_Init+0xe8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <MX_GPIO_Init+0xe8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	4a1b      	ldr	r2, [pc, #108]	@ (8000e08 <MX_GPIO_Init+0xe8>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <MX_GPIO_Init+0xe8>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|Sonic_RX_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f248 0101 	movw	r1, #32769	@ 0x8001
 8000db4:	4815      	ldr	r0, [pc, #84]	@ (8000e0c <MX_GPIO_Init+0xec>)
 8000db6:	f000 feb7 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Speaker_GPIO_Port, Speaker_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2140      	movs	r1, #64	@ 0x40
 8000dbe:	4814      	ldr	r0, [pc, #80]	@ (8000e10 <MX_GPIO_Init+0xf0>)
 8000dc0:	f000 feb2 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin Sonic_RX_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|Sonic_RX_Pin;
 8000dc4:	f248 0301 	movw	r3, #32769	@ 0x8001
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480b      	ldr	r0, [pc, #44]	@ (8000e0c <MX_GPIO_Init+0xec>)
 8000dde:	f000 fcf7 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Speaker_Pin */
  GPIO_InitStruct.Pin = Speaker_Pin;
 8000de2:	2340      	movs	r3, #64	@ 0x40
 8000de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Speaker_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <MX_GPIO_Init+0xf0>)
 8000dfa:	f000 fce9 	bl	80017d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	@ 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020400 	.word	0x40020400
 8000e10:	40020800 	.word	0x40020800

08000e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e18:	b672      	cpsid	i
}
 8000e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <Error_Handler+0x8>

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b0f      	ldr	r3, [pc, #60]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e32:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	4a08      	ldr	r2, [pc, #32]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800

08000e68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b0ae      	sub	sp, #184	@ 0xb8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2290      	movs	r2, #144	@ 0x90
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f005 f8f8 	bl	800607e <memset>
  if(hi2c->Instance==I2C2)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a21      	ldr	r2, [pc, #132]	@ (8000f18 <HAL_I2C_MspInit+0xb0>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d13b      	bne.n	8000f10 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e9c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f001 ff64 	bl	8002d74 <HAL_RCCEx_PeriphCLKConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000eb2:	f7ff ffaf 	bl	8000e14 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eb6:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <HAL_I2C_MspInit+0xb4>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a18      	ldr	r2, [pc, #96]	@ (8000f1c <HAL_I2C_MspInit+0xb4>)
 8000ebc:	f043 0320 	orr.w	r3, r3, #32
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <HAL_I2C_MspInit+0xb4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0320 	and.w	r3, r3, #32
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed4:	2312      	movs	r3, #18
 8000ed6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480b      	ldr	r0, [pc, #44]	@ (8000f20 <HAL_I2C_MspInit+0xb8>)
 8000ef4:	f000 fc6c 	bl	80017d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <HAL_I2C_MspInit+0xb4>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efc:	4a07      	ldr	r2, [pc, #28]	@ (8000f1c <HAL_I2C_MspInit+0xb4>)
 8000efe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f04:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <HAL_I2C_MspInit+0xb4>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f10:	bf00      	nop
 8000f12:	37b8      	adds	r7, #184	@ 0xb8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40005800 	.word	0x40005800
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40021400 	.word	0x40021400

08000f24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a19      	ldr	r2, [pc, #100]	@ (8000f98 <HAL_TIM_Base_MspInit+0x74>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d12b      	bne.n	8000f8e <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f36:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <HAL_TIM_Base_MspInit+0x78>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	4a18      	ldr	r2, [pc, #96]	@ (8000f9c <HAL_TIM_Base_MspInit+0x78>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f42:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <HAL_TIM_Base_MspInit+0x78>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	2018      	movs	r0, #24
 8000f54:	f000 fb73 	bl	800163e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000f58:	2018      	movs	r0, #24
 8000f5a:	f000 fb8c 	bl	8001676 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	2019      	movs	r0, #25
 8000f64:	f000 fb6b 	bl	800163e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f68:	2019      	movs	r0, #25
 8000f6a:	f000 fb84 	bl	8001676 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	201a      	movs	r0, #26
 8000f74:	f000 fb63 	bl	800163e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000f78:	201a      	movs	r0, #26
 8000f7a:	f000 fb7c 	bl	8001676 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	201b      	movs	r0, #27
 8000f84:	f000 fb5b 	bl	800163e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000f88:	201b      	movs	r0, #27
 8000f8a:	f000 fb74 	bl	8001676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40010000 	.word	0x40010000
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b0b0      	sub	sp, #192	@ 0xc0
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	2290      	movs	r2, #144	@ 0x90
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f005 f85c 	bl	800607e <memset>
  if(huart->Instance==UART5)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a4b      	ldr	r2, [pc, #300]	@ (80010f8 <HAL_UART_MspInit+0x158>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d145      	bne.n	800105c <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000fd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fd4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 fec8 	bl	8002d74 <HAL_RCCEx_PeriphCLKConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fea:	f7ff ff13 	bl	8000e14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000fee:	4b43      	ldr	r3, [pc, #268]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	4a42      	ldr	r2, [pc, #264]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 8000ff4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffa:	4b40      	ldr	r3, [pc, #256]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001002:	61bb      	str	r3, [r7, #24]
 8001004:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	4b3d      	ldr	r3, [pc, #244]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a3c      	ldr	r2, [pc, #240]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b3a      	ldr	r3, [pc, #232]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800101e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001022:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001038:	2308      	movs	r3, #8
 800103a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001042:	4619      	mov	r1, r3
 8001044:	482e      	ldr	r0, [pc, #184]	@ (8001100 <HAL_UART_MspInit+0x160>)
 8001046:	f000 fbc3 	bl	80017d0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	2035      	movs	r0, #53	@ 0x35
 8001050:	f000 faf5 	bl	800163e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001054:	2035      	movs	r0, #53	@ 0x35
 8001056:	f000 fb0e 	bl	8001676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800105a:	e048      	b.n	80010ee <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==UART7)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a28      	ldr	r2, [pc, #160]	@ (8001104 <HAL_UART_MspInit+0x164>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d143      	bne.n	80010ee <HAL_UART_MspInit+0x14e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001066:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800106a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800106c:	2300      	movs	r3, #0
 800106e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4618      	mov	r0, r3
 8001076:	f001 fe7d 	bl	8002d74 <HAL_RCCEx_PeriphCLKConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8001080:	f7ff fec8 	bl	8000e14 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001084:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001088:	4a1c      	ldr	r2, [pc, #112]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 800108a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800108e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001090:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001094:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800109c:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	4a16      	ldr	r2, [pc, #88]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a8:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <HAL_UART_MspInit+0x15c>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ac:	f003 0320 	and.w	r3, r3, #32
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010b4:	23c0      	movs	r3, #192	@ 0xc0
 80010b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80010cc:	2308      	movs	r3, #8
 80010ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010d2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80010d6:	4619      	mov	r1, r3
 80010d8:	480b      	ldr	r0, [pc, #44]	@ (8001108 <HAL_UART_MspInit+0x168>)
 80010da:	f000 fb79 	bl	80017d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2052      	movs	r0, #82	@ 0x52
 80010e4:	f000 faab 	bl	800163e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80010e8:	2052      	movs	r0, #82	@ 0x52
 80010ea:	f000 fac4 	bl	8001676 <HAL_NVIC_EnableIRQ>
}
 80010ee:	bf00      	nop
 80010f0:	37c0      	adds	r7, #192	@ 0xc0
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40005000 	.word	0x40005000
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020400 	.word	0x40020400
 8001104:	40007800 	.word	0x40007800
 8001108:	40021400 	.word	0x40021400

0800110c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0ae      	sub	sp, #184	@ 0xb8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2290      	movs	r2, #144	@ 0x90
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f004 ffa6 	bl	800607e <memset>
  if(husart->Instance==USART3)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a37      	ldr	r2, [pc, #220]	@ (8001214 <HAL_USART_MspInit+0x108>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d166      	bne.n	800120a <HAL_USART_MspInit+0xfe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800113c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001140:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001142:	2300      	movs	r3, #0
 8001144:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4618      	mov	r0, r3
 800114c:	f001 fe12 	bl	8002d74 <HAL_RCCEx_PeriphCLKConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_USART_MspInit+0x4e>
    {
      Error_Handler();
 8001156:	f7ff fe5d 	bl	8000e14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800115a:	4b2f      	ldr	r3, [pc, #188]	@ (8001218 <HAL_USART_MspInit+0x10c>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	4a2e      	ldr	r2, [pc, #184]	@ (8001218 <HAL_USART_MspInit+0x10c>)
 8001160:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001164:	6413      	str	r3, [r2, #64]	@ 0x40
 8001166:	4b2c      	ldr	r3, [pc, #176]	@ (8001218 <HAL_USART_MspInit+0x10c>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	4b29      	ldr	r3, [pc, #164]	@ (8001218 <HAL_USART_MspInit+0x10c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a28      	ldr	r2, [pc, #160]	@ (8001218 <HAL_USART_MspInit+0x10c>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b26      	ldr	r3, [pc, #152]	@ (8001218 <HAL_USART_MspInit+0x10c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800118a:	4b23      	ldr	r3, [pc, #140]	@ (8001218 <HAL_USART_MspInit+0x10c>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a22      	ldr	r2, [pc, #136]	@ (8001218 <HAL_USART_MspInit+0x10c>)
 8001190:	f043 0308 	orr.w	r3, r3, #8
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
 8001196:	4b20      	ldr	r3, [pc, #128]	@ (8001218 <HAL_USART_MspInit+0x10c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    PD10     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011a2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011bc:	2307      	movs	r3, #7
 80011be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011c6:	4619      	mov	r1, r3
 80011c8:	4814      	ldr	r0, [pc, #80]	@ (800121c <HAL_USART_MspInit+0x110>)
 80011ca:	f000 fb01 	bl	80017d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e2:	2303      	movs	r3, #3
 80011e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011e8:	2307      	movs	r3, #7
 80011ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011f2:	4619      	mov	r1, r3
 80011f4:	480a      	ldr	r0, [pc, #40]	@ (8001220 <HAL_USART_MspInit+0x114>)
 80011f6:	f000 faeb 	bl	80017d0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2027      	movs	r0, #39	@ 0x27
 8001200:	f000 fa1d 	bl	800163e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001204:	2027      	movs	r0, #39	@ 0x27
 8001206:	f000 fa36 	bl	8001676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800120a:	bf00      	nop
 800120c:	37b8      	adds	r7, #184	@ 0xb8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40004800 	.word	0x40004800
 8001218:	40023800 	.word	0x40023800
 800121c:	40020400 	.word	0x40020400
 8001220:	40020c00 	.word	0x40020c00

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <NMI_Handler+0x4>

0800122c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <HardFault_Handler+0x4>

08001234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <MemManage_Handler+0x4>

0800123c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <UsageFault_Handler+0x4>

0800124c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127a:	f000 f8c1 	bl	8001400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800128a:	f002 fa6b 	bl	8003764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000007c 	.word	0x2000007c

08001298 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800129e:	f002 fa61 	bl	8003764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000007c 	.word	0x2000007c

080012ac <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012b0:	4802      	ldr	r0, [pc, #8]	@ (80012bc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80012b2:	f002 fa57 	bl	8003764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000007c 	.word	0x2000007c

080012c0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012c4:	4802      	ldr	r0, [pc, #8]	@ (80012d0 <TIM1_CC_IRQHandler+0x10>)
 80012c6:	f002 fa4d 	bl	8003764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000007c 	.word	0x2000007c

080012d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 80012d8:	4802      	ldr	r0, [pc, #8]	@ (80012e4 <USART3_IRQHandler+0x10>)
 80012da:	f004 fa89 	bl	80057f0 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001d8 	.word	0x200001d8

080012e8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80012ec:	4802      	ldr	r0, [pc, #8]	@ (80012f8 <UART5_IRQHandler+0x10>)
 80012ee:	f002 ff21 	bl	8004134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200000c8 	.word	0x200000c8

080012fc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001300:	4802      	ldr	r0, [pc, #8]	@ (800130c <UART7_IRQHandler+0x10>)
 8001302:	f002 ff17 	bl	8004134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000150 	.word	0x20000150

08001310 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <SystemInit+0x20>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800131a:	4a05      	ldr	r2, [pc, #20]	@ (8001330 <SystemInit+0x20>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001334:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800136c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001338:	480d      	ldr	r0, [pc, #52]	@ (8001370 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800133a:	490e      	ldr	r1, [pc, #56]	@ (8001374 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800133c:	4a0e      	ldr	r2, [pc, #56]	@ (8001378 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0b      	ldr	r2, [pc, #44]	@ (800137c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001350:	4c0b      	ldr	r4, [pc, #44]	@ (8001380 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800135e:	f7ff ffd7 	bl	8001310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001362:	f004 fe95 	bl	8006090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001366:	f7ff fab3 	bl	80008d0 <main>
  bx  lr    
 800136a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800136c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001374:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001378:	08006144 	.word	0x08006144
  ldr r2, =_sbss
 800137c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001380:	20000240 	.word	0x20000240

08001384 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001384:	e7fe      	b.n	8001384 <ADC_IRQHandler>

08001386 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138a:	2003      	movs	r0, #3
 800138c:	f000 f94c 	bl	8001628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001390:	200f      	movs	r0, #15
 8001392:	f000 f805 	bl	80013a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001396:	f7ff fd43 	bl	8000e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a8:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <HAL_InitTick+0x54>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <HAL_InitTick+0x58>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f967 	bl	8001692 <HAL_SYSTICK_Config>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00e      	b.n	80013ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b0f      	cmp	r3, #15
 80013d2:	d80a      	bhi.n	80013ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d4:	2200      	movs	r2, #0
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f000 f92f 	bl	800163e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e0:	4a06      	ldr	r2, [pc, #24]	@ (80013fc <HAL_InitTick+0x5c>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e000      	b.n	80013ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000008 	.word	0x20000008
 80013fc:	20000004 	.word	0x20000004

08001400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <HAL_IncTick+0x20>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_IncTick+0x24>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4413      	add	r3, r2
 8001410:	4a04      	ldr	r2, [pc, #16]	@ (8001424 <HAL_IncTick+0x24>)
 8001412:	6013      	str	r3, [r2, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000008 	.word	0x20000008
 8001424:	2000023c 	.word	0x2000023c

08001428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return uwTick;
 800142c:	4b03      	ldr	r3, [pc, #12]	@ (800143c <HAL_GetTick+0x14>)
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	2000023c 	.word	0x2000023c

08001440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001448:	f7ff ffee 	bl	8001428 <HAL_GetTick>
 800144c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001458:	d005      	beq.n	8001466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <HAL_Delay+0x44>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001466:	bf00      	nop
 8001468:	f7ff ffde 	bl	8001428 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	429a      	cmp	r2, r3
 8001476:	d8f7      	bhi.n	8001468 <HAL_Delay+0x28>
  {
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000008 	.word	0x20000008

08001488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <__NVIC_SetPriorityGrouping+0x40>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b6:	4a04      	ldr	r2, [pc, #16]	@ (80014c8 <__NVIC_SetPriorityGrouping+0x40>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00
 80014cc:	05fa0000 	.word	0x05fa0000

080014d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	db0b      	blt.n	8001516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	f003 021f 	and.w	r2, r3, #31
 8001504:	4907      	ldr	r1, [pc, #28]	@ (8001524 <__NVIC_EnableIRQ+0x38>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	2001      	movs	r0, #1
 800150e:	fa00 f202 	lsl.w	r2, r0, r2
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000e100 	.word	0xe000e100

08001528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	db0a      	blt.n	8001552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	490c      	ldr	r1, [pc, #48]	@ (8001574 <__NVIC_SetPriority+0x4c>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	0112      	lsls	r2, r2, #4
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	440b      	add	r3, r1
 800154c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001550:	e00a      	b.n	8001568 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4908      	ldr	r1, [pc, #32]	@ (8001578 <__NVIC_SetPriority+0x50>)
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	3b04      	subs	r3, #4
 8001560:	0112      	lsls	r2, r2, #4
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	440b      	add	r3, r1
 8001566:	761a      	strb	r2, [r3, #24]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000e100 	.word	0xe000e100
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	@ 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f1c3 0307 	rsb	r3, r3, #7
 8001596:	2b04      	cmp	r3, #4
 8001598:	bf28      	it	cs
 800159a:	2304      	movcs	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3304      	adds	r3, #4
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d902      	bls.n	80015ac <NVIC_EncodePriority+0x30>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3b03      	subs	r3, #3
 80015aa:	e000      	b.n	80015ae <NVIC_EncodePriority+0x32>
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	4313      	orrs	r3, r2
         );
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	@ 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015f4:	d301      	bcc.n	80015fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00f      	b.n	800161a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001624 <SysTick_Config+0x40>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001602:	210f      	movs	r1, #15
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f7ff ff8e 	bl	8001528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160c:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <SysTick_Config+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001612:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <SysTick_Config+0x40>)
 8001614:	2207      	movs	r2, #7
 8001616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	e000e010 	.word	0xe000e010

08001628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff29 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001650:	f7ff ff3e 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 8001654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	6978      	ldr	r0, [r7, #20]
 800165c:	f7ff ff8e 	bl	800157c <NVIC_EncodePriority>
 8001660:	4602      	mov	r2, r0
 8001662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff5d 	bl	8001528 <__NVIC_SetPriority>
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff31 	bl	80014ec <__NVIC_EnableIRQ>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ffa2 	bl	80015e4 <SysTick_Config>
 80016a0:	4603      	mov	r3, r0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b084      	sub	sp, #16
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016b8:	f7ff feb6 	bl	8001428 <HAL_GetTick>
 80016bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d008      	beq.n	80016dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2280      	movs	r2, #128	@ 0x80
 80016ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e052      	b.n	8001782 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0216 	bic.w	r2, r2, #22
 80016ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	2b00      	cmp	r3, #0
 8001702:	d103      	bne.n	800170c <HAL_DMA_Abort+0x62>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001708:	2b00      	cmp	r3, #0
 800170a:	d007      	beq.n	800171c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0208 	bic.w	r2, r2, #8
 800171a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0201 	bic.w	r2, r2, #1
 800172a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800172c:	e013      	b.n	8001756 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800172e:	f7ff fe7b 	bl	8001428 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b05      	cmp	r3, #5
 800173a:	d90c      	bls.n	8001756 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2220      	movs	r2, #32
 8001740:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2203      	movs	r2, #3
 8001746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e015      	b.n	8001782 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1e4      	bne.n	800172e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001768:	223f      	movs	r2, #63	@ 0x3f
 800176a:	409a      	lsls	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d004      	beq.n	80017a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2280      	movs	r2, #128	@ 0x80
 80017a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e00c      	b.n	80017c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2205      	movs	r2, #5
 80017ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0201 	bic.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	@ 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	e175      	b.n	8001adc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017f0:	2201      	movs	r2, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 8164 	bne.w	8001ad6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b01      	cmp	r3, #1
 8001818:	d005      	beq.n	8001826 <HAL_GPIO_Init+0x56>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d130      	bne.n	8001888 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800185c:	2201      	movs	r2, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 0201 	and.w	r2, r3, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b03      	cmp	r3, #3
 8001892:	d017      	beq.n	80018c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d123      	bne.n	8001918 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	69b9      	ldr	r1, [r7, #24]
 8001914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80be 	beq.w	8001ad6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	4b66      	ldr	r3, [pc, #408]	@ (8001af4 <HAL_GPIO_Init+0x324>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	4a65      	ldr	r2, [pc, #404]	@ (8001af4 <HAL_GPIO_Init+0x324>)
 8001960:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001964:	6453      	str	r3, [r2, #68]	@ 0x44
 8001966:	4b63      	ldr	r3, [pc, #396]	@ (8001af4 <HAL_GPIO_Init+0x324>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001972:	4a61      	ldr	r2, [pc, #388]	@ (8001af8 <HAL_GPIO_Init+0x328>)
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3302      	adds	r3, #2
 800197a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	220f      	movs	r2, #15
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a58      	ldr	r2, [pc, #352]	@ (8001afc <HAL_GPIO_Init+0x32c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d037      	beq.n	8001a0e <HAL_GPIO_Init+0x23e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a57      	ldr	r2, [pc, #348]	@ (8001b00 <HAL_GPIO_Init+0x330>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d031      	beq.n	8001a0a <HAL_GPIO_Init+0x23a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a56      	ldr	r2, [pc, #344]	@ (8001b04 <HAL_GPIO_Init+0x334>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d02b      	beq.n	8001a06 <HAL_GPIO_Init+0x236>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a55      	ldr	r2, [pc, #340]	@ (8001b08 <HAL_GPIO_Init+0x338>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d025      	beq.n	8001a02 <HAL_GPIO_Init+0x232>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a54      	ldr	r2, [pc, #336]	@ (8001b0c <HAL_GPIO_Init+0x33c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d01f      	beq.n	80019fe <HAL_GPIO_Init+0x22e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a53      	ldr	r2, [pc, #332]	@ (8001b10 <HAL_GPIO_Init+0x340>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d019      	beq.n	80019fa <HAL_GPIO_Init+0x22a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a52      	ldr	r2, [pc, #328]	@ (8001b14 <HAL_GPIO_Init+0x344>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d013      	beq.n	80019f6 <HAL_GPIO_Init+0x226>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a51      	ldr	r2, [pc, #324]	@ (8001b18 <HAL_GPIO_Init+0x348>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00d      	beq.n	80019f2 <HAL_GPIO_Init+0x222>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a50      	ldr	r2, [pc, #320]	@ (8001b1c <HAL_GPIO_Init+0x34c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d007      	beq.n	80019ee <HAL_GPIO_Init+0x21e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001b20 <HAL_GPIO_Init+0x350>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d101      	bne.n	80019ea <HAL_GPIO_Init+0x21a>
 80019e6:	2309      	movs	r3, #9
 80019e8:	e012      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019ea:	230a      	movs	r3, #10
 80019ec:	e010      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019ee:	2308      	movs	r3, #8
 80019f0:	e00e      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019f2:	2307      	movs	r3, #7
 80019f4:	e00c      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019f6:	2306      	movs	r3, #6
 80019f8:	e00a      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019fa:	2305      	movs	r3, #5
 80019fc:	e008      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019fe:	2304      	movs	r3, #4
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 8001a02:	2303      	movs	r3, #3
 8001a04:	e004      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e002      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	f002 0203 	and.w	r2, r2, #3
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	4093      	lsls	r3, r2
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a20:	4935      	ldr	r1, [pc, #212]	@ (8001af8 <HAL_GPIO_Init+0x328>)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a52:	4a34      	ldr	r2, [pc, #208]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a58:	4b32      	ldr	r3, [pc, #200]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a7c:	4a29      	ldr	r2, [pc, #164]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a82:	4b28      	ldr	r3, [pc, #160]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aac:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad0:	4a14      	ldr	r2, [pc, #80]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	f67f ae86 	bls.w	80017f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3724      	adds	r7, #36	@ 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40013800 	.word	0x40013800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40020800 	.word	0x40020800
 8001b08:	40020c00 	.word	0x40020c00
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40021400 	.word	0x40021400
 8001b14:	40021800 	.word	0x40021800
 8001b18:	40021c00 	.word	0x40021c00
 8001b1c:	40022000 	.word	0x40022000
 8001b20:	40022400 	.word	0x40022400
 8001b24:	40013c00 	.word	0x40013c00

08001b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b38:	787b      	ldrb	r3, [r7, #1]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b44:	e003      	b.n	8001b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	041a      	lsls	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	619a      	str	r2, [r3, #24]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b085      	sub	sp, #20
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b6c:	887a      	ldrh	r2, [r7, #2]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	041a      	lsls	r2, r3, #16
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	887b      	ldrh	r3, [r7, #2]
 8001b7a:	400b      	ands	r3, r1
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	619a      	str	r2, [r3, #24]
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e07f      	b.n	8001ca2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff f956 	bl	8000e68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2224      	movs	r2, #36	@ 0x24
 8001bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0201 	bic.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001be0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bf0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d107      	bne.n	8001c0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	e006      	b.n	8001c18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001c16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d104      	bne.n	8001c2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6859      	ldr	r1, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <HAL_I2C_Init+0x11c>)
 8001c36:	430b      	orrs	r3, r1
 8001c38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69d9      	ldr	r1, [r3, #28]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1a      	ldr	r2, [r3, #32]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	02008000 	.word	0x02008000

08001cb0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	817b      	strh	r3, [r7, #10]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b20      	cmp	r3, #32
 8001cce:	f040 80da 	bne.w	8001e86 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_I2C_Master_Transmit+0x30>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e0d3      	b.n	8001e88 <HAL_I2C_Master_Transmit+0x1d8>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ce8:	f7ff fb9e 	bl	8001428 <HAL_GetTick>
 8001cec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2319      	movs	r3, #25
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f8f0 	bl	8001ee0 <I2C_WaitOnFlagUntilTimeout>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0be      	b.n	8001e88 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2221      	movs	r2, #33	@ 0x21
 8001d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2210      	movs	r2, #16
 8001d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	893a      	ldrh	r2, [r7, #8]
 8001d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2bff      	cmp	r3, #255	@ 0xff
 8001d3a:	d90e      	bls.n	8001d5a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	22ff      	movs	r2, #255	@ 0xff
 8001d40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	8979      	ldrh	r1, [r7, #10]
 8001d4a:	4b51      	ldr	r3, [pc, #324]	@ (8001e90 <HAL_I2C_Master_Transmit+0x1e0>)
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 fa60 	bl	8002218 <I2C_TransferConfig>
 8001d58:	e06c      	b.n	8001e34 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	8979      	ldrh	r1, [r7, #10]
 8001d6c:	4b48      	ldr	r3, [pc, #288]	@ (8001e90 <HAL_I2C_Master_Transmit+0x1e0>)
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 fa4f 	bl	8002218 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001d7a:	e05b      	b.n	8001e34 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	6a39      	ldr	r1, [r7, #32]
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 f8ed 	bl	8001f60 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e07b      	b.n	8001e88 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d94:	781a      	ldrb	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001db8:	3b01      	subs	r3, #1
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d034      	beq.n	8001e34 <HAL_I2C_Master_Transmit+0x184>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d130      	bne.n	8001e34 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2180      	movs	r1, #128	@ 0x80
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 f87f 	bl	8001ee0 <I2C_WaitOnFlagUntilTimeout>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e04d      	b.n	8001e88 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	2bff      	cmp	r3, #255	@ 0xff
 8001df4:	d90e      	bls.n	8001e14 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	22ff      	movs	r2, #255	@ 0xff
 8001dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	8979      	ldrh	r1, [r7, #10]
 8001e04:	2300      	movs	r3, #0
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 fa03 	bl	8002218 <I2C_TransferConfig>
 8001e12:	e00f      	b.n	8001e34 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	8979      	ldrh	r1, [r7, #10]
 8001e26:	2300      	movs	r3, #0
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f9f2 	bl	8002218 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d19e      	bne.n	8001d7c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	6a39      	ldr	r1, [r7, #32]
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 f8cc 	bl	8001fe0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e01a      	b.n	8001e88 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2220      	movs	r2, #32
 8001e58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6859      	ldr	r1, [r3, #4]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <HAL_I2C_Master_Transmit+0x1e4>)
 8001e66:	400b      	ands	r3, r1
 8001e68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e000      	b.n	8001e88 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001e86:	2302      	movs	r3, #2
  }
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	80002000 	.word	0x80002000
 8001e94:	fe00e800 	.word	0xfe00e800

08001e98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d103      	bne.n	8001eb6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d007      	beq.n	8001ed4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699a      	ldr	r2, [r3, #24]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	619a      	str	r2, [r3, #24]
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	4613      	mov	r3, r2
 8001eee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ef0:	e022      	b.n	8001f38 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef8:	d01e      	beq.n	8001f38 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001efa:	f7ff fa95 	bl	8001428 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d302      	bcc.n	8001f10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d113      	bne.n	8001f38 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f14:	f043 0220 	orr.w	r2, r3, #32
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e00f      	b.n	8001f58 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699a      	ldr	r2, [r3, #24]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	4013      	ands	r3, r2
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	bf0c      	ite	eq
 8001f48:	2301      	moveq	r3, #1
 8001f4a:	2300      	movne	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d0cd      	beq.n	8001ef2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f6c:	e02c      	b.n	8001fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 f870 	bl	8002058 <I2C_IsErrorOccurred>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e02a      	b.n	8001fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f88:	d01e      	beq.n	8001fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f8a:	f7ff fa4d 	bl	8001428 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d302      	bcc.n	8001fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d113      	bne.n	8001fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa4:	f043 0220 	orr.w	r2, r3, #32
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e007      	b.n	8001fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d1cb      	bne.n	8001f6e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fec:	e028      	b.n	8002040 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f830 	bl	8002058 <I2C_IsErrorOccurred>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e026      	b.n	8002050 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002002:	f7ff fa11 	bl	8001428 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	429a      	cmp	r2, r3
 8002010:	d302      	bcc.n	8002018 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d113      	bne.n	8002040 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201c:	f043 0220 	orr.w	r2, r3, #32
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e007      	b.n	8002050 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b20      	cmp	r3, #32
 800204c:	d1cf      	bne.n	8001fee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	@ 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	2b00      	cmp	r3, #0
 8002082:	d068      	beq.n	8002156 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2210      	movs	r2, #16
 800208a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800208c:	e049      	b.n	8002122 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d045      	beq.n	8002122 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002096:	f7ff f9c7 	bl	8001428 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d302      	bcc.n	80020ac <I2C_IsErrorOccurred+0x54>
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d13a      	bne.n	8002122 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80020be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020ce:	d121      	bne.n	8002114 <I2C_IsErrorOccurred+0xbc>
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020d6:	d01d      	beq.n	8002114 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80020d8:	7cfb      	ldrb	r3, [r7, #19]
 80020da:	2b20      	cmp	r3, #32
 80020dc:	d01a      	beq.n	8002114 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80020ee:	f7ff f99b 	bl	8001428 <HAL_GetTick>
 80020f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020f4:	e00e      	b.n	8002114 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80020f6:	f7ff f997 	bl	8001428 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b19      	cmp	r3, #25
 8002102:	d907      	bls.n	8002114 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	f043 0320 	orr.w	r3, r3, #32
 800210a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002112:	e006      	b.n	8002122 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	2b20      	cmp	r3, #32
 8002120:	d1e9      	bne.n	80020f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b20      	cmp	r3, #32
 800212e:	d003      	beq.n	8002138 <I2C_IsErrorOccurred+0xe0>
 8002130:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0aa      	beq.n	800208e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800213c:	2b00      	cmp	r3, #0
 800213e:	d103      	bne.n	8002148 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2220      	movs	r2, #32
 8002146:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00b      	beq.n	8002180 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002178:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00b      	beq.n	80021a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	f043 0308 	orr.w	r3, r3, #8
 8002190:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800219a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00b      	beq.n	80021c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	f043 0302 	orr.w	r3, r3, #2
 80021b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80021c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01c      	beq.n	8002206 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f7ff fe63 	bl	8001e98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002214 <I2C_IsErrorOccurred+0x1bc>)
 80021de:	400b      	ands	r3, r1
 80021e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	431a      	orrs	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2220      	movs	r2, #32
 80021f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002206:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800220a:	4618      	mov	r0, r3
 800220c:	3728      	adds	r7, #40	@ 0x28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	fe00e800 	.word	0xfe00e800

08002218 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	817b      	strh	r3, [r7, #10]
 8002226:	4613      	mov	r3, r2
 8002228:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800222a:	897b      	ldrh	r3, [r7, #10]
 800222c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002230:	7a7b      	ldrb	r3, [r7, #9]
 8002232:	041b      	lsls	r3, r3, #16
 8002234:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002238:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	4313      	orrs	r3, r2
 8002242:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002246:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	0d5b      	lsrs	r3, r3, #21
 8002252:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002256:	4b08      	ldr	r3, [pc, #32]	@ (8002278 <I2C_TransferConfig+0x60>)
 8002258:	430b      	orrs	r3, r1
 800225a:	43db      	mvns	r3, r3
 800225c:	ea02 0103 	and.w	r1, r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	430a      	orrs	r2, r1
 8002268:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800226a:	bf00      	nop
 800226c:	371c      	adds	r7, #28
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	03ff63ff 	.word	0x03ff63ff

0800227c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b20      	cmp	r3, #32
 8002290:	d138      	bne.n	8002304 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800229c:	2302      	movs	r3, #2
 800229e:	e032      	b.n	8002306 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2224      	movs	r2, #36	@ 0x24
 80022ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80022ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6819      	ldr	r1, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	e000      	b.n	8002306 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002304:	2302      	movs	r3, #2
  }
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b20      	cmp	r3, #32
 8002326:	d139      	bne.n	800239c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002332:	2302      	movs	r3, #2
 8002334:	e033      	b.n	800239e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2224      	movs	r2, #36	@ 0x24
 8002342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0201 	bic.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002364:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	021b      	lsls	r3, r3, #8
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	e000      	b.n	800239e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800239c:	2302      	movs	r3, #2
  }
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	4b23      	ldr	r3, [pc, #140]	@ (8002444 <HAL_PWREx_EnableOverDrive+0x98>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	4a22      	ldr	r2, [pc, #136]	@ (8002444 <HAL_PWREx_EnableOverDrive+0x98>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c2:	4b20      	ldr	r3, [pc, #128]	@ (8002444 <HAL_PWREx_EnableOverDrive+0x98>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002448 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002448 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023da:	f7ff f825 	bl	8001428 <HAL_GetTick>
 80023de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023e0:	e009      	b.n	80023f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023e2:	f7ff f821 	bl	8001428 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023f0:	d901      	bls.n	80023f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e022      	b.n	800243c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023f6:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002402:	d1ee      	bne.n	80023e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002404:	4b10      	ldr	r3, [pc, #64]	@ (8002448 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0f      	ldr	r2, [pc, #60]	@ (8002448 <HAL_PWREx_EnableOverDrive+0x9c>)
 800240a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800240e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002410:	f7ff f80a 	bl	8001428 <HAL_GetTick>
 8002414:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002416:	e009      	b.n	800242c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002418:	f7ff f806 	bl	8001428 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002426:	d901      	bls.n	800242c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e007      	b.n	800243c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800242c:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <HAL_PWREx_EnableOverDrive+0x9c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002434:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002438:	d1ee      	bne.n	8002418 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40023800 	.word	0x40023800
 8002448:	40007000 	.word	0x40007000

0800244c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002454:	2300      	movs	r3, #0
 8002456:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e29b      	b.n	800299a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8087 	beq.w	800257e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002470:	4b96      	ldr	r3, [pc, #600]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 030c 	and.w	r3, r3, #12
 8002478:	2b04      	cmp	r3, #4
 800247a:	d00c      	beq.n	8002496 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247c:	4b93      	ldr	r3, [pc, #588]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b08      	cmp	r3, #8
 8002486:	d112      	bne.n	80024ae <HAL_RCC_OscConfig+0x62>
 8002488:	4b90      	ldr	r3, [pc, #576]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002490:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002494:	d10b      	bne.n	80024ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002496:	4b8d      	ldr	r3, [pc, #564]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d06c      	beq.n	800257c <HAL_RCC_OscConfig+0x130>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d168      	bne.n	800257c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e275      	b.n	800299a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_OscConfig+0x7a>
 80024b8:	4b84      	ldr	r3, [pc, #528]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a83      	ldr	r2, [pc, #524]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 80024be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	e02e      	b.n	8002524 <HAL_RCC_OscConfig+0xd8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x9c>
 80024ce:	4b7f      	ldr	r3, [pc, #508]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a7e      	ldr	r2, [pc, #504]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 80024d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	4b7c      	ldr	r3, [pc, #496]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a7b      	ldr	r2, [pc, #492]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 80024e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e01d      	b.n	8002524 <HAL_RCC_OscConfig+0xd8>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0xc0>
 80024f2:	4b76      	ldr	r3, [pc, #472]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a75      	ldr	r2, [pc, #468]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 80024f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	4b73      	ldr	r3, [pc, #460]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a72      	ldr	r2, [pc, #456]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e00b      	b.n	8002524 <HAL_RCC_OscConfig+0xd8>
 800250c:	4b6f      	ldr	r3, [pc, #444]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a6e      	ldr	r2, [pc, #440]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 8002512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b6c      	ldr	r3, [pc, #432]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a6b      	ldr	r2, [pc, #428]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 800251e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d013      	beq.n	8002554 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe ff7c 	bl	8001428 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002534:	f7fe ff78 	bl	8001428 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	@ 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e229      	b.n	800299a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	4b61      	ldr	r3, [pc, #388]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0xe8>
 8002552:	e014      	b.n	800257e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7fe ff68 	bl	8001428 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800255c:	f7fe ff64 	bl	8001428 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	@ 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e215      	b.n	800299a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256e:	4b57      	ldr	r3, [pc, #348]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x110>
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d069      	beq.n	800265e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800258a:	4b50      	ldr	r3, [pc, #320]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00b      	beq.n	80025ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002596:	4b4d      	ldr	r3, [pc, #308]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d11c      	bne.n	80025dc <HAL_RCC_OscConfig+0x190>
 80025a2:	4b4a      	ldr	r3, [pc, #296]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d116      	bne.n	80025dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	4b47      	ldr	r3, [pc, #284]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_RCC_OscConfig+0x17a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d001      	beq.n	80025c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e1e9      	b.n	800299a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c6:	4b41      	ldr	r3, [pc, #260]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	493d      	ldr	r1, [pc, #244]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	e040      	b.n	800265e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d023      	beq.n	800262c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e4:	4b39      	ldr	r3, [pc, #228]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a38      	ldr	r2, [pc, #224]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe ff1a 	bl	8001428 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f8:	f7fe ff16 	bl	8001428 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e1c7      	b.n	800299a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260a:	4b30      	ldr	r3, [pc, #192]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002616:	4b2d      	ldr	r3, [pc, #180]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4929      	ldr	r1, [pc, #164]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 8002626:	4313      	orrs	r3, r2
 8002628:	600b      	str	r3, [r1, #0]
 800262a:	e018      	b.n	800265e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800262c:	4b27      	ldr	r3, [pc, #156]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a26      	ldr	r2, [pc, #152]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 8002632:	f023 0301 	bic.w	r3, r3, #1
 8002636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7fe fef6 	bl	8001428 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002640:	f7fe fef2 	bl	8001428 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e1a3      	b.n	800299a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	4b1e      	ldr	r3, [pc, #120]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d038      	beq.n	80026dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d019      	beq.n	80026a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002672:	4b16      	ldr	r3, [pc, #88]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 8002674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002676:	4a15      	ldr	r2, [pc, #84]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267e:	f7fe fed3 	bl	8001428 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002686:	f7fe fecf 	bl	8001428 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e180      	b.n	800299a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002698:	4b0c      	ldr	r3, [pc, #48]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 800269a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x23a>
 80026a4:	e01a      	b.n	80026dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a6:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 80026a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026aa:	4a08      	ldr	r2, [pc, #32]	@ (80026cc <HAL_RCC_OscConfig+0x280>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b2:	f7fe feb9 	bl	8001428 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ba:	f7fe feb5 	bl	8001428 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d903      	bls.n	80026d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e166      	b.n	800299a <HAL_RCC_OscConfig+0x54e>
 80026cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d0:	4b92      	ldr	r3, [pc, #584]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 80026d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ee      	bne.n	80026ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80a4 	beq.w	8002832 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ea:	4b8c      	ldr	r3, [pc, #560]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10d      	bne.n	8002712 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	4b89      	ldr	r3, [pc, #548]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	4a88      	ldr	r2, [pc, #544]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002700:	6413      	str	r3, [r2, #64]	@ 0x40
 8002702:	4b86      	ldr	r3, [pc, #536]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800270e:	2301      	movs	r3, #1
 8002710:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002712:	4b83      	ldr	r3, [pc, #524]	@ (8002920 <HAL_RCC_OscConfig+0x4d4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d118      	bne.n	8002750 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800271e:	4b80      	ldr	r3, [pc, #512]	@ (8002920 <HAL_RCC_OscConfig+0x4d4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a7f      	ldr	r2, [pc, #508]	@ (8002920 <HAL_RCC_OscConfig+0x4d4>)
 8002724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272a:	f7fe fe7d 	bl	8001428 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002732:	f7fe fe79 	bl	8001428 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b64      	cmp	r3, #100	@ 0x64
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e12a      	b.n	800299a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002744:	4b76      	ldr	r3, [pc, #472]	@ (8002920 <HAL_RCC_OscConfig+0x4d4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d106      	bne.n	8002766 <HAL_RCC_OscConfig+0x31a>
 8002758:	4b70      	ldr	r3, [pc, #448]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275c:	4a6f      	ldr	r2, [pc, #444]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6713      	str	r3, [r2, #112]	@ 0x70
 8002764:	e02d      	b.n	80027c2 <HAL_RCC_OscConfig+0x376>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0x33c>
 800276e:	4b6b      	ldr	r3, [pc, #428]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002772:	4a6a      	ldr	r2, [pc, #424]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	6713      	str	r3, [r2, #112]	@ 0x70
 800277a:	4b68      	ldr	r3, [pc, #416]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 800277c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277e:	4a67      	ldr	r2, [pc, #412]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 8002780:	f023 0304 	bic.w	r3, r3, #4
 8002784:	6713      	str	r3, [r2, #112]	@ 0x70
 8002786:	e01c      	b.n	80027c2 <HAL_RCC_OscConfig+0x376>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b05      	cmp	r3, #5
 800278e:	d10c      	bne.n	80027aa <HAL_RCC_OscConfig+0x35e>
 8002790:	4b62      	ldr	r3, [pc, #392]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002794:	4a61      	ldr	r2, [pc, #388]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	6713      	str	r3, [r2, #112]	@ 0x70
 800279c:	4b5f      	ldr	r3, [pc, #380]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a0:	4a5e      	ldr	r2, [pc, #376]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a8:	e00b      	b.n	80027c2 <HAL_RCC_OscConfig+0x376>
 80027aa:	4b5c      	ldr	r3, [pc, #368]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ae:	4a5b      	ldr	r2, [pc, #364]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b6:	4b59      	ldr	r3, [pc, #356]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ba:	4a58      	ldr	r2, [pc, #352]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 80027bc:	f023 0304 	bic.w	r3, r3, #4
 80027c0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d015      	beq.n	80027f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ca:	f7fe fe2d 	bl	8001428 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d0:	e00a      	b.n	80027e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f7fe fe29 	bl	8001428 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e0d8      	b.n	800299a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e8:	4b4c      	ldr	r3, [pc, #304]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0ee      	beq.n	80027d2 <HAL_RCC_OscConfig+0x386>
 80027f4:	e014      	b.n	8002820 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f6:	f7fe fe17 	bl	8001428 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fc:	e00a      	b.n	8002814 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7fe fe13 	bl	8001428 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e0c2      	b.n	800299a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002814:	4b41      	ldr	r3, [pc, #260]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1ee      	bne.n	80027fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002820:	7dfb      	ldrb	r3, [r7, #23]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d105      	bne.n	8002832 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002826:	4b3d      	ldr	r3, [pc, #244]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	4a3c      	ldr	r2, [pc, #240]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 800282c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002830:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 80ae 	beq.w	8002998 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800283c:	4b37      	ldr	r3, [pc, #220]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 030c 	and.w	r3, r3, #12
 8002844:	2b08      	cmp	r3, #8
 8002846:	d06d      	beq.n	8002924 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d14b      	bne.n	80028e8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002850:	4b32      	ldr	r3, [pc, #200]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a31      	ldr	r2, [pc, #196]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 8002856:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800285a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285c:	f7fe fde4 	bl	8001428 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002864:	f7fe fde0 	bl	8001428 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e091      	b.n	800299a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002876:	4b29      	ldr	r3, [pc, #164]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69da      	ldr	r2, [r3, #28]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002890:	019b      	lsls	r3, r3, #6
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002898:	085b      	lsrs	r3, r3, #1
 800289a:	3b01      	subs	r3, #1
 800289c:	041b      	lsls	r3, r3, #16
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a4:	061b      	lsls	r3, r3, #24
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ac:	071b      	lsls	r3, r3, #28
 80028ae:	491b      	ldr	r1, [pc, #108]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b4:	4b19      	ldr	r3, [pc, #100]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a18      	ldr	r2, [pc, #96]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 80028ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7fe fdb2 	bl	8001428 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe fdae 	bl	8001428 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e05f      	b.n	800299a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028da:	4b10      	ldr	r3, [pc, #64]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x47c>
 80028e6:	e057      	b.n	8002998 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e8:	4b0c      	ldr	r3, [pc, #48]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0b      	ldr	r2, [pc, #44]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 80028ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7fe fd98 	bl	8001428 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fe fd94 	bl	8001428 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e045      	b.n	800299a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290e:	4b03      	ldr	r3, [pc, #12]	@ (800291c <HAL_RCC_OscConfig+0x4d0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x4b0>
 800291a:	e03d      	b.n	8002998 <HAL_RCC_OscConfig+0x54c>
 800291c:	40023800 	.word	0x40023800
 8002920:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002924:	4b1f      	ldr	r3, [pc, #124]	@ (80029a4 <HAL_RCC_OscConfig+0x558>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d030      	beq.n	8002994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d129      	bne.n	8002994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294a:	429a      	cmp	r2, r3
 800294c:	d122      	bne.n	8002994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002954:	4013      	ands	r3, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800295a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800295c:	4293      	cmp	r3, r2
 800295e:	d119      	bne.n	8002994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	3b01      	subs	r3, #1
 800296e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d10f      	bne.n	8002994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d107      	bne.n	8002994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800

080029a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0d0      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029c0:	4b6a      	ldr	r3, [pc, #424]	@ (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d910      	bls.n	80029f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b67      	ldr	r3, [pc, #412]	@ (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 020f 	bic.w	r2, r3, #15
 80029d6:	4965      	ldr	r1, [pc, #404]	@ (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b63      	ldr	r3, [pc, #396]	@ (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0b8      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d020      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a08:	4b59      	ldr	r3, [pc, #356]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	4a58      	ldr	r2, [pc, #352]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a20:	4b53      	ldr	r3, [pc, #332]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4a52      	ldr	r2, [pc, #328]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a2c:	4b50      	ldr	r3, [pc, #320]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	494d      	ldr	r1, [pc, #308]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d040      	beq.n	8002acc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	4b47      	ldr	r3, [pc, #284]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d115      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e07f      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6a:	4b41      	ldr	r3, [pc, #260]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e073      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e06b      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a8a:	4b39      	ldr	r3, [pc, #228]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f023 0203 	bic.w	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	4936      	ldr	r1, [pc, #216]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a9c:	f7fe fcc4 	bl	8001428 <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa4:	f7fe fcc0 	bl	8001428 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e053      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	4b2d      	ldr	r3, [pc, #180]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 020c 	and.w	r2, r3, #12
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d1eb      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002acc:	4b27      	ldr	r3, [pc, #156]	@ (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d210      	bcs.n	8002afc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b24      	ldr	r3, [pc, #144]	@ (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 020f 	bic.w	r2, r3, #15
 8002ae2:	4922      	ldr	r1, [pc, #136]	@ (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b20      	ldr	r3, [pc, #128]	@ (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e032      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b08:	4b19      	ldr	r3, [pc, #100]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4916      	ldr	r1, [pc, #88]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b26:	4b12      	ldr	r3, [pc, #72]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	490e      	ldr	r1, [pc, #56]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b3a:	f000 f821 	bl	8002b80 <HAL_RCC_GetSysClockFreq>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	4b0b      	ldr	r3, [pc, #44]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	490a      	ldr	r1, [pc, #40]	@ (8002b74 <HAL_RCC_ClockConfig+0x1cc>)
 8002b4c:	5ccb      	ldrb	r3, [r1, r3]
 8002b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b52:	4a09      	ldr	r2, [pc, #36]	@ (8002b78 <HAL_RCC_ClockConfig+0x1d0>)
 8002b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b56:	4b09      	ldr	r3, [pc, #36]	@ (8002b7c <HAL_RCC_ClockConfig+0x1d4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fc20 	bl	80013a0 <HAL_InitTick>

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40023c00 	.word	0x40023c00
 8002b70:	40023800 	.word	0x40023800
 8002b74:	0800611c 	.word	0x0800611c
 8002b78:	20000000 	.word	0x20000000
 8002b7c:	20000004 	.word	0x20000004

08002b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b84:	b090      	sub	sp, #64	@ 0x40
 8002b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b90:	2300      	movs	r3, #0
 8002b92:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b98:	4b59      	ldr	r3, [pc, #356]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d00d      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	f200 80a1 	bhi.w	8002cec <HAL_RCC_GetSysClockFreq+0x16c>
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d003      	beq.n	8002bba <HAL_RCC_GetSysClockFreq+0x3a>
 8002bb2:	e09b      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bb4:	4b53      	ldr	r3, [pc, #332]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bb8:	e09b      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bba:	4b53      	ldr	r3, [pc, #332]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bbe:	e098      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bc0:	4b4f      	ldr	r3, [pc, #316]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bc8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002bca:	4b4d      	ldr	r3, [pc, #308]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d028      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	099b      	lsrs	r3, r3, #6
 8002bdc:	2200      	movs	r2, #0
 8002bde:	623b      	str	r3, [r7, #32]
 8002be0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002be8:	2100      	movs	r1, #0
 8002bea:	4b47      	ldr	r3, [pc, #284]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bec:	fb03 f201 	mul.w	r2, r3, r1
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	fb00 f303 	mul.w	r3, r0, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	4a43      	ldr	r2, [pc, #268]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bfa:	fba0 1202 	umull	r1, r2, r0, r2
 8002bfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c00:	460a      	mov	r2, r1
 8002c02:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c06:	4413      	add	r3, r2
 8002c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	61bb      	str	r3, [r7, #24]
 8002c10:	61fa      	str	r2, [r7, #28]
 8002c12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c1a:	f7fd fb0d 	bl	8000238 <__aeabi_uldivmod>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4613      	mov	r3, r2
 8002c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c26:	e053      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c28:	4b35      	ldr	r3, [pc, #212]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	099b      	lsrs	r3, r3, #6
 8002c2e:	2200      	movs	r2, #0
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	617a      	str	r2, [r7, #20]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c3a:	f04f 0b00 	mov.w	fp, #0
 8002c3e:	4652      	mov	r2, sl
 8002c40:	465b      	mov	r3, fp
 8002c42:	f04f 0000 	mov.w	r0, #0
 8002c46:	f04f 0100 	mov.w	r1, #0
 8002c4a:	0159      	lsls	r1, r3, #5
 8002c4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c50:	0150      	lsls	r0, r2, #5
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	ebb2 080a 	subs.w	r8, r2, sl
 8002c5a:	eb63 090b 	sbc.w	r9, r3, fp
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c6a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c6e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c72:	ebb2 0408 	subs.w	r4, r2, r8
 8002c76:	eb63 0509 	sbc.w	r5, r3, r9
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	00eb      	lsls	r3, r5, #3
 8002c84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c88:	00e2      	lsls	r2, r4, #3
 8002c8a:	4614      	mov	r4, r2
 8002c8c:	461d      	mov	r5, r3
 8002c8e:	eb14 030a 	adds.w	r3, r4, sl
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	eb45 030b 	adc.w	r3, r5, fp
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ca6:	4629      	mov	r1, r5
 8002ca8:	028b      	lsls	r3, r1, #10
 8002caa:	4621      	mov	r1, r4
 8002cac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cb0:	4621      	mov	r1, r4
 8002cb2:	028a      	lsls	r2, r1, #10
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cba:	2200      	movs	r2, #0
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	60fa      	str	r2, [r7, #12]
 8002cc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cc4:	f7fd fab8 	bl	8000238 <__aeabi_uldivmod>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4613      	mov	r3, r2
 8002cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	3301      	adds	r3, #1
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002ce0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cea:	e002      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cec:	4b05      	ldr	r3, [pc, #20]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3740      	adds	r7, #64	@ 0x40
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800
 8002d04:	00f42400 	.word	0x00f42400
 8002d08:	017d7840 	.word	0x017d7840

08002d0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d10:	4b03      	ldr	r3, [pc, #12]	@ (8002d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d12:	681b      	ldr	r3, [r3, #0]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	20000000 	.word	0x20000000

08002d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d28:	f7ff fff0 	bl	8002d0c <HAL_RCC_GetHCLKFreq>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	4b05      	ldr	r3, [pc, #20]	@ (8002d44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	0a9b      	lsrs	r3, r3, #10
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	4903      	ldr	r1, [pc, #12]	@ (8002d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3a:	5ccb      	ldrb	r3, [r1, r3]
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40023800 	.word	0x40023800
 8002d48:	0800612c 	.word	0x0800612c

08002d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d50:	f7ff ffdc 	bl	8002d0c <HAL_RCC_GetHCLKFreq>
 8002d54:	4602      	mov	r2, r0
 8002d56:	4b05      	ldr	r3, [pc, #20]	@ (8002d6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	0b5b      	lsrs	r3, r3, #13
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	4903      	ldr	r1, [pc, #12]	@ (8002d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d62:	5ccb      	ldrb	r3, [r1, r3]
 8002d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	0800612c 	.word	0x0800612c

08002d74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d012      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d9c:	4b69      	ldr	r3, [pc, #420]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4a68      	ldr	r2, [pc, #416]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002da6:	6093      	str	r3, [r2, #8]
 8002da8:	4b66      	ldr	r3, [pc, #408]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002db0:	4964      	ldr	r1, [pc, #400]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d017      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dce:	4b5d      	ldr	r3, [pc, #372]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dd4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ddc:	4959      	ldr	r1, [pc, #356]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dec:	d101      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002dee:	2301      	movs	r3, #1
 8002df0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d017      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e0a:	4b4e      	ldr	r3, [pc, #312]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e10:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	494a      	ldr	r1, [pc, #296]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e28:	d101      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e36:	2301      	movs	r3, #1
 8002e38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e46:	2301      	movs	r3, #1
 8002e48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 808b 	beq.w	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e58:	4b3a      	ldr	r3, [pc, #232]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5c:	4a39      	ldr	r2, [pc, #228]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e62:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e64:	4b37      	ldr	r3, [pc, #220]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e70:	4b35      	ldr	r3, [pc, #212]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a34      	ldr	r2, [pc, #208]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e7c:	f7fe fad4 	bl	8001428 <HAL_GetTick>
 8002e80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e84:	f7fe fad0 	bl	8001428 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	@ 0x64
 8002e90:	d901      	bls.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e38f      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e96:	4b2c      	ldr	r3, [pc, #176]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ea2:	4b28      	ldr	r3, [pc, #160]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eaa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d035      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d02e      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ec0:	4b20      	ldr	r3, [pc, #128]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ec8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002eca:	4b1e      	ldr	r3, [pc, #120]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ece:	4a1d      	ldr	r2, [pc, #116]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eda:	4a1a      	ldr	r2, [pc, #104]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002edc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ee0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ee2:	4a18      	ldr	r2, [pc, #96]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ee8:	4b16      	ldr	r3, [pc, #88]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d114      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7fe fa98 	bl	8001428 <HAL_GetTick>
 8002ef8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efa:	e00a      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efc:	f7fe fa94 	bl	8001428 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e351      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	4b0c      	ldr	r3, [pc, #48]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0ee      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f2a:	d111      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f2c:	4b05      	ldr	r3, [pc, #20]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f38:	4b04      	ldr	r3, [pc, #16]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f3a:	400b      	ands	r3, r1
 8002f3c:	4901      	ldr	r1, [pc, #4]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	608b      	str	r3, [r1, #8]
 8002f42:	e00b      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40007000 	.word	0x40007000
 8002f4c:	0ffffcff 	.word	0x0ffffcff
 8002f50:	4bac      	ldr	r3, [pc, #688]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	4aab      	ldr	r2, [pc, #684]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f56:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002f5a:	6093      	str	r3, [r2, #8]
 8002f5c:	4ba9      	ldr	r3, [pc, #676]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f68:	49a6      	ldr	r1, [pc, #664]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d010      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f7a:	4ba2      	ldr	r3, [pc, #648]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f80:	4aa0      	ldr	r2, [pc, #640]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f8a:	4b9e      	ldr	r3, [pc, #632]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f94:	499b      	ldr	r1, [pc, #620]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fa8:	4b96      	ldr	r3, [pc, #600]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fb6:	4993      	ldr	r1, [pc, #588]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fca:	4b8e      	ldr	r3, [pc, #568]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fd8:	498a      	ldr	r1, [pc, #552]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fec:	4b85      	ldr	r3, [pc, #532]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ffa:	4982      	ldr	r1, [pc, #520]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800300e:	4b7d      	ldr	r3, [pc, #500]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003014:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301c:	4979      	ldr	r1, [pc, #484]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003030:	4b74      	ldr	r3, [pc, #464]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003036:	f023 0203 	bic.w	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303e:	4971      	ldr	r1, [pc, #452]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003052:	4b6c      	ldr	r3, [pc, #432]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003058:	f023 020c 	bic.w	r2, r3, #12
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003060:	4968      	ldr	r1, [pc, #416]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003074:	4b63      	ldr	r3, [pc, #396]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800307a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003082:	4960      	ldr	r1, [pc, #384]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003096:	4b5b      	ldr	r3, [pc, #364]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030a4:	4957      	ldr	r1, [pc, #348]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030b8:	4b52      	ldr	r3, [pc, #328]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c6:	494f      	ldr	r1, [pc, #316]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80030da:	4b4a      	ldr	r3, [pc, #296]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e8:	4946      	ldr	r1, [pc, #280]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80030fc:	4b41      	ldr	r3, [pc, #260]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003102:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310a:	493e      	ldr	r1, [pc, #248]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800311e:	4b39      	ldr	r3, [pc, #228]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003124:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800312c:	4935      	ldr	r1, [pc, #212]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003140:	4b30      	ldr	r3, [pc, #192]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003146:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800314e:	492d      	ldr	r1, [pc, #180]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d011      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003162:	4b28      	ldr	r3, [pc, #160]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003168:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003170:	4924      	ldr	r1, [pc, #144]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800317c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003180:	d101      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003182:	2301      	movs	r3, #1
 8003184:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003192:	2301      	movs	r3, #1
 8003194:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031a2:	4b18      	ldr	r3, [pc, #96]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031b0:	4914      	ldr	r1, [pc, #80]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00b      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ca:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031d4:	490b      	ldr	r1, [pc, #44]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00f      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80031e8:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ee:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031f8:	4902      	ldr	r1, [pc, #8]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003200:	e002      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00b      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003214:	4b8a      	ldr	r3, [pc, #552]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003216:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800321a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003224:	4986      	ldr	r1, [pc, #536]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00b      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003238:	4b81      	ldr	r3, [pc, #516]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800323a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800323e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003248:	497d      	ldr	r1, [pc, #500]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d006      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 80d6 	beq.w	8003410 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003264:	4b76      	ldr	r3, [pc, #472]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a75      	ldr	r2, [pc, #468]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800326a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800326e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003270:	f7fe f8da 	bl	8001428 <HAL_GetTick>
 8003274:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003278:	f7fe f8d6 	bl	8001428 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b64      	cmp	r3, #100	@ 0x64
 8003284:	d901      	bls.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e195      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800328a:	4b6d      	ldr	r3, [pc, #436]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d021      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d11d      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032aa:	4b65      	ldr	r3, [pc, #404]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032b0:	0c1b      	lsrs	r3, r3, #16
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032b8:	4b61      	ldr	r3, [pc, #388]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032be:	0e1b      	lsrs	r3, r3, #24
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	019a      	lsls	r2, r3, #6
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	041b      	lsls	r3, r3, #16
 80032d0:	431a      	orrs	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	061b      	lsls	r3, r3, #24
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	071b      	lsls	r3, r3, #28
 80032de:	4958      	ldr	r1, [pc, #352]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d004      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032fa:	d00a      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003304:	2b00      	cmp	r3, #0
 8003306:	d02e      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003310:	d129      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003312:	4b4b      	ldr	r3, [pc, #300]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003318:	0c1b      	lsrs	r3, r3, #16
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003320:	4b47      	ldr	r3, [pc, #284]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003326:	0f1b      	lsrs	r3, r3, #28
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	019a      	lsls	r2, r3, #6
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	041b      	lsls	r3, r3, #16
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	061b      	lsls	r3, r3, #24
 8003340:	431a      	orrs	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	071b      	lsls	r3, r3, #28
 8003346:	493e      	ldr	r1, [pc, #248]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800334e:	4b3c      	ldr	r3, [pc, #240]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003350:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003354:	f023 021f 	bic.w	r2, r3, #31
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	3b01      	subs	r3, #1
 800335e:	4938      	ldr	r1, [pc, #224]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01d      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003372:	4b33      	ldr	r3, [pc, #204]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003374:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003378:	0e1b      	lsrs	r3, r3, #24
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003380:	4b2f      	ldr	r3, [pc, #188]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003386:	0f1b      	lsrs	r3, r3, #28
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	019a      	lsls	r2, r3, #6
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	041b      	lsls	r3, r3, #16
 800339a:	431a      	orrs	r2, r3
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	061b      	lsls	r3, r3, #24
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	071b      	lsls	r3, r3, #28
 80033a6:	4926      	ldr	r1, [pc, #152]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d011      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	019a      	lsls	r2, r3, #6
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	041b      	lsls	r3, r3, #16
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	061b      	lsls	r3, r3, #24
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	071b      	lsls	r3, r3, #28
 80033d6:	491a      	ldr	r1, [pc, #104]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033de:	4b18      	ldr	r3, [pc, #96]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a17      	ldr	r2, [pc, #92]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ea:	f7fe f81d 	bl	8001428 <HAL_GetTick>
 80033ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033f0:	e008      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033f2:	f7fe f819 	bl	8001428 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b64      	cmp	r3, #100	@ 0x64
 80033fe:	d901      	bls.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e0d8      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003404:	4b0e      	ldr	r3, [pc, #56]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2b01      	cmp	r3, #1
 8003414:	f040 80ce 	bne.w	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003418:	4b09      	ldr	r3, [pc, #36]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a08      	ldr	r2, [pc, #32]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800341e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003424:	f7fe f800 	bl	8001428 <HAL_GetTick>
 8003428:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800342a:	e00b      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800342c:	f7fd fffc 	bl	8001428 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	@ 0x64
 8003438:	d904      	bls.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e0bb      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003444:	4b5e      	ldr	r3, [pc, #376]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800344c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003450:	d0ec      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800346e:	2b00      	cmp	r3, #0
 8003470:	d02e      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d12a      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800347a:	4b51      	ldr	r3, [pc, #324]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003488:	4b4d      	ldr	r3, [pc, #308]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348e:	0f1b      	lsrs	r3, r3, #28
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	019a      	lsls	r2, r3, #6
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	041b      	lsls	r3, r3, #16
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	061b      	lsls	r3, r3, #24
 80034a8:	431a      	orrs	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	071b      	lsls	r3, r3, #28
 80034ae:	4944      	ldr	r1, [pc, #272]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80034b6:	4b42      	ldr	r3, [pc, #264]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034bc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c4:	3b01      	subs	r3, #1
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	493d      	ldr	r1, [pc, #244]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d022      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034e4:	d11d      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034e6:	4b36      	ldr	r3, [pc, #216]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ec:	0e1b      	lsrs	r3, r3, #24
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034f4:	4b32      	ldr	r3, [pc, #200]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fa:	0f1b      	lsrs	r3, r3, #28
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	019a      	lsls	r2, r3, #6
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	041b      	lsls	r3, r3, #16
 800350e:	431a      	orrs	r2, r3
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	061b      	lsls	r3, r3, #24
 8003514:	431a      	orrs	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	071b      	lsls	r3, r3, #28
 800351a:	4929      	ldr	r1, [pc, #164]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d028      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800352e:	4b24      	ldr	r3, [pc, #144]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003534:	0e1b      	lsrs	r3, r3, #24
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800353c:	4b20      	ldr	r3, [pc, #128]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003542:	0c1b      	lsrs	r3, r3, #16
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	019a      	lsls	r2, r3, #6
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	041b      	lsls	r3, r3, #16
 8003554:	431a      	orrs	r2, r3
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	061b      	lsls	r3, r3, #24
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	071b      	lsls	r3, r3, #28
 8003562:	4917      	ldr	r1, [pc, #92]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800356a:	4b15      	ldr	r3, [pc, #84]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800356c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003570:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	4911      	ldr	r1, [pc, #68]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003580:	4b0f      	ldr	r3, [pc, #60]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a0e      	ldr	r2, [pc, #56]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800358a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800358c:	f7fd ff4c 	bl	8001428 <HAL_GetTick>
 8003590:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003594:	f7fd ff48 	bl	8001428 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b64      	cmp	r3, #100	@ 0x64
 80035a0:	d901      	bls.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e007      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035a6:	4b06      	ldr	r3, [pc, #24]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035b2:	d1ef      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3720      	adds	r7, #32
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800

080035c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e049      	b.n	800366a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fd fc9a 	bl	8000f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3304      	adds	r3, #4
 8003600:	4619      	mov	r1, r3
 8003602:	4610      	mov	r0, r2
 8003604:	f000 fac0 	bl	8003b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b01      	cmp	r3, #1
 8003686:	d001      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e054      	b.n	8003736 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a26      	ldr	r2, [pc, #152]	@ (8003744 <HAL_TIM_Base_Start_IT+0xd0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d022      	beq.n	80036f4 <HAL_TIM_Base_Start_IT+0x80>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b6:	d01d      	beq.n	80036f4 <HAL_TIM_Base_Start_IT+0x80>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a22      	ldr	r2, [pc, #136]	@ (8003748 <HAL_TIM_Base_Start_IT+0xd4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d018      	beq.n	80036f4 <HAL_TIM_Base_Start_IT+0x80>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a21      	ldr	r2, [pc, #132]	@ (800374c <HAL_TIM_Base_Start_IT+0xd8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d013      	beq.n	80036f4 <HAL_TIM_Base_Start_IT+0x80>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003750 <HAL_TIM_Base_Start_IT+0xdc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00e      	beq.n	80036f4 <HAL_TIM_Base_Start_IT+0x80>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1e      	ldr	r2, [pc, #120]	@ (8003754 <HAL_TIM_Base_Start_IT+0xe0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d009      	beq.n	80036f4 <HAL_TIM_Base_Start_IT+0x80>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003758 <HAL_TIM_Base_Start_IT+0xe4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d004      	beq.n	80036f4 <HAL_TIM_Base_Start_IT+0x80>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1b      	ldr	r2, [pc, #108]	@ (800375c <HAL_TIM_Base_Start_IT+0xe8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d115      	bne.n	8003720 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	4b19      	ldr	r3, [pc, #100]	@ (8003760 <HAL_TIM_Base_Start_IT+0xec>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b06      	cmp	r3, #6
 8003704:	d015      	beq.n	8003732 <HAL_TIM_Base_Start_IT+0xbe>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800370c:	d011      	beq.n	8003732 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0201 	orr.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800371e:	e008      	b.n	8003732 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e000      	b.n	8003734 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003732:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40010000 	.word	0x40010000
 8003748:	40000400 	.word	0x40000400
 800374c:	40000800 	.word	0x40000800
 8003750:	40000c00 	.word	0x40000c00
 8003754:	40010400 	.word	0x40010400
 8003758:	40014000 	.word	0x40014000
 800375c:	40001800 	.word	0x40001800
 8003760:	00010007 	.word	0x00010007

08003764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b02      	cmp	r3, #2
 8003778:	d122      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b02      	cmp	r3, #2
 8003786:	d11b      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f06f 0202 	mvn.w	r2, #2
 8003790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f9d0 	bl	8003b4c <HAL_TIM_IC_CaptureCallback>
 80037ac:	e005      	b.n	80037ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f9c2 	bl	8003b38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f9d3 	bl	8003b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d122      	bne.n	8003814 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d11b      	bne.n	8003814 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0204 	mvn.w	r2, #4
 80037e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2202      	movs	r2, #2
 80037ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f9a6 	bl	8003b4c <HAL_TIM_IC_CaptureCallback>
 8003800:	e005      	b.n	800380e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f998 	bl	8003b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f9a9 	bl	8003b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b08      	cmp	r3, #8
 8003820:	d122      	bne.n	8003868 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b08      	cmp	r3, #8
 800382e:	d11b      	bne.n	8003868 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0208 	mvn.w	r2, #8
 8003838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2204      	movs	r2, #4
 800383e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f97c 	bl	8003b4c <HAL_TIM_IC_CaptureCallback>
 8003854:	e005      	b.n	8003862 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f96e 	bl	8003b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f97f 	bl	8003b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	2b10      	cmp	r3, #16
 8003874:	d122      	bne.n	80038bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b10      	cmp	r3, #16
 8003882:	d11b      	bne.n	80038bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0210 	mvn.w	r2, #16
 800388c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2208      	movs	r2, #8
 8003892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f952 	bl	8003b4c <HAL_TIM_IC_CaptureCallback>
 80038a8:	e005      	b.n	80038b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f944 	bl	8003b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f955 	bl	8003b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d10e      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d107      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0201 	mvn.w	r2, #1
 80038e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fc ffd8 	bl	8000898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f2:	2b80      	cmp	r3, #128	@ 0x80
 80038f4:	d10e      	bne.n	8003914 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003900:	2b80      	cmp	r3, #128	@ 0x80
 8003902:	d107      	bne.n	8003914 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800390c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fb0c 	bl	8003f2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003922:	d10e      	bne.n	8003942 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392e:	2b80      	cmp	r3, #128	@ 0x80
 8003930:	d107      	bne.n	8003942 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800393a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 faff 	bl	8003f40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394c:	2b40      	cmp	r3, #64	@ 0x40
 800394e:	d10e      	bne.n	800396e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395a:	2b40      	cmp	r3, #64	@ 0x40
 800395c:	d107      	bne.n	800396e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f903 	bl	8003b74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b20      	cmp	r3, #32
 800397a:	d10e      	bne.n	800399a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b20      	cmp	r3, #32
 8003988:	d107      	bne.n	800399a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f06f 0220 	mvn.w	r2, #32
 8003992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fabf 	bl	8003f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_TIM_ConfigClockSource+0x1c>
 80039bc:	2302      	movs	r3, #2
 80039be:	e0b4      	b.n	8003b2a <HAL_TIM_ConfigClockSource+0x186>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	4b56      	ldr	r3, [pc, #344]	@ (8003b34 <HAL_TIM_ConfigClockSource+0x190>)
 80039dc:	4013      	ands	r3, r2
 80039de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039f8:	d03e      	beq.n	8003a78 <HAL_TIM_ConfigClockSource+0xd4>
 80039fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039fe:	f200 8087 	bhi.w	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a06:	f000 8086 	beq.w	8003b16 <HAL_TIM_ConfigClockSource+0x172>
 8003a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a0e:	d87f      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a10:	2b70      	cmp	r3, #112	@ 0x70
 8003a12:	d01a      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0xa6>
 8003a14:	2b70      	cmp	r3, #112	@ 0x70
 8003a16:	d87b      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a18:	2b60      	cmp	r3, #96	@ 0x60
 8003a1a:	d050      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x11a>
 8003a1c:	2b60      	cmp	r3, #96	@ 0x60
 8003a1e:	d877      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a20:	2b50      	cmp	r3, #80	@ 0x50
 8003a22:	d03c      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0xfa>
 8003a24:	2b50      	cmp	r3, #80	@ 0x50
 8003a26:	d873      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a28:	2b40      	cmp	r3, #64	@ 0x40
 8003a2a:	d058      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0x13a>
 8003a2c:	2b40      	cmp	r3, #64	@ 0x40
 8003a2e:	d86f      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a30:	2b30      	cmp	r3, #48	@ 0x30
 8003a32:	d064      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x15a>
 8003a34:	2b30      	cmp	r3, #48	@ 0x30
 8003a36:	d86b      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d060      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x15a>
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d867      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d05c      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x15a>
 8003a44:	2b10      	cmp	r3, #16
 8003a46:	d05a      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x15a>
 8003a48:	e062      	b.n	8003b10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a5a:	f000 f9af 	bl	8003dbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	609a      	str	r2, [r3, #8]
      break;
 8003a76:	e04f      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a88:	f000 f998 	bl	8003dbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a9a:	609a      	str	r2, [r3, #8]
      break;
 8003a9c:	e03c      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f000 f90c 	bl	8003cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2150      	movs	r1, #80	@ 0x50
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 f965 	bl	8003d86 <TIM_ITRx_SetConfig>
      break;
 8003abc:	e02c      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aca:	461a      	mov	r2, r3
 8003acc:	f000 f92b 	bl	8003d26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2160      	movs	r1, #96	@ 0x60
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 f955 	bl	8003d86 <TIM_ITRx_SetConfig>
      break;
 8003adc:	e01c      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aea:	461a      	mov	r2, r3
 8003aec:	f000 f8ec 	bl	8003cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2140      	movs	r1, #64	@ 0x40
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 f945 	bl	8003d86 <TIM_ITRx_SetConfig>
      break;
 8003afc:	e00c      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4619      	mov	r1, r3
 8003b08:	4610      	mov	r0, r2
 8003b0a:	f000 f93c 	bl	8003d86 <TIM_ITRx_SetConfig>
      break;
 8003b0e:	e003      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
      break;
 8003b14:	e000      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	fffeff88 	.word	0xfffeff88

08003b38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a40      	ldr	r2, [pc, #256]	@ (8003c9c <TIM_Base_SetConfig+0x114>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d013      	beq.n	8003bc8 <TIM_Base_SetConfig+0x40>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ba6:	d00f      	beq.n	8003bc8 <TIM_Base_SetConfig+0x40>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a3d      	ldr	r2, [pc, #244]	@ (8003ca0 <TIM_Base_SetConfig+0x118>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00b      	beq.n	8003bc8 <TIM_Base_SetConfig+0x40>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a3c      	ldr	r2, [pc, #240]	@ (8003ca4 <TIM_Base_SetConfig+0x11c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d007      	beq.n	8003bc8 <TIM_Base_SetConfig+0x40>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a3b      	ldr	r2, [pc, #236]	@ (8003ca8 <TIM_Base_SetConfig+0x120>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_Base_SetConfig+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a3a      	ldr	r2, [pc, #232]	@ (8003cac <TIM_Base_SetConfig+0x124>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d108      	bne.n	8003bda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a2f      	ldr	r2, [pc, #188]	@ (8003c9c <TIM_Base_SetConfig+0x114>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d02b      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be8:	d027      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a2c      	ldr	r2, [pc, #176]	@ (8003ca0 <TIM_Base_SetConfig+0x118>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d023      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8003ca4 <TIM_Base_SetConfig+0x11c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d01f      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8003ca8 <TIM_Base_SetConfig+0x120>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d01b      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a29      	ldr	r2, [pc, #164]	@ (8003cac <TIM_Base_SetConfig+0x124>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d017      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a28      	ldr	r2, [pc, #160]	@ (8003cb0 <TIM_Base_SetConfig+0x128>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a27      	ldr	r2, [pc, #156]	@ (8003cb4 <TIM_Base_SetConfig+0x12c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00f      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a26      	ldr	r2, [pc, #152]	@ (8003cb8 <TIM_Base_SetConfig+0x130>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00b      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a25      	ldr	r2, [pc, #148]	@ (8003cbc <TIM_Base_SetConfig+0x134>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d007      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a24      	ldr	r2, [pc, #144]	@ (8003cc0 <TIM_Base_SetConfig+0x138>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d003      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a23      	ldr	r2, [pc, #140]	@ (8003cc4 <TIM_Base_SetConfig+0x13c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d108      	bne.n	8003c4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a0a      	ldr	r2, [pc, #40]	@ (8003c9c <TIM_Base_SetConfig+0x114>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d003      	beq.n	8003c80 <TIM_Base_SetConfig+0xf8>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8003cac <TIM_Base_SetConfig+0x124>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d103      	bne.n	8003c88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	615a      	str	r2, [r3, #20]
}
 8003c8e:	bf00      	nop
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40010000 	.word	0x40010000
 8003ca0:	40000400 	.word	0x40000400
 8003ca4:	40000800 	.word	0x40000800
 8003ca8:	40000c00 	.word	0x40000c00
 8003cac:	40010400 	.word	0x40010400
 8003cb0:	40014000 	.word	0x40014000
 8003cb4:	40014400 	.word	0x40014400
 8003cb8:	40014800 	.word	0x40014800
 8003cbc:	40001800 	.word	0x40001800
 8003cc0:	40001c00 	.word	0x40001c00
 8003cc4:	40002000 	.word	0x40002000

08003cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	f023 0201 	bic.w	r2, r3, #1
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f023 030a 	bic.w	r3, r3, #10
 8003d04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	621a      	str	r2, [r3, #32]
}
 8003d1a:	bf00      	nop
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b087      	sub	sp, #28
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	f023 0210 	bic.w	r2, r3, #16
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	031b      	lsls	r3, r3, #12
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	621a      	str	r2, [r3, #32]
}
 8003d7a:	bf00      	nop
 8003d7c:	371c      	adds	r7, #28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b085      	sub	sp, #20
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f043 0307 	orr.w	r3, r3, #7
 8003da8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	609a      	str	r2, [r3, #8]
}
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	021a      	lsls	r2, r3, #8
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	609a      	str	r2, [r3, #8]
}
 8003df0:	bf00      	nop
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e06d      	b.n	8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a30      	ldr	r2, [pc, #192]	@ (8003efc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d004      	beq.n	8003e48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a2f      	ldr	r2, [pc, #188]	@ (8003f00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d108      	bne.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003e4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a20      	ldr	r2, [pc, #128]	@ (8003efc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d022      	beq.n	8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e86:	d01d      	beq.n	8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003f04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d018      	beq.n	8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1c      	ldr	r2, [pc, #112]	@ (8003f08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d013      	beq.n	8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8003f0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00e      	beq.n	8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a15      	ldr	r2, [pc, #84]	@ (8003f00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d009      	beq.n	8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a16      	ldr	r2, [pc, #88]	@ (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d004      	beq.n	8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a15      	ldr	r2, [pc, #84]	@ (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d10c      	bne.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40010400 	.word	0x40010400
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40000800 	.word	0x40000800
 8003f0c:	40000c00 	.word	0x40000c00
 8003f10:	40014000 	.word	0x40014000
 8003f14:	40001800 	.word	0x40001800

08003f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e040      	b.n	8003fe8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fd f812 	bl	8000fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2224      	movs	r2, #36	@ 0x24
 8003f80:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0201 	bic.w	r2, r2, #1
 8003f90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fbe0 	bl	8004758 <UART_SetConfig>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e022      	b.n	8003fe8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fe38 	bl	8004c20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 febf 	bl	8004d64 <UART_CheckIdleState>
 8003fe6:	4603      	mov	r3, r0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b08b      	sub	sp, #44	@ 0x2c
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004002:	2b20      	cmp	r3, #32
 8004004:	d147      	bne.n	8004096 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <HAL_UART_Transmit_IT+0x22>
 800400c:	88fb      	ldrh	r3, [r7, #6]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e040      	b.n	8004098 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	88fa      	ldrh	r2, [r7, #6]
 8004020:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	88fa      	ldrh	r2, [r7, #6]
 8004028:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2221      	movs	r2, #33	@ 0x21
 800403e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004048:	d107      	bne.n	800405a <HAL_UART_Transmit_IT+0x6a>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d103      	bne.n	800405a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4a13      	ldr	r2, [pc, #76]	@ (80040a4 <HAL_UART_Transmit_IT+0xb4>)
 8004056:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004058:	e002      	b.n	8004060 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4a12      	ldr	r2, [pc, #72]	@ (80040a8 <HAL_UART_Transmit_IT+0xb8>)
 800405e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	e853 3f00 	ldrex	r3, [r3]
 800406c:	613b      	str	r3, [r7, #16]
   return(result);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004074:	627b      	str	r3, [r7, #36]	@ 0x24
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	623b      	str	r3, [r7, #32]
 8004080:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004082:	69f9      	ldr	r1, [r7, #28]
 8004084:	6a3a      	ldr	r2, [r7, #32]
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	61bb      	str	r3, [r7, #24]
   return(result);
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e6      	bne.n	8004060 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	e000      	b.n	8004098 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004096:	2302      	movs	r3, #2
  }
}
 8004098:	4618      	mov	r0, r3
 800409a:	372c      	adds	r7, #44	@ 0x2c
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	080052c3 	.word	0x080052c3
 80040a8:	0800520d 	.word	0x0800520d

080040ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08a      	sub	sp, #40	@ 0x28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d132      	bne.n	800412a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <HAL_UART_Receive_IT+0x24>
 80040ca:	88fb      	ldrh	r3, [r7, #6]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e02b      	b.n	800412c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d018      	beq.n	800411a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	e853 3f00 	ldrex	r3, [r3]
 80040f4:	613b      	str	r3, [r7, #16]
   return(result);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004106:	623b      	str	r3, [r7, #32]
 8004108:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410a:	69f9      	ldr	r1, [r7, #28]
 800410c:	6a3a      	ldr	r2, [r7, #32]
 800410e:	e841 2300 	strex	r3, r2, [r1]
 8004112:	61bb      	str	r3, [r7, #24]
   return(result);
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1e6      	bne.n	80040e8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	461a      	mov	r2, r3
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 ff33 	bl	8004f8c <UART_Start_Receive_IT>
 8004126:	4603      	mov	r3, r0
 8004128:	e000      	b.n	800412c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800412a:	2302      	movs	r3, #2
  }
}
 800412c:	4618      	mov	r0, r3
 800412e:	3728      	adds	r7, #40	@ 0x28
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b0ba      	sub	sp, #232	@ 0xe8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800415a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800415e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004162:	4013      	ands	r3, r2
 8004164:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004168:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800416c:	2b00      	cmp	r3, #0
 800416e:	d115      	bne.n	800419c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00f      	beq.n	800419c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800417c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b00      	cmp	r3, #0
 8004186:	d009      	beq.n	800419c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 82ac 	beq.w	80046ea <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	4798      	blx	r3
      }
      return;
 800419a:	e2a6      	b.n	80046ea <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800419c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 8117 	beq.w	80043d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80041b6:	4b85      	ldr	r3, [pc, #532]	@ (80043cc <HAL_UART_IRQHandler+0x298>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 810a 	beq.w	80043d4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d011      	beq.n	80041f0 <HAL_UART_IRQHandler+0xbc>
 80041cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00b      	beq.n	80041f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2201      	movs	r2, #1
 80041de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041e6:	f043 0201 	orr.w	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d011      	beq.n	8004220 <HAL_UART_IRQHandler+0xec>
 80041fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00b      	beq.n	8004220 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2202      	movs	r2, #2
 800420e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004216:	f043 0204 	orr.w	r2, r3, #4
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d011      	beq.n	8004250 <HAL_UART_IRQHandler+0x11c>
 800422c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00b      	beq.n	8004250 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2204      	movs	r2, #4
 800423e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004246:	f043 0202 	orr.w	r2, r3, #2
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004254:	f003 0308 	and.w	r3, r3, #8
 8004258:	2b00      	cmp	r3, #0
 800425a:	d017      	beq.n	800428c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800425c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d105      	bne.n	8004274 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800426c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00b      	beq.n	800428c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2208      	movs	r2, #8
 800427a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004282:	f043 0208 	orr.w	r2, r3, #8
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800428c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004290:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004294:	2b00      	cmp	r3, #0
 8004296:	d012      	beq.n	80042be <HAL_UART_IRQHandler+0x18a>
 8004298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800429c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00c      	beq.n	80042be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042b4:	f043 0220 	orr.w	r2, r3, #32
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 8212 	beq.w	80046ee <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00d      	beq.n	80042f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d007      	beq.n	80042f2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004306:	2b40      	cmp	r3, #64	@ 0x40
 8004308:	d005      	beq.n	8004316 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800430a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800430e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004312:	2b00      	cmp	r3, #0
 8004314:	d04f      	beq.n	80043b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fefe 	bl	8005118 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004326:	2b40      	cmp	r3, #64	@ 0x40
 8004328:	d141      	bne.n	80043ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3308      	adds	r3, #8
 8004330:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004340:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004344:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004348:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3308      	adds	r3, #8
 8004352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004356:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800435a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004366:	e841 2300 	strex	r3, r2, [r1]
 800436a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800436e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1d9      	bne.n	800432a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800437a:	2b00      	cmp	r3, #0
 800437c:	d013      	beq.n	80043a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004382:	4a13      	ldr	r2, [pc, #76]	@ (80043d0 <HAL_UART_IRQHandler+0x29c>)
 8004384:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800438a:	4618      	mov	r0, r3
 800438c:	f7fd f9fd 	bl	800178a <HAL_DMA_Abort_IT>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d017      	beq.n	80043c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800439a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80043a0:	4610      	mov	r0, r2
 80043a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	e00f      	b.n	80043c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f9b6 	bl	8004718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ac:	e00b      	b.n	80043c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f9b2 	bl	8004718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b4:	e007      	b.n	80043c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f9ae 	bl	8004718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80043c4:	e193      	b.n	80046ee <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c6:	bf00      	nop
    return;
 80043c8:	e191      	b.n	80046ee <HAL_UART_IRQHandler+0x5ba>
 80043ca:	bf00      	nop
 80043cc:	04000120 	.word	0x04000120
 80043d0:	080051e1 	.word	0x080051e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043d8:	2b01      	cmp	r3, #1
 80043da:	f040 814c 	bne.w	8004676 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043e2:	f003 0310 	and.w	r3, r3, #16
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 8145 	beq.w	8004676 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 813e 	beq.w	8004676 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2210      	movs	r2, #16
 8004400:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800440c:	2b40      	cmp	r3, #64	@ 0x40
 800440e:	f040 80b6 	bne.w	800457e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800441e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8165 	beq.w	80046f2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800442e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004432:	429a      	cmp	r2, r3
 8004434:	f080 815d 	bcs.w	80046f2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800443e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800444c:	f000 8086 	beq.w	800455c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004464:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004468:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800446c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800447a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800447e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004482:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004486:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800448a:	e841 2300 	strex	r3, r2, [r1]
 800448e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004492:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1da      	bne.n	8004450 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3308      	adds	r3, #8
 80044a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3308      	adds	r3, #8
 80044ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e1      	bne.n	800449a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3308      	adds	r3, #8
 80044dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3308      	adds	r3, #8
 80044f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004500:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004508:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1e3      	bne.n	80044d6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800452a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800452c:	f023 0310 	bic.w	r3, r3, #16
 8004530:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800453e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004540:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004544:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800454c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e4      	bne.n	800451c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004556:	4618      	mov	r0, r3
 8004558:	f7fd f8a7 	bl	80016aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800456e:	b29b      	uxth	r3, r3
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	b29b      	uxth	r3, r3
 8004574:	4619      	mov	r1, r3
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f8d8 	bl	800472c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800457c:	e0b9      	b.n	80046f2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800458a:	b29b      	uxth	r3, r3
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004598:	b29b      	uxth	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 80ab 	beq.w	80046f6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80045a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80a6 	beq.w	80046f6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b2:	e853 3f00 	ldrex	r3, [r3]
 80045b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e4      	bne.n	80045aa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3308      	adds	r3, #8
 80045e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	623b      	str	r3, [r7, #32]
   return(result);
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3308      	adds	r3, #8
 8004600:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004604:	633a      	str	r2, [r7, #48]	@ 0x30
 8004606:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800460a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e3      	bne.n	80045e0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	60fb      	str	r3, [r7, #12]
   return(result);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f023 0310 	bic.w	r3, r3, #16
 8004640:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	461a      	mov	r2, r3
 800464a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800464e:	61fb      	str	r3, [r7, #28]
 8004650:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	69b9      	ldr	r1, [r7, #24]
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	617b      	str	r3, [r7, #20]
   return(result);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e4      	bne.n	800462c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2202      	movs	r2, #2
 8004666:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800466c:	4619      	mov	r1, r3
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f85c 	bl	800472c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004674:	e03f      	b.n	80046f6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800467a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00e      	beq.n	80046a0 <HAL_UART_IRQHandler+0x56c>
 8004682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004696:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f853 	bl	8004744 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800469e:	e02d      	b.n	80046fc <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00e      	beq.n	80046ca <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01c      	beq.n	80046fa <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	4798      	blx	r3
    }
    return;
 80046c8:	e017      	b.n	80046fa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d012      	beq.n	80046fc <HAL_UART_IRQHandler+0x5c8>
 80046d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00c      	beq.n	80046fc <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fe4d 	bl	8005382 <UART_EndTransmit_IT>
    return;
 80046e8:	e008      	b.n	80046fc <HAL_UART_IRQHandler+0x5c8>
      return;
 80046ea:	bf00      	nop
 80046ec:	e006      	b.n	80046fc <HAL_UART_IRQHandler+0x5c8>
    return;
 80046ee:	bf00      	nop
 80046f0:	e004      	b.n	80046fc <HAL_UART_IRQHandler+0x5c8>
      return;
 80046f2:	bf00      	nop
 80046f4:	e002      	b.n	80046fc <HAL_UART_IRQHandler+0x5c8>
      return;
 80046f6:	bf00      	nop
 80046f8:	e000      	b.n	80046fc <HAL_UART_IRQHandler+0x5c8>
    return;
 80046fa:	bf00      	nop
  }

}
 80046fc:	37e8      	adds	r7, #232	@ 0xe8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop

08004704 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004760:	2300      	movs	r3, #0
 8004762:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	4ba6      	ldr	r3, [pc, #664]	@ (8004a1c <UART_SetConfig+0x2c4>)
 8004784:	4013      	ands	r3, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	6979      	ldr	r1, [r7, #20]
 800478c:	430b      	orrs	r3, r1
 800478e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a94      	ldr	r2, [pc, #592]	@ (8004a20 <UART_SetConfig+0x2c8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d120      	bne.n	8004816 <UART_SetConfig+0xbe>
 80047d4:	4b93      	ldr	r3, [pc, #588]	@ (8004a24 <UART_SetConfig+0x2cc>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d816      	bhi.n	8004810 <UART_SetConfig+0xb8>
 80047e2:	a201      	add	r2, pc, #4	@ (adr r2, 80047e8 <UART_SetConfig+0x90>)
 80047e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e8:	080047f9 	.word	0x080047f9
 80047ec:	08004805 	.word	0x08004805
 80047f0:	080047ff 	.word	0x080047ff
 80047f4:	0800480b 	.word	0x0800480b
 80047f8:	2301      	movs	r3, #1
 80047fa:	77fb      	strb	r3, [r7, #31]
 80047fc:	e150      	b.n	8004aa0 <UART_SetConfig+0x348>
 80047fe:	2302      	movs	r3, #2
 8004800:	77fb      	strb	r3, [r7, #31]
 8004802:	e14d      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004804:	2304      	movs	r3, #4
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e14a      	b.n	8004aa0 <UART_SetConfig+0x348>
 800480a:	2308      	movs	r3, #8
 800480c:	77fb      	strb	r3, [r7, #31]
 800480e:	e147      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004810:	2310      	movs	r3, #16
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e144      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a83      	ldr	r2, [pc, #524]	@ (8004a28 <UART_SetConfig+0x2d0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d132      	bne.n	8004886 <UART_SetConfig+0x12e>
 8004820:	4b80      	ldr	r3, [pc, #512]	@ (8004a24 <UART_SetConfig+0x2cc>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	2b0c      	cmp	r3, #12
 800482c:	d828      	bhi.n	8004880 <UART_SetConfig+0x128>
 800482e:	a201      	add	r2, pc, #4	@ (adr r2, 8004834 <UART_SetConfig+0xdc>)
 8004830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004834:	08004869 	.word	0x08004869
 8004838:	08004881 	.word	0x08004881
 800483c:	08004881 	.word	0x08004881
 8004840:	08004881 	.word	0x08004881
 8004844:	08004875 	.word	0x08004875
 8004848:	08004881 	.word	0x08004881
 800484c:	08004881 	.word	0x08004881
 8004850:	08004881 	.word	0x08004881
 8004854:	0800486f 	.word	0x0800486f
 8004858:	08004881 	.word	0x08004881
 800485c:	08004881 	.word	0x08004881
 8004860:	08004881 	.word	0x08004881
 8004864:	0800487b 	.word	0x0800487b
 8004868:	2300      	movs	r3, #0
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	e118      	b.n	8004aa0 <UART_SetConfig+0x348>
 800486e:	2302      	movs	r3, #2
 8004870:	77fb      	strb	r3, [r7, #31]
 8004872:	e115      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004874:	2304      	movs	r3, #4
 8004876:	77fb      	strb	r3, [r7, #31]
 8004878:	e112      	b.n	8004aa0 <UART_SetConfig+0x348>
 800487a:	2308      	movs	r3, #8
 800487c:	77fb      	strb	r3, [r7, #31]
 800487e:	e10f      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004880:	2310      	movs	r3, #16
 8004882:	77fb      	strb	r3, [r7, #31]
 8004884:	e10c      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a68      	ldr	r2, [pc, #416]	@ (8004a2c <UART_SetConfig+0x2d4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d120      	bne.n	80048d2 <UART_SetConfig+0x17a>
 8004890:	4b64      	ldr	r3, [pc, #400]	@ (8004a24 <UART_SetConfig+0x2cc>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004896:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800489a:	2b30      	cmp	r3, #48	@ 0x30
 800489c:	d013      	beq.n	80048c6 <UART_SetConfig+0x16e>
 800489e:	2b30      	cmp	r3, #48	@ 0x30
 80048a0:	d814      	bhi.n	80048cc <UART_SetConfig+0x174>
 80048a2:	2b20      	cmp	r3, #32
 80048a4:	d009      	beq.n	80048ba <UART_SetConfig+0x162>
 80048a6:	2b20      	cmp	r3, #32
 80048a8:	d810      	bhi.n	80048cc <UART_SetConfig+0x174>
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <UART_SetConfig+0x15c>
 80048ae:	2b10      	cmp	r3, #16
 80048b0:	d006      	beq.n	80048c0 <UART_SetConfig+0x168>
 80048b2:	e00b      	b.n	80048cc <UART_SetConfig+0x174>
 80048b4:	2300      	movs	r3, #0
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e0f2      	b.n	8004aa0 <UART_SetConfig+0x348>
 80048ba:	2302      	movs	r3, #2
 80048bc:	77fb      	strb	r3, [r7, #31]
 80048be:	e0ef      	b.n	8004aa0 <UART_SetConfig+0x348>
 80048c0:	2304      	movs	r3, #4
 80048c2:	77fb      	strb	r3, [r7, #31]
 80048c4:	e0ec      	b.n	8004aa0 <UART_SetConfig+0x348>
 80048c6:	2308      	movs	r3, #8
 80048c8:	77fb      	strb	r3, [r7, #31]
 80048ca:	e0e9      	b.n	8004aa0 <UART_SetConfig+0x348>
 80048cc:	2310      	movs	r3, #16
 80048ce:	77fb      	strb	r3, [r7, #31]
 80048d0:	e0e6      	b.n	8004aa0 <UART_SetConfig+0x348>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a56      	ldr	r2, [pc, #344]	@ (8004a30 <UART_SetConfig+0x2d8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d120      	bne.n	800491e <UART_SetConfig+0x1c6>
 80048dc:	4b51      	ldr	r3, [pc, #324]	@ (8004a24 <UART_SetConfig+0x2cc>)
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80048e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80048e8:	d013      	beq.n	8004912 <UART_SetConfig+0x1ba>
 80048ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80048ec:	d814      	bhi.n	8004918 <UART_SetConfig+0x1c0>
 80048ee:	2b80      	cmp	r3, #128	@ 0x80
 80048f0:	d009      	beq.n	8004906 <UART_SetConfig+0x1ae>
 80048f2:	2b80      	cmp	r3, #128	@ 0x80
 80048f4:	d810      	bhi.n	8004918 <UART_SetConfig+0x1c0>
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <UART_SetConfig+0x1a8>
 80048fa:	2b40      	cmp	r3, #64	@ 0x40
 80048fc:	d006      	beq.n	800490c <UART_SetConfig+0x1b4>
 80048fe:	e00b      	b.n	8004918 <UART_SetConfig+0x1c0>
 8004900:	2300      	movs	r3, #0
 8004902:	77fb      	strb	r3, [r7, #31]
 8004904:	e0cc      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004906:	2302      	movs	r3, #2
 8004908:	77fb      	strb	r3, [r7, #31]
 800490a:	e0c9      	b.n	8004aa0 <UART_SetConfig+0x348>
 800490c:	2304      	movs	r3, #4
 800490e:	77fb      	strb	r3, [r7, #31]
 8004910:	e0c6      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004912:	2308      	movs	r3, #8
 8004914:	77fb      	strb	r3, [r7, #31]
 8004916:	e0c3      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004918:	2310      	movs	r3, #16
 800491a:	77fb      	strb	r3, [r7, #31]
 800491c:	e0c0      	b.n	8004aa0 <UART_SetConfig+0x348>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a44      	ldr	r2, [pc, #272]	@ (8004a34 <UART_SetConfig+0x2dc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d125      	bne.n	8004974 <UART_SetConfig+0x21c>
 8004928:	4b3e      	ldr	r3, [pc, #248]	@ (8004a24 <UART_SetConfig+0x2cc>)
 800492a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800492e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004932:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004936:	d017      	beq.n	8004968 <UART_SetConfig+0x210>
 8004938:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800493c:	d817      	bhi.n	800496e <UART_SetConfig+0x216>
 800493e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004942:	d00b      	beq.n	800495c <UART_SetConfig+0x204>
 8004944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004948:	d811      	bhi.n	800496e <UART_SetConfig+0x216>
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <UART_SetConfig+0x1fe>
 800494e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004952:	d006      	beq.n	8004962 <UART_SetConfig+0x20a>
 8004954:	e00b      	b.n	800496e <UART_SetConfig+0x216>
 8004956:	2300      	movs	r3, #0
 8004958:	77fb      	strb	r3, [r7, #31]
 800495a:	e0a1      	b.n	8004aa0 <UART_SetConfig+0x348>
 800495c:	2302      	movs	r3, #2
 800495e:	77fb      	strb	r3, [r7, #31]
 8004960:	e09e      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004962:	2304      	movs	r3, #4
 8004964:	77fb      	strb	r3, [r7, #31]
 8004966:	e09b      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004968:	2308      	movs	r3, #8
 800496a:	77fb      	strb	r3, [r7, #31]
 800496c:	e098      	b.n	8004aa0 <UART_SetConfig+0x348>
 800496e:	2310      	movs	r3, #16
 8004970:	77fb      	strb	r3, [r7, #31]
 8004972:	e095      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a2f      	ldr	r2, [pc, #188]	@ (8004a38 <UART_SetConfig+0x2e0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d125      	bne.n	80049ca <UART_SetConfig+0x272>
 800497e:	4b29      	ldr	r3, [pc, #164]	@ (8004a24 <UART_SetConfig+0x2cc>)
 8004980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004984:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004988:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800498c:	d017      	beq.n	80049be <UART_SetConfig+0x266>
 800498e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004992:	d817      	bhi.n	80049c4 <UART_SetConfig+0x26c>
 8004994:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004998:	d00b      	beq.n	80049b2 <UART_SetConfig+0x25a>
 800499a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800499e:	d811      	bhi.n	80049c4 <UART_SetConfig+0x26c>
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <UART_SetConfig+0x254>
 80049a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049a8:	d006      	beq.n	80049b8 <UART_SetConfig+0x260>
 80049aa:	e00b      	b.n	80049c4 <UART_SetConfig+0x26c>
 80049ac:	2301      	movs	r3, #1
 80049ae:	77fb      	strb	r3, [r7, #31]
 80049b0:	e076      	b.n	8004aa0 <UART_SetConfig+0x348>
 80049b2:	2302      	movs	r3, #2
 80049b4:	77fb      	strb	r3, [r7, #31]
 80049b6:	e073      	b.n	8004aa0 <UART_SetConfig+0x348>
 80049b8:	2304      	movs	r3, #4
 80049ba:	77fb      	strb	r3, [r7, #31]
 80049bc:	e070      	b.n	8004aa0 <UART_SetConfig+0x348>
 80049be:	2308      	movs	r3, #8
 80049c0:	77fb      	strb	r3, [r7, #31]
 80049c2:	e06d      	b.n	8004aa0 <UART_SetConfig+0x348>
 80049c4:	2310      	movs	r3, #16
 80049c6:	77fb      	strb	r3, [r7, #31]
 80049c8:	e06a      	b.n	8004aa0 <UART_SetConfig+0x348>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a1b      	ldr	r2, [pc, #108]	@ (8004a3c <UART_SetConfig+0x2e4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d138      	bne.n	8004a46 <UART_SetConfig+0x2ee>
 80049d4:	4b13      	ldr	r3, [pc, #76]	@ (8004a24 <UART_SetConfig+0x2cc>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049da:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80049de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049e2:	d017      	beq.n	8004a14 <UART_SetConfig+0x2bc>
 80049e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049e8:	d82a      	bhi.n	8004a40 <UART_SetConfig+0x2e8>
 80049ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049ee:	d00b      	beq.n	8004a08 <UART_SetConfig+0x2b0>
 80049f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049f4:	d824      	bhi.n	8004a40 <UART_SetConfig+0x2e8>
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <UART_SetConfig+0x2aa>
 80049fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049fe:	d006      	beq.n	8004a0e <UART_SetConfig+0x2b6>
 8004a00:	e01e      	b.n	8004a40 <UART_SetConfig+0x2e8>
 8004a02:	2300      	movs	r3, #0
 8004a04:	77fb      	strb	r3, [r7, #31]
 8004a06:	e04b      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	77fb      	strb	r3, [r7, #31]
 8004a0c:	e048      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004a0e:	2304      	movs	r3, #4
 8004a10:	77fb      	strb	r3, [r7, #31]
 8004a12:	e045      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004a14:	2308      	movs	r3, #8
 8004a16:	77fb      	strb	r3, [r7, #31]
 8004a18:	e042      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004a1a:	bf00      	nop
 8004a1c:	efff69f3 	.word	0xefff69f3
 8004a20:	40011000 	.word	0x40011000
 8004a24:	40023800 	.word	0x40023800
 8004a28:	40004400 	.word	0x40004400
 8004a2c:	40004800 	.word	0x40004800
 8004a30:	40004c00 	.word	0x40004c00
 8004a34:	40005000 	.word	0x40005000
 8004a38:	40011400 	.word	0x40011400
 8004a3c:	40007800 	.word	0x40007800
 8004a40:	2310      	movs	r3, #16
 8004a42:	77fb      	strb	r3, [r7, #31]
 8004a44:	e02c      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a72      	ldr	r2, [pc, #456]	@ (8004c14 <UART_SetConfig+0x4bc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d125      	bne.n	8004a9c <UART_SetConfig+0x344>
 8004a50:	4b71      	ldr	r3, [pc, #452]	@ (8004c18 <UART_SetConfig+0x4c0>)
 8004a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a56:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004a5a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004a5e:	d017      	beq.n	8004a90 <UART_SetConfig+0x338>
 8004a60:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004a64:	d817      	bhi.n	8004a96 <UART_SetConfig+0x33e>
 8004a66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a6a:	d00b      	beq.n	8004a84 <UART_SetConfig+0x32c>
 8004a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a70:	d811      	bhi.n	8004a96 <UART_SetConfig+0x33e>
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <UART_SetConfig+0x326>
 8004a76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a7a:	d006      	beq.n	8004a8a <UART_SetConfig+0x332>
 8004a7c:	e00b      	b.n	8004a96 <UART_SetConfig+0x33e>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	77fb      	strb	r3, [r7, #31]
 8004a82:	e00d      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004a84:	2302      	movs	r3, #2
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e00a      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004a8a:	2304      	movs	r3, #4
 8004a8c:	77fb      	strb	r3, [r7, #31]
 8004a8e:	e007      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004a90:	2308      	movs	r3, #8
 8004a92:	77fb      	strb	r3, [r7, #31]
 8004a94:	e004      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004a96:	2310      	movs	r3, #16
 8004a98:	77fb      	strb	r3, [r7, #31]
 8004a9a:	e001      	b.n	8004aa0 <UART_SetConfig+0x348>
 8004a9c:	2310      	movs	r3, #16
 8004a9e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aa8:	d15b      	bne.n	8004b62 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004aaa:	7ffb      	ldrb	r3, [r7, #31]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d828      	bhi.n	8004b02 <UART_SetConfig+0x3aa>
 8004ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab8 <UART_SetConfig+0x360>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	08004add 	.word	0x08004add
 8004abc:	08004ae5 	.word	0x08004ae5
 8004ac0:	08004aed 	.word	0x08004aed
 8004ac4:	08004b03 	.word	0x08004b03
 8004ac8:	08004af3 	.word	0x08004af3
 8004acc:	08004b03 	.word	0x08004b03
 8004ad0:	08004b03 	.word	0x08004b03
 8004ad4:	08004b03 	.word	0x08004b03
 8004ad8:	08004afb 	.word	0x08004afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004adc:	f7fe f922 	bl	8002d24 <HAL_RCC_GetPCLK1Freq>
 8004ae0:	61b8      	str	r0, [r7, #24]
        break;
 8004ae2:	e013      	b.n	8004b0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ae4:	f7fe f932 	bl	8002d4c <HAL_RCC_GetPCLK2Freq>
 8004ae8:	61b8      	str	r0, [r7, #24]
        break;
 8004aea:	e00f      	b.n	8004b0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aec:	4b4b      	ldr	r3, [pc, #300]	@ (8004c1c <UART_SetConfig+0x4c4>)
 8004aee:	61bb      	str	r3, [r7, #24]
        break;
 8004af0:	e00c      	b.n	8004b0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004af2:	f7fe f845 	bl	8002b80 <HAL_RCC_GetSysClockFreq>
 8004af6:	61b8      	str	r0, [r7, #24]
        break;
 8004af8:	e008      	b.n	8004b0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004afe:	61bb      	str	r3, [r7, #24]
        break;
 8004b00:	e004      	b.n	8004b0c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	77bb      	strb	r3, [r7, #30]
        break;
 8004b0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d074      	beq.n	8004bfc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	005a      	lsls	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	085b      	lsrs	r3, r3, #1
 8004b1c:	441a      	add	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	2b0f      	cmp	r3, #15
 8004b2c:	d916      	bls.n	8004b5c <UART_SetConfig+0x404>
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b34:	d212      	bcs.n	8004b5c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	f023 030f 	bic.w	r3, r3, #15
 8004b3e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	085b      	lsrs	r3, r3, #1
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	89fb      	ldrh	r3, [r7, #14]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	89fa      	ldrh	r2, [r7, #14]
 8004b58:	60da      	str	r2, [r3, #12]
 8004b5a:	e04f      	b.n	8004bfc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	77bb      	strb	r3, [r7, #30]
 8004b60:	e04c      	b.n	8004bfc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b62:	7ffb      	ldrb	r3, [r7, #31]
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d828      	bhi.n	8004bba <UART_SetConfig+0x462>
 8004b68:	a201      	add	r2, pc, #4	@ (adr r2, 8004b70 <UART_SetConfig+0x418>)
 8004b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6e:	bf00      	nop
 8004b70:	08004b95 	.word	0x08004b95
 8004b74:	08004b9d 	.word	0x08004b9d
 8004b78:	08004ba5 	.word	0x08004ba5
 8004b7c:	08004bbb 	.word	0x08004bbb
 8004b80:	08004bab 	.word	0x08004bab
 8004b84:	08004bbb 	.word	0x08004bbb
 8004b88:	08004bbb 	.word	0x08004bbb
 8004b8c:	08004bbb 	.word	0x08004bbb
 8004b90:	08004bb3 	.word	0x08004bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b94:	f7fe f8c6 	bl	8002d24 <HAL_RCC_GetPCLK1Freq>
 8004b98:	61b8      	str	r0, [r7, #24]
        break;
 8004b9a:	e013      	b.n	8004bc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b9c:	f7fe f8d6 	bl	8002d4c <HAL_RCC_GetPCLK2Freq>
 8004ba0:	61b8      	str	r0, [r7, #24]
        break;
 8004ba2:	e00f      	b.n	8004bc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c1c <UART_SetConfig+0x4c4>)
 8004ba6:	61bb      	str	r3, [r7, #24]
        break;
 8004ba8:	e00c      	b.n	8004bc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004baa:	f7fd ffe9 	bl	8002b80 <HAL_RCC_GetSysClockFreq>
 8004bae:	61b8      	str	r0, [r7, #24]
        break;
 8004bb0:	e008      	b.n	8004bc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bb6:	61bb      	str	r3, [r7, #24]
        break;
 8004bb8:	e004      	b.n	8004bc4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	77bb      	strb	r3, [r7, #30]
        break;
 8004bc2:	bf00      	nop
    }

    if (pclk != 0U)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d018      	beq.n	8004bfc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	085a      	lsrs	r2, r3, #1
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	441a      	add	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bdc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	2b0f      	cmp	r3, #15
 8004be2:	d909      	bls.n	8004bf8 <UART_SetConfig+0x4a0>
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bea:	d205      	bcs.n	8004bf8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60da      	str	r2, [r3, #12]
 8004bf6:	e001      	b.n	8004bfc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004c08:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3720      	adds	r7, #32
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40007c00 	.word	0x40007c00
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	00f42400 	.word	0x00f42400

08004c20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c92:	f003 0308 	and.w	r3, r3, #8
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01a      	beq.n	8004d36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d1e:	d10a      	bne.n	8004d36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	605a      	str	r2, [r3, #4]
  }
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d74:	f7fc fb58 	bl	8001428 <HAL_GetTick>
 8004d78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0308 	and.w	r3, r3, #8
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d10e      	bne.n	8004da6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f831 	bl	8004dfe <UART_WaitOnFlagUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e027      	b.n	8004df6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d10e      	bne.n	8004dd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004db4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f81b 	bl	8004dfe <UART_WaitOnFlagUntilTimeout>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e011      	b.n	8004df6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b09c      	sub	sp, #112	@ 0x70
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	603b      	str	r3, [r7, #0]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e0e:	e0a7      	b.n	8004f60 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e16:	f000 80a3 	beq.w	8004f60 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e1a:	f7fc fb05 	bl	8001428 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d302      	bcc.n	8004e30 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d13f      	bne.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e38:	e853 3f00 	ldrex	r3, [r3]
 8004e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004e3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e40:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004e44:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e50:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004e54:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e6      	bne.n	8004e30 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3308      	adds	r3, #8
 8004e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e74:	f023 0301 	bic.w	r3, r3, #1
 8004e78:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3308      	adds	r3, #8
 8004e80:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004e82:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004e84:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e86:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e8a:	e841 2300 	strex	r3, r2, [r1]
 8004e8e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004e90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1e5      	bne.n	8004e62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e068      	b.n	8004f82 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d050      	beq.n	8004f60 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ec8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ecc:	d148      	bne.n	8004f60 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ed6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004eec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ef8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004efc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e6      	bne.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	613b      	str	r3, [r7, #16]
   return(result);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f023 0301 	bic.w	r3, r3, #1
 8004f20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3308      	adds	r3, #8
 8004f28:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004f2a:	623a      	str	r2, [r7, #32]
 8004f2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	69f9      	ldr	r1, [r7, #28]
 8004f30:	6a3a      	ldr	r2, [r7, #32]
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e5      	bne.n	8004f0a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e010      	b.n	8004f82 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69da      	ldr	r2, [r3, #28]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	bf0c      	ite	eq
 8004f70:	2301      	moveq	r3, #1
 8004f72:	2300      	movne	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	461a      	mov	r2, r3
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	f43f af48 	beq.w	8004e10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3770      	adds	r7, #112	@ 0x70
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b097      	sub	sp, #92	@ 0x5c
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	4613      	mov	r3, r2
 8004f98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	88fa      	ldrh	r2, [r7, #6]
 8004fa4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	88fa      	ldrh	r2, [r7, #6]
 8004fac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fbe:	d10e      	bne.n	8004fde <UART_Start_Receive_IT+0x52>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d105      	bne.n	8004fd4 <UART_Start_Receive_IT+0x48>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004fce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004fd2:	e02d      	b.n	8005030 <UART_Start_Receive_IT+0xa4>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	22ff      	movs	r2, #255	@ 0xff
 8004fd8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004fdc:	e028      	b.n	8005030 <UART_Start_Receive_IT+0xa4>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10d      	bne.n	8005002 <UART_Start_Receive_IT+0x76>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d104      	bne.n	8004ff8 <UART_Start_Receive_IT+0x6c>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	22ff      	movs	r2, #255	@ 0xff
 8004ff2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ff6:	e01b      	b.n	8005030 <UART_Start_Receive_IT+0xa4>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	227f      	movs	r2, #127	@ 0x7f
 8004ffc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005000:	e016      	b.n	8005030 <UART_Start_Receive_IT+0xa4>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800500a:	d10d      	bne.n	8005028 <UART_Start_Receive_IT+0x9c>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d104      	bne.n	800501e <UART_Start_Receive_IT+0x92>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	227f      	movs	r2, #127	@ 0x7f
 8005018:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800501c:	e008      	b.n	8005030 <UART_Start_Receive_IT+0xa4>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	223f      	movs	r2, #63	@ 0x3f
 8005022:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005026:	e003      	b.n	8005030 <UART_Start_Receive_IT+0xa4>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2222      	movs	r2, #34	@ 0x22
 800503c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3308      	adds	r3, #8
 8005046:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800504a:	e853 3f00 	ldrex	r3, [r3]
 800504e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005052:	f043 0301 	orr.w	r3, r3, #1
 8005056:	657b      	str	r3, [r7, #84]	@ 0x54
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3308      	adds	r3, #8
 800505e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005060:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005062:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005064:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005066:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005068:	e841 2300 	strex	r3, r2, [r1]
 800506c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800506e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1e5      	bne.n	8005040 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800507c:	d107      	bne.n	800508e <UART_Start_Receive_IT+0x102>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d103      	bne.n	800508e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4a21      	ldr	r2, [pc, #132]	@ (8005110 <UART_Start_Receive_IT+0x184>)
 800508a:	669a      	str	r2, [r3, #104]	@ 0x68
 800508c:	e002      	b.n	8005094 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4a20      	ldr	r2, [pc, #128]	@ (8005114 <UART_Start_Receive_IT+0x188>)
 8005092:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d019      	beq.n	80050d0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ac:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80050b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80050bc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80050c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e6      	bne.n	800509c <UART_Start_Receive_IT+0x110>
 80050ce:	e018      	b.n	8005102 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	613b      	str	r3, [r7, #16]
   return(result);
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f043 0320 	orr.w	r3, r3, #32
 80050e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050ee:	623b      	str	r3, [r7, #32]
 80050f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	69f9      	ldr	r1, [r7, #28]
 80050f4:	6a3a      	ldr	r2, [r7, #32]
 80050f6:	e841 2300 	strex	r3, r2, [r1]
 80050fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1e6      	bne.n	80050d0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	375c      	adds	r7, #92	@ 0x5c
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	0800553d 	.word	0x0800553d
 8005114:	080053d7 	.word	0x080053d7

08005118 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005118:	b480      	push	{r7}
 800511a:	b095      	sub	sp, #84	@ 0x54
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005128:	e853 3f00 	ldrex	r3, [r3]
 800512c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800512e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005130:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005134:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800513e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005140:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005142:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005144:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005146:	e841 2300 	strex	r3, r2, [r1]
 800514a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800514c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1e6      	bne.n	8005120 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3308      	adds	r3, #8
 8005158:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	e853 3f00 	ldrex	r3, [r3]
 8005160:	61fb      	str	r3, [r7, #28]
   return(result);
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	f023 0301 	bic.w	r3, r3, #1
 8005168:	64bb      	str	r3, [r7, #72]	@ 0x48
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3308      	adds	r3, #8
 8005170:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005172:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005174:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005176:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005178:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800517a:	e841 2300 	strex	r3, r2, [r1]
 800517e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1e5      	bne.n	8005152 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800518a:	2b01      	cmp	r3, #1
 800518c:	d118      	bne.n	80051c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	60bb      	str	r3, [r7, #8]
   return(result);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f023 0310 	bic.w	r3, r3, #16
 80051a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	6979      	ldr	r1, [r7, #20]
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	613b      	str	r3, [r7, #16]
   return(result);
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e6      	bne.n	800518e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80051d4:	bf00      	nop
 80051d6:	3754      	adds	r7, #84	@ 0x54
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f7ff fa8a 	bl	8004718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800520c:	b480      	push	{r7}
 800520e:	b08f      	sub	sp, #60	@ 0x3c
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005218:	2b21      	cmp	r3, #33	@ 0x21
 800521a:	d14c      	bne.n	80052b6 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005222:	b29b      	uxth	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d132      	bne.n	800528e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	e853 3f00 	ldrex	r3, [r3]
 8005234:	61fb      	str	r3, [r7, #28]
   return(result);
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800523c:	637b      	str	r3, [r7, #52]	@ 0x34
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005246:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005248:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800524c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800524e:	e841 2300 	strex	r3, r2, [r1]
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1e6      	bne.n	8005228 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	60bb      	str	r3, [r7, #8]
   return(result);
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800526e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	461a      	mov	r2, r3
 8005276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	6979      	ldr	r1, [r7, #20]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	613b      	str	r3, [r7, #16]
   return(result);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e6      	bne.n	800525a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800528c:	e013      	b.n	80052b6 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005292:	781a      	ldrb	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80052b6:	bf00      	nop
 80052b8:	373c      	adds	r7, #60	@ 0x3c
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b091      	sub	sp, #68	@ 0x44
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052ce:	2b21      	cmp	r3, #33	@ 0x21
 80052d0:	d151      	bne.n	8005376 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d132      	bne.n	8005344 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	623b      	str	r3, [r7, #32]
   return(result);
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	461a      	mov	r2, r3
 80052fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80052fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800530a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e6      	bne.n	80052de <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	60fb      	str	r3, [r7, #12]
   return(result);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005324:	637b      	str	r3, [r7, #52]	@ 0x34
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800532e:	61fb      	str	r3, [r7, #28]
 8005330:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	69b9      	ldr	r1, [r7, #24]
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	617b      	str	r3, [r7, #20]
   return(result);
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e6      	bne.n	8005310 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005342:	e018      	b.n	8005376 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005348:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800534a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005358:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800535e:	1c9a      	adds	r2, r3, #2
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005376:	bf00      	nop
 8005378:	3744      	adds	r7, #68	@ 0x44
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b088      	sub	sp, #32
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	60bb      	str	r3, [r7, #8]
   return(result);
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800539e:	61fb      	str	r3, [r7, #28]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	61bb      	str	r3, [r7, #24]
 80053aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	6979      	ldr	r1, [r7, #20]
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	613b      	str	r3, [r7, #16]
   return(result);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e6      	bne.n	800538a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2220      	movs	r2, #32
 80053c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff f99b 	bl	8004704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ce:	bf00      	nop
 80053d0:	3720      	adds	r7, #32
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b096      	sub	sp, #88	@ 0x58
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80053e4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ee:	2b22      	cmp	r3, #34	@ 0x22
 80053f0:	f040 8098 	bne.w	8005524 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fa:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053fe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8005402:	b2d9      	uxtb	r1, r3
 8005404:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005408:	b2da      	uxtb	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800540e:	400a      	ands	r2, r1
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005424:	b29b      	uxth	r3, r3
 8005426:	3b01      	subs	r3, #1
 8005428:	b29a      	uxth	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d17b      	bne.n	8005534 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800544a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005450:	653b      	str	r3, [r7, #80]	@ 0x50
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800545a:	647b      	str	r3, [r7, #68]	@ 0x44
 800545c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005460:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e6      	bne.n	800543c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3308      	adds	r3, #8
 8005474:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	623b      	str	r3, [r7, #32]
   return(result);
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	f023 0301 	bic.w	r3, r3, #1
 8005484:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3308      	adds	r3, #8
 800548c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800548e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005490:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005494:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005496:	e841 2300 	strex	r3, r2, [r1]
 800549a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800549c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1e5      	bne.n	800546e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d12e      	bne.n	800551c <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f023 0310 	bic.w	r3, r3, #16
 80054d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054e2:	61fb      	str	r3, [r7, #28]
 80054e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	69b9      	ldr	r1, [r7, #24]
 80054e8:	69fa      	ldr	r2, [r7, #28]
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	617b      	str	r3, [r7, #20]
   return(result);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e6      	bne.n	80054c4 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b10      	cmp	r3, #16
 8005502:	d103      	bne.n	800550c <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2210      	movs	r2, #16
 800550a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005512:	4619      	mov	r1, r3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff f909 	bl	800472c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800551a:	e00b      	b.n	8005534 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7fb f967 	bl	80007f0 <HAL_UART_RxCpltCallback>
}
 8005522:	e007      	b.n	8005534 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699a      	ldr	r2, [r3, #24]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0208 	orr.w	r2, r2, #8
 8005532:	619a      	str	r2, [r3, #24]
}
 8005534:	bf00      	nop
 8005536:	3758      	adds	r7, #88	@ 0x58
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b096      	sub	sp, #88	@ 0x58
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800554a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005554:	2b22      	cmp	r3, #34	@ 0x22
 8005556:	f040 8098 	bne.w	800568a <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005560:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005568:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800556a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800556e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005572:	4013      	ands	r3, r2
 8005574:	b29a      	uxth	r2, r3
 8005576:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005578:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557e:	1c9a      	adds	r2, r3, #2
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d17b      	bne.n	800569a <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055aa:	e853 3f00 	ldrex	r3, [r3]
 80055ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	461a      	mov	r2, r3
 80055be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80055c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055c8:	e841 2300 	strex	r3, r2, [r1]
 80055cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e6      	bne.n	80055a2 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3308      	adds	r3, #8
 80055da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	f023 0301 	bic.w	r3, r3, #1
 80055ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3308      	adds	r3, #8
 80055f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e5      	bne.n	80055d4 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2220      	movs	r2, #32
 800560c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005620:	2b01      	cmp	r3, #1
 8005622:	d12e      	bne.n	8005682 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	60bb      	str	r3, [r7, #8]
   return(result);
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f023 0310 	bic.w	r3, r3, #16
 800563e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6979      	ldr	r1, [r7, #20]
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	613b      	str	r3, [r7, #16]
   return(result);
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e6      	bne.n	800562a <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f003 0310 	and.w	r3, r3, #16
 8005666:	2b10      	cmp	r3, #16
 8005668:	d103      	bne.n	8005672 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2210      	movs	r2, #16
 8005670:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005678:	4619      	mov	r1, r3
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7ff f856 	bl	800472c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005680:	e00b      	b.n	800569a <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fb f8b4 	bl	80007f0 <HAL_UART_RxCpltCallback>
}
 8005688:	e007      	b.n	800569a <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699a      	ldr	r2, [r3, #24]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0208 	orr.w	r2, r2, #8
 8005698:	619a      	str	r2, [r3, #24]
}
 800569a:	bf00      	nop
 800569c:	3758      	adds	r7, #88	@ 0x58
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b082      	sub	sp, #8
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e03c      	b.n	800572e <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d106      	bne.n	80056ce <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7fb fd1f 	bl	800110c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2202      	movs	r2, #2
 80056d2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0201 	bic.w	r2, r2, #1
 80056e4:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fa46 	bl	8005b78 <USART_SetConfig>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e01b      	b.n	800572e <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005704:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005714:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0201 	orr.w	r2, r2, #1
 8005724:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fba8 	bl	8005e7c <USART_CheckIdleState>
 800572c:	4603      	mov	r3, r0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
	...

08005738 <HAL_USART_Transmit_IT>:
  * @param  pTxData pointer to data buffer (u8 or u16 data elements).
  * @param  Size amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit_IT(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	4613      	mov	r3, r2
 8005744:	80fb      	strh	r3, [r7, #6]
  if (husart->State == HAL_USART_STATE_READY)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b01      	cmp	r3, #1
 8005750:	d143      	bne.n	80057da <HAL_USART_Transmit_IT+0xa2>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <HAL_USART_Transmit_IT+0x26>
 8005758:	88fb      	ldrh	r3, [r7, #6]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_USART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e03c      	b.n	80057dc <HAL_USART_Transmit_IT+0xa4>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_USART_Transmit_IT+0x38>
 800576c:	2302      	movs	r3, #2
 800576e:	e035      	b.n	80057dc <HAL_USART_Transmit_IT+0xa4>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    husart->pTxBuffPtr  = pTxData;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	625a      	str	r2, [r3, #36]	@ 0x24
    husart->TxXferSize  = Size;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	88fa      	ldrh	r2, [r7, #6]
 8005782:	851a      	strh	r2, [r3, #40]	@ 0x28
    husart->TxXferCount = Size;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	88fa      	ldrh	r2, [r7, #6]
 8005788:	855a      	strh	r2, [r3, #42]	@ 0x2a
    husart->TxISR       = NULL;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	63da      	str	r2, [r3, #60]	@ 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	64da      	str	r2, [r3, #76]	@ 0x4c
    husart->State     = HAL_USART_STATE_BUSY_TX;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2212      	movs	r2, #18
 800579a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    to benefit for the frame error and noise interrupts the usart mode should be
    configured only for transmit "USART_MODE_TX" */

    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057a6:	d107      	bne.n	80057b8 <HAL_USART_Transmit_IT+0x80>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d103      	bne.n	80057b8 <HAL_USART_Transmit_IT+0x80>
      {
        husart->TxISR = USART_TxISR_16BIT;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4a0d      	ldr	r2, [pc, #52]	@ (80057e8 <HAL_USART_Transmit_IT+0xb0>)
 80057b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80057b6:	e002      	b.n	80057be <HAL_USART_Transmit_IT+0x86>
      }
      else
      {
        husart->TxISR = USART_TxISR_8BIT;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4a0c      	ldr	r2, [pc, #48]	@ (80057ec <HAL_USART_Transmit_IT+0xb4>)
 80057bc:	63da      	str	r2, [r3, #60]	@ 0x3c
      }

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

      /* Enable the USART Transmit Data Register Empty Interrupt */
      __HAL_USART_ENABLE_IT(husart, USART_IT_TXE);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80057d4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	e000      	b.n	80057dc <HAL_USART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 80057da:	2302      	movs	r3, #2
  }
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	08005f7b 	.word	0x08005f7b
 80057ec:	08005f03 	.word	0x08005f03

080057f0 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005816:	4013      	ands	r3, r2
 8005818:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d113      	bne.n	8005848 <HAL_USART_IRQHandler+0x58>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00e      	beq.n	8005848 <HAL_USART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	f003 0320 	and.w	r3, r3, #32
 8005830:	2b00      	cmp	r3, #0
 8005832:	d009      	beq.n	8005848 <HAL_USART_IRQHandler+0x58>
    {
      if (husart->RxISR != NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 810d 	beq.w	8005a58 <HAL_USART_IRQHandler+0x268>
      {
        husart->RxISR(husart);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	4798      	blx	r3
      }
      return;
 8005846:	e107      	b.n	8005a58 <HAL_USART_IRQHandler+0x268>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 80e3 	beq.w	8005a16 <HAL_USART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d105      	bne.n	8005866 <HAL_USART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 80d8 	beq.w	8005a16 <HAL_USART_IRQHandler+0x226>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00e      	beq.n	800588e <HAL_USART_IRQHandler+0x9e>
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <HAL_USART_IRQHandler+0x9e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2201      	movs	r2, #1
 8005880:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005886:	f043 0201 	orr.w	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00e      	beq.n	80058b6 <HAL_USART_IRQHandler+0xc6>
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d009      	beq.n	80058b6 <HAL_USART_IRQHandler+0xc6>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2202      	movs	r2, #2
 80058a8:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ae:	f043 0204 	orr.w	r2, r3, #4
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00e      	beq.n	80058de <HAL_USART_IRQHandler+0xee>
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d009      	beq.n	80058de <HAL_USART_IRQHandler+0xee>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2204      	movs	r2, #4
 80058d0:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d6:	f043 0202 	orr.w	r2, r3, #2
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f003 0308 	and.w	r3, r3, #8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d013      	beq.n	8005910 <HAL_USART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d104      	bne.n	80058fc <HAL_USART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d009      	beq.n	8005910 <HAL_USART_IRQHandler+0x120>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2208      	movs	r2, #8
 8005902:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005908:	f043 0208 	orr.w	r2, r3, #8
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00f      	beq.n	800593a <HAL_USART_IRQHandler+0x14a>
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <HAL_USART_IRQHandler+0x14a>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800592c:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005932:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	64da      	str	r2, [r3, #76]	@ 0x4c
    }


    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 808c 	beq.w	8005a5c <HAL_USART_IRQHandler+0x26c>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00c      	beq.n	8005968 <HAL_USART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	f003 0320 	and.w	r3, r3, #32
 8005954:	2b00      	cmp	r3, #0
 8005956:	d007      	beq.n	8005968 <HAL_USART_IRQHandler+0x178>
      {
        if (husart->RxISR != NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <HAL_USART_IRQHandler+0x178>
        {
          husart->RxISR(husart);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800596c:	f003 0308 	and.w	r3, r3, #8
 8005970:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800597c:	2b40      	cmp	r3, #64	@ 0x40
 800597e:	d002      	beq.n	8005986 <HAL_USART_IRQHandler+0x196>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d03e      	beq.n	8005a04 <HAL_USART_IRQHandler+0x214>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f88e 	bl	8005aa8 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005996:	2b40      	cmp	r3, #64	@ 0x40
 8005998:	d130      	bne.n	80059fc <HAL_USART_IRQHandler+0x20c>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059a8:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d008      	beq.n	80059c4 <HAL_USART_IRQHandler+0x1d4>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b6:	2200      	movs	r2, #0
 80059b8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fb fee3 	bl	800178a <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d013      	beq.n	80059f4 <HAL_USART_IRQHandler+0x204>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d0:	4a25      	ldr	r2, [pc, #148]	@ (8005a68 <HAL_USART_IRQHandler+0x278>)
 80059d2:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fb fed6 	bl	800178a <HAL_DMA_Abort_IT>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d016      	beq.n	8005a12 <HAL_USART_IRQHandler+0x222>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80059ee:	4610      	mov	r0, r2
 80059f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80059f2:	e00e      	b.n	8005a12 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f84d 	bl	8005a94 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80059fa:	e00a      	b.n	8005a12 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f849 	bl	8005a94 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005a02:	e006      	b.n	8005a12 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f845 	bl	8005a94 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	64da      	str	r2, [r3, #76]	@ 0x4c
      }
    }
    return;
 8005a10:	e024      	b.n	8005a5c <HAL_USART_IRQHandler+0x26c>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005a12:	bf00      	nop
    return;
 8005a14:	e022      	b.n	8005a5c <HAL_USART_IRQHandler+0x26c>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00d      	beq.n	8005a3c <HAL_USART_IRQHandler+0x24c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <HAL_USART_IRQHandler+0x24c>
  {
    if (husart->TxISR != NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d016      	beq.n	8005a60 <HAL_USART_IRQHandler+0x270>
    {
      husart->TxISR(husart);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	4798      	blx	r3
    }
    return;
 8005a3a:	e011      	b.n	8005a60 <HAL_USART_IRQHandler+0x270>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00d      	beq.n	8005a62 <HAL_USART_IRQHandler+0x272>
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d008      	beq.n	8005a62 <HAL_USART_IRQHandler+0x272>
  {
    USART_EndTransmit_IT(husart);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fad3 	bl	8005ffc <USART_EndTransmit_IT>
    return;
 8005a56:	e004      	b.n	8005a62 <HAL_USART_IRQHandler+0x272>
      return;
 8005a58:	bf00      	nop
 8005a5a:	e002      	b.n	8005a62 <HAL_USART_IRQHandler+0x272>
    return;
 8005a5c:	bf00      	nop
 8005a5e:	e000      	b.n	8005a62 <HAL_USART_IRQHandler+0x272>
    return;
 8005a60:	bf00      	nop
  }

}
 8005a62:	3720      	adds	r7, #32
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	08005ae5 	.word	0x08005ae5

08005a6c <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 72f0 	bic.w	r2, r2, #480	@ 0x1e0
 8005abe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0201 	bic.w	r2, r2, #1
 8005ace:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af0:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	865a      	strh	r2, [r3, #50]	@ 0x32
  husart->TxXferCount = 0U;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	855a      	strh	r2, [r3, #42]	@ 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f7ff ffc8 	bl	8005a94 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8005b04:	bf00      	nop
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005b1c:	e018      	b.n	8005b50 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b24:	d014      	beq.n	8005b50 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b26:	f7fb fc7f 	bl	8001428 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d302      	bcc.n	8005b3c <USART_WaitOnFlagUntilTimeout+0x30>
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d109      	bne.n	8005b50 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e00f      	b.n	8005b70 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69da      	ldr	r2, [r3, #28]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	bf0c      	ite	eq
 8005b60:	2301      	moveq	r3, #1
 8005b62:	2300      	movne	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	79fb      	ldrb	r3, [r7, #7]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d0d7      	beq.n	8005b1e <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8005b84:	2300      	movs	r3, #0
 8005b86:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	4ba7      	ldr	r3, [pc, #668]	@ (8005e44 <USART_SetConfig+0x2cc>)
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6812      	ldr	r2, [r2, #0]
 8005bac:	6979      	ldr	r1, [r7, #20]
 8005bae:	430b      	orrs	r3, r1
 8005bb0:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8005bb2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005bb6:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699a      	ldr	r2, [r3, #24]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a94      	ldr	r2, [pc, #592]	@ (8005e48 <USART_SetConfig+0x2d0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d121      	bne.n	8005c3e <USART_SetConfig+0xc6>
 8005bfa:	4b94      	ldr	r3, [pc, #592]	@ (8005e4c <USART_SetConfig+0x2d4>)
 8005bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c00:	f003 0303 	and.w	r3, r3, #3
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d817      	bhi.n	8005c38 <USART_SetConfig+0xc0>
 8005c08:	a201      	add	r2, pc, #4	@ (adr r2, 8005c10 <USART_SetConfig+0x98>)
 8005c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0e:	bf00      	nop
 8005c10:	08005c21 	.word	0x08005c21
 8005c14:	08005c2d 	.word	0x08005c2d
 8005c18:	08005c27 	.word	0x08005c27
 8005c1c:	08005c33 	.word	0x08005c33
 8005c20:	2301      	movs	r3, #1
 8005c22:	77fb      	strb	r3, [r7, #31]
 8005c24:	e096      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005c26:	2302      	movs	r3, #2
 8005c28:	77fb      	strb	r3, [r7, #31]
 8005c2a:	e093      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	77fb      	strb	r3, [r7, #31]
 8005c30:	e090      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005c32:	2308      	movs	r3, #8
 8005c34:	77fb      	strb	r3, [r7, #31]
 8005c36:	e08d      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005c38:	2310      	movs	r3, #16
 8005c3a:	77fb      	strb	r3, [r7, #31]
 8005c3c:	e08a      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a83      	ldr	r2, [pc, #524]	@ (8005e50 <USART_SetConfig+0x2d8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d132      	bne.n	8005cae <USART_SetConfig+0x136>
 8005c48:	4b80      	ldr	r3, [pc, #512]	@ (8005e4c <USART_SetConfig+0x2d4>)
 8005c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c4e:	f003 030c 	and.w	r3, r3, #12
 8005c52:	2b0c      	cmp	r3, #12
 8005c54:	d828      	bhi.n	8005ca8 <USART_SetConfig+0x130>
 8005c56:	a201      	add	r2, pc, #4	@ (adr r2, 8005c5c <USART_SetConfig+0xe4>)
 8005c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5c:	08005c91 	.word	0x08005c91
 8005c60:	08005ca9 	.word	0x08005ca9
 8005c64:	08005ca9 	.word	0x08005ca9
 8005c68:	08005ca9 	.word	0x08005ca9
 8005c6c:	08005c9d 	.word	0x08005c9d
 8005c70:	08005ca9 	.word	0x08005ca9
 8005c74:	08005ca9 	.word	0x08005ca9
 8005c78:	08005ca9 	.word	0x08005ca9
 8005c7c:	08005c97 	.word	0x08005c97
 8005c80:	08005ca9 	.word	0x08005ca9
 8005c84:	08005ca9 	.word	0x08005ca9
 8005c88:	08005ca9 	.word	0x08005ca9
 8005c8c:	08005ca3 	.word	0x08005ca3
 8005c90:	2300      	movs	r3, #0
 8005c92:	77fb      	strb	r3, [r7, #31]
 8005c94:	e05e      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005c96:	2302      	movs	r3, #2
 8005c98:	77fb      	strb	r3, [r7, #31]
 8005c9a:	e05b      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	77fb      	strb	r3, [r7, #31]
 8005ca0:	e058      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005ca2:	2308      	movs	r3, #8
 8005ca4:	77fb      	strb	r3, [r7, #31]
 8005ca6:	e055      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005ca8:	2310      	movs	r3, #16
 8005caa:	77fb      	strb	r3, [r7, #31]
 8005cac:	e052      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a68      	ldr	r2, [pc, #416]	@ (8005e54 <USART_SetConfig+0x2dc>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d120      	bne.n	8005cfa <USART_SetConfig+0x182>
 8005cb8:	4b64      	ldr	r3, [pc, #400]	@ (8005e4c <USART_SetConfig+0x2d4>)
 8005cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cbe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005cc2:	2b30      	cmp	r3, #48	@ 0x30
 8005cc4:	d013      	beq.n	8005cee <USART_SetConfig+0x176>
 8005cc6:	2b30      	cmp	r3, #48	@ 0x30
 8005cc8:	d814      	bhi.n	8005cf4 <USART_SetConfig+0x17c>
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	d009      	beq.n	8005ce2 <USART_SetConfig+0x16a>
 8005cce:	2b20      	cmp	r3, #32
 8005cd0:	d810      	bhi.n	8005cf4 <USART_SetConfig+0x17c>
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <USART_SetConfig+0x164>
 8005cd6:	2b10      	cmp	r3, #16
 8005cd8:	d006      	beq.n	8005ce8 <USART_SetConfig+0x170>
 8005cda:	e00b      	b.n	8005cf4 <USART_SetConfig+0x17c>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	77fb      	strb	r3, [r7, #31]
 8005ce0:	e038      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	77fb      	strb	r3, [r7, #31]
 8005ce6:	e035      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005ce8:	2304      	movs	r3, #4
 8005cea:	77fb      	strb	r3, [r7, #31]
 8005cec:	e032      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005cee:	2308      	movs	r3, #8
 8005cf0:	77fb      	strb	r3, [r7, #31]
 8005cf2:	e02f      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	77fb      	strb	r3, [r7, #31]
 8005cf8:	e02c      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a56      	ldr	r2, [pc, #344]	@ (8005e58 <USART_SetConfig+0x2e0>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d125      	bne.n	8005d50 <USART_SetConfig+0x1d8>
 8005d04:	4b51      	ldr	r3, [pc, #324]	@ (8005e4c <USART_SetConfig+0x2d4>)
 8005d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d0a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005d0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d12:	d017      	beq.n	8005d44 <USART_SetConfig+0x1cc>
 8005d14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d18:	d817      	bhi.n	8005d4a <USART_SetConfig+0x1d2>
 8005d1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d1e:	d00b      	beq.n	8005d38 <USART_SetConfig+0x1c0>
 8005d20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d24:	d811      	bhi.n	8005d4a <USART_SetConfig+0x1d2>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <USART_SetConfig+0x1ba>
 8005d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d2e:	d006      	beq.n	8005d3e <USART_SetConfig+0x1c6>
 8005d30:	e00b      	b.n	8005d4a <USART_SetConfig+0x1d2>
 8005d32:	2301      	movs	r3, #1
 8005d34:	77fb      	strb	r3, [r7, #31]
 8005d36:	e00d      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	77fb      	strb	r3, [r7, #31]
 8005d3c:	e00a      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005d3e:	2304      	movs	r3, #4
 8005d40:	77fb      	strb	r3, [r7, #31]
 8005d42:	e007      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005d44:	2308      	movs	r3, #8
 8005d46:	77fb      	strb	r3, [r7, #31]
 8005d48:	e004      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005d4a:	2310      	movs	r3, #16
 8005d4c:	77fb      	strb	r3, [r7, #31]
 8005d4e:	e001      	b.n	8005d54 <USART_SetConfig+0x1dc>
 8005d50:	2310      	movs	r3, #16
 8005d52:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8005d54:	7ffb      	ldrb	r3, [r7, #31]
 8005d56:	2b08      	cmp	r3, #8
 8005d58:	d857      	bhi.n	8005e0a <USART_SetConfig+0x292>
 8005d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d60 <USART_SetConfig+0x1e8>)
 8005d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d60:	08005d85 	.word	0x08005d85
 8005d64:	08005da3 	.word	0x08005da3
 8005d68:	08005dc1 	.word	0x08005dc1
 8005d6c:	08005e0b 	.word	0x08005e0b
 8005d70:	08005dd7 	.word	0x08005dd7
 8005d74:	08005e0b 	.word	0x08005e0b
 8005d78:	08005e0b 	.word	0x08005e0b
 8005d7c:	08005e0b 	.word	0x08005e0b
 8005d80:	08005df5 	.word	0x08005df5
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d84:	f7fc ffce 	bl	8002d24 <HAL_RCC_GetPCLK1Freq>
 8005d88:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	005a      	lsls	r2, r3, #1
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	085b      	lsrs	r3, r3, #1
 8005d94:	441a      	add	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9e:	61bb      	str	r3, [r7, #24]
      break;
 8005da0:	e036      	b.n	8005e10 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8005da2:	f7fc ffd3 	bl	8002d4c <HAL_RCC_GetPCLK2Freq>
 8005da6:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	005a      	lsls	r2, r3, #1
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	085b      	lsrs	r3, r3, #1
 8005db2:	441a      	add	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dbc:	61bb      	str	r3, [r7, #24]
      break;
 8005dbe:	e027      	b.n	8005e10 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	085a      	lsrs	r2, r3, #1
 8005dc6:	4b25      	ldr	r3, [pc, #148]	@ (8005e5c <USART_SetConfig+0x2e4>)
 8005dc8:	4413      	add	r3, r2
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6852      	ldr	r2, [r2, #4]
 8005dce:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dd2:	61bb      	str	r3, [r7, #24]
      break;
 8005dd4:	e01c      	b.n	8005e10 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8005dd6:	f7fc fed3 	bl	8002b80 <HAL_RCC_GetSysClockFreq>
 8005dda:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	005a      	lsls	r2, r3, #1
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	085b      	lsrs	r3, r3, #1
 8005de6:	441a      	add	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df0:	61bb      	str	r3, [r7, #24]
      break;
 8005df2:	e00d      	b.n	8005e10 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	085b      	lsrs	r3, r3, #1
 8005dfa:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e06:	61bb      	str	r3, [r7, #24]
      break;
 8005e08:	e002      	b.n	8005e10 <USART_SetConfig+0x298>
    default:
      ret = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	77bb      	strb	r3, [r7, #30]
      break;
 8005e0e:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	2b0f      	cmp	r3, #15
 8005e14:	d924      	bls.n	8005e60 <USART_SetConfig+0x2e8>
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e1c:	d220      	bcs.n	8005e60 <USART_SetConfig+0x2e8>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	f023 030f 	bic.w	r3, r3, #15
 8005e26:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	085b      	lsrs	r3, r3, #1
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	89fb      	ldrh	r3, [r7, #14]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	89fa      	ldrh	r2, [r7, #14]
 8005e40:	60da      	str	r2, [r3, #12]
 8005e42:	e00f      	b.n	8005e64 <USART_SetConfig+0x2ec>
 8005e44:	efff69f3 	.word	0xefff69f3
 8005e48:	40011000 	.word	0x40011000
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	40004400 	.word	0x40004400
 8005e54:	40004800 	.word	0x40004800
 8005e58:	40011400 	.word	0x40011400
 8005e5c:	01e84800 	.word	0x01e84800
  }
  else
  {
    ret = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	639a      	str	r2, [r3, #56]	@ 0x38
  husart->TxISR   = NULL;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  return ret;
 8005e70:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3720      	adds	r7, #32
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop

08005e7c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af02      	add	r7, sp, #8
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e8a:	f7fb facd 	bl	8001428 <HAL_GetTick>
 8005e8e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b08      	cmp	r3, #8
 8005e9c:	d10e      	bne.n	8005ebc <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005e9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff fe2d 	bl	8005b0c <USART_WaitOnFlagUntilTimeout>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e01e      	b.n	8005efa <USART_CheckIdleState+0x7e>
    }
  }
#if defined(USART_ISR_REACK)
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d10e      	bne.n	8005ee8 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005eca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff fe17 	bl	8005b0c <USART_WaitOnFlagUntilTimeout>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e008      	b.n	8005efa <USART_CheckIdleState+0x7e>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <USART_TxISR_8BIT>:
  * @note   ISR function executed when data word length is less than 9 bits long.
  * @param  husart USART handle.
  * @retval None
  */
static void USART_TxISR_8BIT(USART_HandleTypeDef *husart)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b085      	sub	sp, #20
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  const HAL_USART_StateTypeDef state = husart->State;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005f10:	73fb      	strb	r3, [r7, #15]

  /* Check that a Tx process is ongoing */
  if ((state == HAL_USART_STATE_BUSY_TX) ||
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	2b12      	cmp	r3, #18
 8005f16:	d002      	beq.n	8005f1e <USART_TxISR_8BIT+0x1c>
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
 8005f1a:	2b32      	cmp	r3, #50	@ 0x32
 8005f1c:	d127      	bne.n	8005f6e <USART_TxISR_8BIT+0x6c>
      (state == HAL_USART_STATE_BUSY_TX_RX))
  {
    if (husart->TxXferCount == 0U)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d110      	bne.n	8005f4a <USART_TxISR_8BIT+0x48>
    {
      /* Disable the USART Transmit data register empty interrupt */
      __HAL_USART_DISABLE_IT(husart, USART_IT_TXE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f36:	601a      	str	r2, [r3, #0]

      /* Enable the USART Transmit Complete Interrupt */
      __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f46:	601a      	str	r2, [r3, #0]
      husart->Instance->TDR = (uint8_t)(*husart->pTxBuffPtr & (uint8_t)0xFF);
      husart->pTxBuffPtr++;
      husart->TxXferCount--;
    }
  }
}
 8005f48:	e011      	b.n	8005f6e <USART_TxISR_8BIT+0x6c>
      husart->Instance->TDR = (uint8_t)(*husart->pTxBuffPtr & (uint8_t)0xFF);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4e:	781a      	ldrb	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	629a      	str	r2, [r3, #40]	@ 0x28
      husart->pTxBuffPtr++;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	625a      	str	r2, [r3, #36]	@ 0x24
      husart->TxXferCount--;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	3b01      	subs	r3, #1
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005f6e:	bf00      	nop
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <USART_TxISR_16BIT>:
  * @note   ISR function executed when data word length is 9 bits long.
  * @param  husart USART handle.
  * @retval None
  */
static void USART_TxISR_16BIT(USART_HandleTypeDef *husart)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b085      	sub	sp, #20
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  const HAL_USART_StateTypeDef state = husart->State;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005f88:	73fb      	strb	r3, [r7, #15]
  const uint16_t *tmp;

  if ((state == HAL_USART_STATE_BUSY_TX) ||
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
 8005f8c:	2b12      	cmp	r3, #18
 8005f8e:	d002      	beq.n	8005f96 <USART_TxISR_16BIT+0x1c>
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	2b32      	cmp	r3, #50	@ 0x32
 8005f94:	d12c      	bne.n	8005ff0 <USART_TxISR_16BIT+0x76>
      (state == HAL_USART_STATE_BUSY_TX_RX))
  {
    if (husart->TxXferCount == 0U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d110      	bne.n	8005fc2 <USART_TxISR_16BIT+0x48>
    {
      /* Disable the USART Transmit data register empty interrupt */
      __HAL_USART_DISABLE_IT(husart, USART_IT_TXE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fae:	601a      	str	r2, [r3, #0]

      /* Enable the USART Transmit Complete Interrupt */
      __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fbe:	601a      	str	r2, [r3, #0]
      husart->Instance->TDR = (uint16_t)(*tmp & 0x01FFU);
      husart->pTxBuffPtr += 2U;
      husart->TxXferCount--;
    }
  }
}
 8005fc0:	e016      	b.n	8005ff0 <USART_TxISR_16BIT+0x76>
      tmp = (const uint16_t *) husart->pTxBuffPtr;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc6:	60bb      	str	r3, [r7, #8]
      husart->Instance->TDR = (uint16_t)(*tmp & 0x01FFU);
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fd6:	629a      	str	r2, [r3, #40]	@ 0x28
      husart->pTxBuffPtr += 2U;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fdc:	1c9a      	adds	r2, r3, #2
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	625a      	str	r2, [r3, #36]	@ 0x24
      husart->TxXferCount--;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005ff0:	bf00      	nop
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006012:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 0201 	bic.w	r2, r2, #1
 8006022:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	63da      	str	r2, [r3, #60]	@ 0x3c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b12      	cmp	r3, #18
 8006034:	d113      	bne.n	800605e <USART_EndTransmit_IT+0x62>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2208      	movs	r2, #8
 800603c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	699a      	ldr	r2, [r3, #24]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f042 0208 	orr.w	r2, r2, #8
 800604c:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff fd08 	bl	8005a6c <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800605c:	e00b      	b.n	8006076 <USART_EndTransmit_IT+0x7a>
  else if (husart->RxXferCount == 0U)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d106      	bne.n	8006076 <USART_EndTransmit_IT+0x7a>
    husart->State = HAL_USART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    HAL_USART_TxRxCpltCallback(husart);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7ff fd05 	bl	8005a80 <HAL_USART_TxRxCpltCallback>
}
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <memset>:
 800607e:	4402      	add	r2, r0
 8006080:	4603      	mov	r3, r0
 8006082:	4293      	cmp	r3, r2
 8006084:	d100      	bne.n	8006088 <memset+0xa>
 8006086:	4770      	bx	lr
 8006088:	f803 1b01 	strb.w	r1, [r3], #1
 800608c:	e7f9      	b.n	8006082 <memset+0x4>
	...

08006090 <__libc_init_array>:
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	4d0d      	ldr	r5, [pc, #52]	@ (80060c8 <__libc_init_array+0x38>)
 8006094:	4c0d      	ldr	r4, [pc, #52]	@ (80060cc <__libc_init_array+0x3c>)
 8006096:	1b64      	subs	r4, r4, r5
 8006098:	10a4      	asrs	r4, r4, #2
 800609a:	2600      	movs	r6, #0
 800609c:	42a6      	cmp	r6, r4
 800609e:	d109      	bne.n	80060b4 <__libc_init_array+0x24>
 80060a0:	4d0b      	ldr	r5, [pc, #44]	@ (80060d0 <__libc_init_array+0x40>)
 80060a2:	4c0c      	ldr	r4, [pc, #48]	@ (80060d4 <__libc_init_array+0x44>)
 80060a4:	f000 f818 	bl	80060d8 <_init>
 80060a8:	1b64      	subs	r4, r4, r5
 80060aa:	10a4      	asrs	r4, r4, #2
 80060ac:	2600      	movs	r6, #0
 80060ae:	42a6      	cmp	r6, r4
 80060b0:	d105      	bne.n	80060be <__libc_init_array+0x2e>
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
 80060b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b8:	4798      	blx	r3
 80060ba:	3601      	adds	r6, #1
 80060bc:	e7ee      	b.n	800609c <__libc_init_array+0xc>
 80060be:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c2:	4798      	blx	r3
 80060c4:	3601      	adds	r6, #1
 80060c6:	e7f2      	b.n	80060ae <__libc_init_array+0x1e>
 80060c8:	0800613c 	.word	0x0800613c
 80060cc:	0800613c 	.word	0x0800613c
 80060d0:	0800613c 	.word	0x0800613c
 80060d4:	08006140 	.word	0x08006140

080060d8 <_init>:
 80060d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060da:	bf00      	nop
 80060dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060de:	bc08      	pop	{r3}
 80060e0:	469e      	mov	lr, r3
 80060e2:	4770      	bx	lr

080060e4 <_fini>:
 80060e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e6:	bf00      	nop
 80060e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ea:	bc08      	pop	{r3}
 80060ec:	469e      	mov	lr, r3
 80060ee:	4770      	bx	lr
